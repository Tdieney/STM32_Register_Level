
0_BasicLFR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08004f78  08004f78  00014f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800535c  0800535c  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800535c  0800535c  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800535c  0800535c  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800535c  0800535c  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005360  08005360  00015360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08005364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  200001d0  08005534  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005534  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b784  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efd  00000000  00000000  0002b97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000398  00000000  00000000  0002d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002b0  00000000  00000000  0002dc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000137e5  00000000  00000000  0002dec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cba  00000000  00000000  000416ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a2e3  00000000  00000000  0004a367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a464a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d50  00000000  00000000  000a46a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000a63f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000a64bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f5c 	.word	0x08004f5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	08004f5c 	.word	0x08004f5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <I2C_Write8>:
	I2C_RECEIVE(MPUADDR, i2cBif, NofData, 100);
}

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001088:	23d0      	movs	r3, #208	; 0xd0
 800108a:	73fb      	strb	r3, [r7, #15]
	I2C_TRANSMIT(MPUADDR, i2cData, 2,100);
 800108c:	f107 010c 	add.w	r1, r7, #12
 8001090:	7bf8      	ldrb	r0, [r7, #15]
 8001092:	2364      	movs	r3, #100	; 0x64
 8001094:	2202      	movs	r2, #2
 8001096:	f000 ff19 	bl	8001ecc <i2c_I2C1_masterTransmit>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	206b      	movs	r0, #107	; 0x6b
 80010b4:	f7ff ffdc 	bl	8001070 <I2C_Write8>
	HAL_Delay(100);
 80010b8:	2064      	movs	r0, #100	; 0x64
 80010ba:	f001 f8d1 	bl	8002260 <tim_msDelay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	791b      	ldrb	r3, [r3, #4]
 80010cc:	019b      	lsls	r3, r3, #6
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d4:	b25a      	sxtb	r2, r3
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4313      	orrs	r3, r2
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	4619      	mov	r1, r3
 80010e4:	206b      	movs	r0, #107	; 0x6b
 80010e6:	f7ff ffc3 	bl	8001070 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80010ea:	2064      	movs	r0, #100	; 0x64
 80010ec:	f001 f8b8 	bl	8002260 <tim_msDelay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	78db      	ldrb	r3, [r3, #3]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4619      	mov	r1, r3
 8001102:	201a      	movs	r0, #26
 8001104:	f7ff ffb4 	bl	8001070 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	785b      	ldrb	r3, [r3, #1]
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0318 	and.w	r3, r3, #24
 8001118:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	4619      	mov	r1, r3
 800111e:	201b      	movs	r0, #27
 8001120:	f7ff ffa6 	bl	8001070 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	789b      	ldrb	r3, [r3, #2]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f003 0318 	and.w	r3, r3, #24
 8001134:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	4619      	mov	r1, r3
 800113a:	201c      	movs	r0, #28
 800113c:	f7ff ff98 	bl	8001070 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001140:	2004      	movs	r0, #4
 8001142:	f000 f857 	bl	80011f4 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	789b      	ldrb	r3, [r3, #2]
 800114a:	2b03      	cmp	r3, #3
 800114c:	d81a      	bhi.n	8001184 <MPU6050_Config+0xe0>
 800114e:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <MPU6050_Config+0xb0>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	08001165 	.word	0x08001165
 8001158:	0800116d 	.word	0x0800116d
 800115c:	08001175 	.word	0x08001175
 8001160:	0800117d 	.word	0x0800117d
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MPU6050_Config+0x12c>)
 8001166:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <MPU6050_Config+0x130>)
 8001168:	601a      	str	r2, [r3, #0]
			break;
 800116a:	e00c      	b.n	8001186 <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MPU6050_Config+0x12c>)
 800116e:	4a1a      	ldr	r2, [pc, #104]	; (80011d8 <MPU6050_Config+0x134>)
 8001170:	601a      	str	r2, [r3, #0]
				break;
 8001172:	e008      	b.n	8001186 <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MPU6050_Config+0x12c>)
 8001176:	4a19      	ldr	r2, [pc, #100]	; (80011dc <MPU6050_Config+0x138>)
 8001178:	601a      	str	r2, [r3, #0]
			break;
 800117a:	e004      	b.n	8001186 <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MPU6050_Config+0x12c>)
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <MPU6050_Config+0x13c>)
 8001180:	601a      	str	r2, [r3, #0]
			break;
 8001182:	e000      	b.n	8001186 <MPU6050_Config+0xe2>
		
		default:
			break;
 8001184:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	785b      	ldrb	r3, [r3, #1]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d81a      	bhi.n	80011c4 <MPU6050_Config+0x120>
 800118e:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <MPU6050_Config+0xf0>)
 8001190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001194:	080011a5 	.word	0x080011a5
 8001198:	080011ad 	.word	0x080011ad
 800119c:	080011b5 	.word	0x080011b5
 80011a0:	080011bd 	.word	0x080011bd
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MPU6050_Config+0x140>)
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <MPU6050_Config+0x144>)
 80011a8:	601a      	str	r2, [r3, #0]
			break;
 80011aa:	e00c      	b.n	80011c6 <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <MPU6050_Config+0x140>)
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <MPU6050_Config+0x148>)
 80011b0:	601a      	str	r2, [r3, #0]
				break;
 80011b2:	e008      	b.n	80011c6 <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MPU6050_Config+0x140>)
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <MPU6050_Config+0x14c>)
 80011b8:	601a      	str	r2, [r3, #0]
			break;
 80011ba:	e004      	b.n	80011c6 <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MPU6050_Config+0x140>)
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <MPU6050_Config+0x130>)
 80011c0:	601a      	str	r2, [r3, #0]
			break;
 80011c2:	e000      	b.n	80011c6 <MPU6050_Config+0x122>
		
		default:
			break;
 80011c4:	bf00      	nop
	}
	
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001ec 	.word	0x200001ec
 80011d4:	3d7a0000 	.word	0x3d7a0000
 80011d8:	3dfa0000 	.word	0x3dfa0000
 80011dc:	3e7a0000 	.word	0x3e7a0000
 80011e0:	3efa0000 	.word	0x3efa0000
 80011e4:	200001f0 	.word	0x200001f0
 80011e8:	3bfa0000 	.word	0x3bfa0000
 80011ec:	3c7a0000 	.word	0x3c7a0000
 80011f0:	3cfa0000 	.word	0x3cfa0000

080011f4 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4619      	mov	r1, r3
 8001202:	2019      	movs	r0, #25
 8001204:	f7ff ff34 	bl	8001070 <I2C_Write8>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <getThreshold>:

/**
 * @brief Get threshold saved in FLASH before
 */
void getThreshold()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  flash_read16(0x0800FC00, Threshold, 7);
 8001214:	2207      	movs	r2, #7
 8001216:	4903      	ldr	r1, [pc, #12]	; (8001224 <getThreshold+0x14>)
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <getThreshold+0x18>)
 800121a:	f000 fdc9 	bl	8001db0 <flash_read16>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000023c 	.word	0x2000023c
 8001228:	0800fc00 	.word	0x0800fc00

0800122c <sigProcessing>:
 *        White line return low analog value
 *        Testing on black line
 *
 */
void sigProcessing()
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
  y = 0;
 8001232:	4b43      	ldr	r3, [pc, #268]	; (8001340 <sigProcessing+0x114>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
  sum = 0;
 8001238:	4b42      	ldr	r3, [pc, #264]	; (8001344 <sigProcessing+0x118>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
  // 7 led for 7 bottom sensors
  for(uint8_t x = 1; x < 8; x++)
 800123e:	2301      	movs	r3, #1
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	e030      	b.n	80012a6 <sigProcessing+0x7a>
  {
    // Detect black color
    if (sensorValue[x - 1] >= Threshold[x - 1])
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	3b01      	subs	r3, #1
 8001248:	4a3f      	ldr	r2, [pc, #252]	; (8001348 <sigProcessing+0x11c>)
 800124a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	3b01      	subs	r3, #1
 8001252:	493e      	ldr	r1, [pc, #248]	; (800134c <sigProcessing+0x120>)
 8001254:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001258:	429a      	cmp	r2, r3
 800125a:	d317      	bcc.n	800128c <sigProcessing+0x60>
    {
      convertedValue[x - 1] = 1;
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	3b01      	subs	r3, #1
 8001260:	4a3b      	ldr	r2, [pc, #236]	; (8001350 <sigProcessing+0x124>)
 8001262:	2101      	movs	r1, #1
 8001264:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      sum += x;
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <sigProcessing+0x118>)
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4413      	add	r3, r2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <sigProcessing+0x118>)
 8001274:	701a      	strb	r2, [r3, #0]
      y++;
 8001276:	4b32      	ldr	r3, [pc, #200]	; (8001340 <sigProcessing+0x114>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <sigProcessing+0x114>)
 8001280:	701a      	strb	r2, [r3, #0]
      led_on(x);
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f8f9 	bl	800147c <led_on>
 800128a:	e009      	b.n	80012a0 <sigProcessing+0x74>
    }
    // Detect white color
    else
    {
      convertedValue[x - 1] = 0;
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	3b01      	subs	r3, #1
 8001290:	4a2f      	ldr	r2, [pc, #188]	; (8001350 <sigProcessing+0x124>)
 8001292:	2100      	movs	r1, #0
 8001294:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      led_off(x);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f924 	bl	80014e8 <led_off>
  for(uint8_t x = 1; x < 8; x++)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	3301      	adds	r3, #1
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	d9cb      	bls.n	8001244 <sigProcessing+0x18>
    }
  }
  if((y > 0) && (y < 7))
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <sigProcessing+0x114>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01e      	beq.n	80012f2 <sigProcessing+0xc6>
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <sigProcessing+0x114>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b06      	cmp	r3, #6
 80012ba:	d81a      	bhi.n	80012f2 <sigProcessing+0xc6>
  {
    err = (float)sum/y - 4;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <sigProcessing+0x118>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fc97 	bl	8000bf4 <__aeabi_ui2f>
 80012c6:	4604      	mov	r4, r0
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <sigProcessing+0x114>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fc95 	bl	8000bfc <__aeabi_i2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4619      	mov	r1, r3
 80012d6:	4620      	mov	r0, r4
 80012d8:	f7ff fd98 	bl	8000e0c <__aeabi_fdiv>
 80012dc:	4603      	mov	r3, r0
 80012de:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fbd4 	bl	8000a90 <__aeabi_fsub>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <sigProcessing+0x128>)
 80012ee:	601a      	str	r2, [r3, #0]
  }
  else if((err > -1) && (err < 1))
  {
    err = 0;
  }
}
 80012f0:	e021      	b.n	8001336 <sigProcessing+0x10a>
  else if(y == 7)
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <sigProcessing+0x114>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	d104      	bne.n	8001304 <sigProcessing+0xd8>
    err = 0;
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <sigProcessing+0x128>)
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
}
 8001302:	e018      	b.n	8001336 <sigProcessing+0x10a>
  else if((err > -1) && (err < 1))
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <sigProcessing+0x128>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4913      	ldr	r1, [pc, #76]	; (8001358 <sigProcessing+0x12c>)
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fe86 	bl	800101c <__aeabi_fcmpgt>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d100      	bne.n	8001318 <sigProcessing+0xec>
}
 8001316:	e00e      	b.n	8001336 <sigProcessing+0x10a>
  else if((err > -1) && (err < 1))
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <sigProcessing+0x128>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe5d 	bl	8000fe0 <__aeabi_fcmplt>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d100      	bne.n	800132e <sigProcessing+0x102>
}
 800132c:	e003      	b.n	8001336 <sigProcessing+0x10a>
    err = 0;
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <sigProcessing+0x128>)
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bd90      	pop	{r4, r7, pc}
 800133e:	bf00      	nop
 8001340:	2000025a 	.word	0x2000025a
 8001344:	2000022a 	.word	0x2000022a
 8001348:	2000026c 	.word	0x2000026c
 800134c:	2000023c 	.word	0x2000023c
 8001350:	2000024c 	.word	0x2000024c
 8001354:	200001f4 	.word	0x200001f4
 8001358:	bf800000 	.word	0xbf800000

0800135c <calcPID>:

/**
 * @brief Run with PID algorithm
 */
void calcPID(float Kp, float Kd, uint16_t defaultSpeed)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	4613      	mov	r3, r2
 8001368:	80fb      	strh	r3, [r7, #6]
  PD = Kp*err + Kd*(err - oldErr);
 800136a:	4b35      	ldr	r3, [pc, #212]	; (8001440 <calcPID+0xe4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68f9      	ldr	r1, [r7, #12]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fc97 	bl	8000ca4 <__aeabi_fmul>
 8001376:	4603      	mov	r3, r0
 8001378:	461c      	mov	r4, r3
 800137a:	4b31      	ldr	r3, [pc, #196]	; (8001440 <calcPID+0xe4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a31      	ldr	r2, [pc, #196]	; (8001444 <calcPID+0xe8>)
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fb83 	bl	8000a90 <__aeabi_fsub>
 800138a:	4603      	mov	r3, r0
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fc88 	bl	8000ca4 <__aeabi_fmul>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff fb7b 	bl	8000a94 <__addsf3>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <calcPID+0xec>)
 80013a4:	601a      	str	r2, [r3, #0]
  oldErr = err;
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <calcPID+0xe4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a26      	ldr	r2, [pc, #152]	; (8001444 <calcPID+0xe8>)
 80013ac:	6013      	str	r3, [r2, #0]
  leftSpeed = defaultSpeed + PD;
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fc23 	bl	8000bfc <__aeabi_i2f>
 80013b6:	4602      	mov	r2, r0
 80013b8:	4b23      	ldr	r3, [pc, #140]	; (8001448 <calcPID+0xec>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	4610      	mov	r0, r2
 80013c0:	f7ff fb68 	bl	8000a94 <__addsf3>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fe32 	bl	8001030 <__aeabi_f2uiz>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <calcPID+0xf0>)
 80013d2:	801a      	strh	r2, [r3, #0]
  rightSpeed = defaultSpeed - PD;
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fc10 	bl	8000bfc <__aeabi_i2f>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <calcPID+0xec>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	4610      	mov	r0, r2
 80013e6:	f7ff fb53 	bl	8000a90 <__aeabi_fsub>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe1f 	bl	8001030 <__aeabi_f2uiz>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <calcPID+0xf4>)
 80013f8:	801a      	strh	r2, [r3, #0]

//  if(err != 0)
//  {
    setLeftMotor(leftSpeed, 1);
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <calcPID+0xf0>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	2101      	movs	r1, #1
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f965 	bl	80016d0 <setLeftMotor>
    setRightMotor(rightSpeed, 1);
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <calcPID+0xf4>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	2101      	movs	r1, #1
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f98b 	bl	8001728 <setRightMotor>
//  {
//    setLeftMotor(3200, 1);
//    setRightMotor(3200, 1);
//  }

  if(sensorValue[7] < 2500)
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <calcPID+0xf8>)
 8001414:	89db      	ldrh	r3, [r3, #14]
 8001416:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800141a:	4293      	cmp	r3, r2
 800141c:	d80c      	bhi.n	8001438 <calcPID+0xdc>
  {
    mode = 3;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <calcPID+0xfc>)
 8001420:	2203      	movs	r2, #3
 8001422:	701a      	strb	r2, [r3, #0]
    stopLeftMotor();
 8001424:	f000 f9aa 	bl	800177c <stopLeftMotor>
    stopRightMotor();
 8001428:	f000 f9b6 	bl	8001798 <stopRightMotor>
    led_offAll();
 800142c:	f000 f816 	bl	800145c <led_offAll>
    tim_msDelay(3000);
 8001430:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001434:	f000 ff14 	bl	8002260 <tim_msDelay>
  }
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	200001f4 	.word	0x200001f4
 8001444:	200001f8 	.word	0x200001f8
 8001448:	20000200 	.word	0x20000200
 800144c:	20000204 	.word	0x20000204
 8001450:	20000206 	.word	0x20000206
 8001454:	2000026c 	.word	0x2000026c
 8001458:	20000264 	.word	0x20000264

0800145c <led_offAll>:

/**
 * @brief Turn OFF all LED
 */
void led_offAll()
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  GPIOA->ODR = 0x0000;
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <led_offAll+0x18>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  GPIOB->ODR = 0x0000;
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <led_offAll+0x1c>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40010800 	.word	0x40010800
 8001478:	40010c00 	.word	0x40010c00

0800147c <led_on>:

/**
 * @brief Turn ON LED 1->7
 */
void led_on(uint8_t num)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  // Disable LED7SEG
  GPIOA->BRR |= (1 << 11);
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <led_on+0x64>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <led_on+0x64>)
 800148c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001490:	6153      	str	r3, [r2, #20]
  // Enable LED
  GPIOA->BSRR |= (1 << 12);
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <led_on+0x64>)
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <led_on+0x64>)
 8001498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800149c:	6113      	str	r3, [r2, #16]
  // Turn ON LED
  if(num < 4)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d80b      	bhi.n	80014bc <led_on+0x40>
  {
    GPIOA->BSRR |= (1 << (num + 7));
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <led_on+0x64>)
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	3207      	adds	r2, #7
 80014ac:	2101      	movs	r1, #1
 80014ae:	fa01 f202 	lsl.w	r2, r1, r2
 80014b2:	4611      	mov	r1, r2
 80014b4:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <led_on+0x64>)
 80014b6:	430b      	orrs	r3, r1
 80014b8:	6113      	str	r3, [r2, #16]
  }
  else
  {
    GPIOB->BSRR |= (1 << (19 - num));
  }
}
 80014ba:	e00b      	b.n	80014d4 <led_on+0x58>
    GPIOB->BSRR |= (1 << (19 - num));
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <led_on+0x68>)
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	79fa      	ldrb	r2, [r7, #7]
 80014c2:	f1c2 0213 	rsb	r2, r2, #19
 80014c6:	2101      	movs	r1, #1
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	4611      	mov	r1, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <led_on+0x68>)
 80014d0:	430b      	orrs	r3, r1
 80014d2:	6113      	str	r3, [r2, #16]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00

080014e8 <led_off>:

/**
 * @brief Turn ON LED 1->7
 */
void led_off(uint8_t num)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  // Disable LED
  GPIOA->BSRR |= (1 << 11);
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <led_off+0x64>)
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <led_off+0x64>)
 80014f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014fc:	6113      	str	r3, [r2, #16]
  // Enable LED7SEG
  GPIOA->BRR |= (1 << 12);
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <led_off+0x64>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <led_off+0x64>)
 8001504:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001508:	6153      	str	r3, [r2, #20]
  // Turn OFF LED
  if(num < 4)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d80b      	bhi.n	8001528 <led_off+0x40>
  {
    GPIOA->BRR |= (1 << (num + 7));
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <led_off+0x64>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	79fa      	ldrb	r2, [r7, #7]
 8001516:	3207      	adds	r2, #7
 8001518:	2101      	movs	r1, #1
 800151a:	fa01 f202 	lsl.w	r2, r1, r2
 800151e:	4611      	mov	r1, r2
 8001520:	4a0a      	ldr	r2, [pc, #40]	; (800154c <led_off+0x64>)
 8001522:	430b      	orrs	r3, r1
 8001524:	6153      	str	r3, [r2, #20]
  }
  else
  {
    GPIOB->BRR |= (1 << (19 - num));
  }
}
 8001526:	e00b      	b.n	8001540 <led_off+0x58>
    GPIOB->BRR |= (1 << (19 - num));
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <led_off+0x68>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	79fa      	ldrb	r2, [r7, #7]
 800152e:	f1c2 0213 	rsb	r2, r2, #19
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f202 	lsl.w	r2, r1, r2
 8001538:	4611      	mov	r1, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <led_off+0x68>)
 800153c:	430b      	orrs	r3, r1
 800153e:	6153      	str	r3, [r2, #20]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40010800 	.word	0x40010800
 8001550:	40010c00 	.word	0x40010c00

08001554 <main>:
char str[10];
float x_mpu, y_mpu, z_mpu;
uint8_t data;

int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
  // Initialize system
  rcc_config();
 800155a:	f000 fd53 	bl	8002004 <rcc_config>
  //systick_config();
  gpio_config();
 800155e:	f000 fc49 	bl	8001df4 <gpio_config>
  exti_config();
 8001562:	f000 fb9f 	bl	8001ca4 <exti_config>
  tim_config();
 8001566:	f000 ff5f 	bl	8002428 <tim_config>
  adc_config();
 800156a:	f000 f929 	bl	80017c0 <adc_config>
  dma_config();
 800156e:	f000 fa73 	bl	8001a58 <dma_config>
  i2c_config();
 8001572:	f000 fc77 	bl	8001e64 <i2c_config>

  // Read accelerometer x, y, z values
  MPU_ConfigTypeDef myConfig;
  myConfig.Accel_Full_Scale = AFS_SEL_4g;
 8001576:	2301      	movs	r3, #1
 8001578:	74bb      	strb	r3, [r7, #18]
  myConfig.ClockSource = Internal_8MHz;
 800157a:	2300      	movs	r3, #0
 800157c:	743b      	strb	r3, [r7, #16]
  myConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 800157e:	2301      	movs	r3, #1
 8001580:	74fb      	strb	r3, [r7, #19]
  myConfig.Sleep_Mode_Bit = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	753b      	strb	r3, [r7, #20]
  myConfig.Gyro_Full_Scale = FS_SEL_500;
 8001586:	2301      	movs	r3, #1
 8001588:	747b      	strb	r3, [r7, #17]
  MPU6050_Config(&myConfig);
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fd88 	bl	80010a4 <MPU6050_Config>
  ScaledData_Def myAccel;

  P = 0;
 8001594:	4b45      	ldr	r3, [pc, #276]	; (80016ac <main+0x158>)
 8001596:	2200      	movs	r2, #0
 8001598:	801a      	strh	r2, [r3, #0]
  mode = 0;
 800159a:	4b45      	ldr	r3, [pc, #276]	; (80016b0 <main+0x15c>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]

  while(1)
  {
    switch(mode)
 80015a0:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <main+0x15c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d8fb      	bhi.n	80015a0 <main+0x4c>
 80015a8:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <main+0x5c>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	080015db 	.word	0x080015db
 80015b8:	0800167f 	.word	0x0800167f
 80015bc:	08001691 	.word	0x08001691
//        led_toggleAll(200, 10);
//        readLowValue();
//        // Calculate threshold and write to flash
//        calcThreshold();

        if(sensorValue[7] < ACTIVATE_THRESHOLD)
 80015c0:	4b3c      	ldr	r3, [pc, #240]	; (80016b4 <main+0x160>)
 80015c2:	89db      	ldrh	r3, [r3, #14]
 80015c4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d86b      	bhi.n	80016a4 <main+0x150>
        {
          mode++;
 80015cc:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <main+0x15c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <main+0x15c>)
 80015d6:	701a      	strb	r2, [r3, #0]
        }
        break;
 80015d8:	e064      	b.n	80016a4 <main+0x150>

      // Start signal by buzzer
      case 1:
        // Get threshold in FLASH
        getThreshold();
 80015da:	f7ff fe19 	bl	8001210 <getThreshold>

        for(i = 0; i < 3; i++)
 80015de:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <main+0x164>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	e02d      	b.n	8001642 <main+0xee>
        {
          GPIOB->BSRR |= (1 << 10);
 80015e6:	4b35      	ldr	r3, [pc, #212]	; (80016bc <main+0x168>)
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	4a34      	ldr	r2, [pc, #208]	; (80016bc <main+0x168>)
 80015ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f0:	6113      	str	r3, [r2, #16]
          for(j = 7; j > 0; j--)
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <main+0x16c>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e00d      	b.n	8001616 <main+0xc2>
          {
            led_on(j);
 80015fa:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <main+0x16c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff3c 	bl	800147c <led_on>
            tim_msDelay(10);
 8001604:	200a      	movs	r0, #10
 8001606:	f000 fe2b 	bl	8002260 <tim_msDelay>
          for(j = 7; j > 0; j--)
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <main+0x16c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	3b01      	subs	r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <main+0x16c>)
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <main+0x16c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ed      	bne.n	80015fa <main+0xa6>
          }
          led_offAll();
 800161e:	f7ff ff1d 	bl	800145c <led_offAll>
          GPIOB->BRR |= (1 << 10);
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <main+0x168>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	4a25      	ldr	r2, [pc, #148]	; (80016bc <main+0x168>)
 8001628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162c:	6153      	str	r3, [r2, #20]
          tim_msDelay(1000);
 800162e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001632:	f000 fe15 	bl	8002260 <tim_msDelay>
        for(i = 0; i < 3; i++)
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <main+0x164>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <main+0x164>)
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <main+0x164>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d9cd      	bls.n	80015e6 <main+0x92>
        }
        GPIOA->ODR = 0x1700;
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <main+0x170>)
 800164c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8001650:	60da      	str	r2, [r3, #12]
        GPIOB->ODR = 0xF400;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <main+0x168>)
 8001654:	f44f 4274 	mov.w	r2, #62464	; 0xf400
 8001658:	60da      	str	r2, [r3, #12]
        tim_msDelay(1000);
 800165a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165e:	f000 fdff 	bl	8002260 <tim_msDelay>
        led_offAll();
 8001662:	f7ff fefb 	bl	800145c <led_offAll>
        GPIOB->BRR |= (1 << 10);
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <main+0x168>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <main+0x168>)
 800166c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001670:	6153      	str	r3, [r2, #20]
        mode++;
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <main+0x15c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3301      	adds	r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <main+0x15c>)
 800167c:	701a      	strb	r2, [r3, #0]

      // Run mode
      case 2:
        sigProcessing();
 800167e:	f7ff fdd5 	bl	800122c <sigProcessing>
        calcPID(KP, KD, DEFAULT_SPEED);
 8001682:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001686:	4910      	ldr	r1, [pc, #64]	; (80016c8 <main+0x174>)
 8001688:	4810      	ldr	r0, [pc, #64]	; (80016cc <main+0x178>)
 800168a:	f7ff fe67 	bl	800135c <calcPID>
        break;
 800168e:	e00c      	b.n	80016aa <main+0x156>

      // Stop mode
      case 3:
        if(sensorValue[7] < ACTIVATE_THRESHOLD)
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <main+0x160>)
 8001692:	89db      	ldrh	r3, [r3, #14]
 8001694:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001698:	4293      	cmp	r3, r2
 800169a:	d805      	bhi.n	80016a8 <main+0x154>
        {
          mode = 1;
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <main+0x15c>)
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
        }
        break;
 80016a2:	e001      	b.n	80016a8 <main+0x154>
        break;
 80016a4:	bf00      	nop
 80016a6:	e77b      	b.n	80015a0 <main+0x4c>
        break;
 80016a8:	bf00      	nop
    switch(mode)
 80016aa:	e779      	b.n	80015a0 <main+0x4c>
 80016ac:	200001fc 	.word	0x200001fc
 80016b0:	20000264 	.word	0x20000264
 80016b4:	2000026c 	.word	0x2000026c
 80016b8:	20000265 	.word	0x20000265
 80016bc:	40010c00 	.word	0x40010c00
 80016c0:	2000025c 	.word	0x2000025c
 80016c4:	40010800 	.word	0x40010800
 80016c8:	43130000 	.word	0x43130000
 80016cc:	43c08000 	.word	0x43c08000

080016d0 <setLeftMotor>:
 * @note  Limit speed value 0->6399
 *        dir = 1: run forward
 *        dir = 0: run backward
 */
void setLeftMotor(uint16_t speed, uint8_t dir)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	80fb      	strh	r3, [r7, #6]
 80016dc:	4613      	mov	r3, r2
 80016de:	717b      	strb	r3, [r7, #5]
  if(speed < 0)
  {
    speed = 0;
  }
  else if(speed > 6399)
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80016e6:	d302      	bcc.n	80016ee <setLeftMotor+0x1e>
  {
    speed = 6399;
 80016e8:	f641 03ff 	movw	r3, #6399	; 0x18ff
 80016ec:	80fb      	strh	r3, [r7, #6]
  }
  if(dir == 1)
 80016ee:	797b      	ldrb	r3, [r7, #5]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d108      	bne.n	8001706 <setLeftMotor+0x36>
  {
    TIM2->CCR1 = speed;
 80016f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	6353      	str	r3, [r2, #52]	; 0x34
    TIM2->CCR2 = 0;
 80016fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001700:	2200      	movs	r2, #0
 8001702:	639a      	str	r2, [r3, #56]	; 0x38
  else if(dir == 0)
  {
    TIM2->CCR1 = 0;
    TIM2->CCR2 = speed;
  }
}
 8001704:	e00a      	b.n	800171c <setLeftMotor+0x4c>
  else if(dir == 0)
 8001706:	797b      	ldrb	r3, [r7, #5]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d107      	bne.n	800171c <setLeftMotor+0x4c>
    TIM2->CCR1 = 0;
 800170c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001710:	2200      	movs	r2, #0
 8001712:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCR2 = speed;
 8001714:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
	...

08001728 <setRightMotor>:
 * @note  Limit speed value 0->6399
 *        dir = 1: run forward
 *        dir = 0: run backward
 */
void setRightMotor(uint16_t speed, uint8_t dir)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	460a      	mov	r2, r1
 8001732:	80fb      	strh	r3, [r7, #6]
 8001734:	4613      	mov	r3, r2
 8001736:	717b      	strb	r3, [r7, #5]
  if(speed < 0)
  {
    speed = 0;
  }
  else if(speed > 6399)
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800173e:	d302      	bcc.n	8001746 <setRightMotor+0x1e>
  {
    speed = 6399;
 8001740:	f641 03ff 	movw	r3, #6399	; 0x18ff
 8001744:	80fb      	strh	r3, [r7, #6]
  }
  if(dir == 1)
 8001746:	797b      	ldrb	r3, [r7, #5]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d106      	bne.n	800175a <setRightMotor+0x32>
  {
    TIM4->CCR1 = speed;
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <setRightMotor+0x50>)
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	6353      	str	r3, [r2, #52]	; 0x34
    TIM4->CCR2 = 0;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <setRightMotor+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	639a      	str	r2, [r3, #56]	; 0x38
  else if(dir == 0)
  {
    TIM4->CCR1 = 0;
    TIM4->CCR2 = speed;
  }
}
 8001758:	e008      	b.n	800176c <setRightMotor+0x44>
  else if(dir == 0)
 800175a:	797b      	ldrb	r3, [r7, #5]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <setRightMotor+0x44>
    TIM4->CCR1 = 0;
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <setRightMotor+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR2 = speed;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <setRightMotor+0x50>)
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40000800 	.word	0x40000800

0800177c <stopLeftMotor>:

/**
 * @brief Stop left motor
 */
void stopLeftMotor()
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  TIM2->CCR1 = 0;
 8001780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001784:	2200      	movs	r2, #0
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 0;
 8001788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178c:	2200      	movs	r2, #0
 800178e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <stopRightMotor>:

/**
 * @brief Stop right motor
 */
void stopRightMotor()
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  TIM4->CCR1 = 0;
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <stopRightMotor+0x18>)
 800179e:	2200      	movs	r2, #0
 80017a0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 0;
 80017a2:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <stopRightMotor+0x18>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	40000800 	.word	0x40000800

080017b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <adc_config>:

/**
 * @brief ADC1 and ADC2 configuration
 */
void adc_config()
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  // Enable clocks
  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN | RCC_APB2ENR_ADC2EN;
 80017c4:	4b6b      	ldr	r3, [pc, #428]	; (8001974 <adc_config+0x1b4>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a6a      	ldr	r2, [pc, #424]	; (8001974 <adc_config+0x1b4>)
 80017ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80017ce:	6193      	str	r3, [r2, #24]
  // Right alignment
  ADC1->CR2 &= ~(ADC_CR2_ALIGN);
 80017d0:	4b69      	ldr	r3, [pc, #420]	; (8001978 <adc_config+0x1b8>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a68      	ldr	r2, [pc, #416]	; (8001978 <adc_config+0x1b8>)
 80017d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017da:	6093      	str	r3, [r2, #8]
  ADC2->CR2 &= ~(ADC_CR2_ALIGN);
 80017dc:	4b67      	ldr	r3, [pc, #412]	; (800197c <adc_config+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a66      	ldr	r2, [pc, #408]	; (800197c <adc_config+0x1bc>)
 80017e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017e6:	6093      	str	r3, [r2, #8]
  // Continuous conversion mode
  ADC1->CR2 |= ADC_CR2_CONT;
 80017e8:	4b63      	ldr	r3, [pc, #396]	; (8001978 <adc_config+0x1b8>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a62      	ldr	r2, [pc, #392]	; (8001978 <adc_config+0x1b8>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_CONT;
 80017f4:	4b61      	ldr	r3, [pc, #388]	; (800197c <adc_config+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	4a60      	ldr	r2, [pc, #384]	; (800197c <adc_config+0x1bc>)
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	6093      	str	r3, [r2, #8]
  // Software trigger
  ADC1->CR2 |= ADC_CR2_EXTSEL;
 8001800:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <adc_config+0x1b8>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a5c      	ldr	r2, [pc, #368]	; (8001978 <adc_config+0x1b8>)
 8001806:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 800180a:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_EXTSEL;
 800180c:	4b5b      	ldr	r3, [pc, #364]	; (800197c <adc_config+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a5a      	ldr	r2, [pc, #360]	; (800197c <adc_config+0x1bc>)
 8001812:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8001816:	6093      	str	r3, [r2, #8]
  // Set all sample time to 239.5 cycles
  // Sample time = (12.5 + 239.5)*6/64MHz = 23.625us
  ADC1->SMPR2 |= ADC_SMPR2_SMP0 | ADC_SMPR2_SMP1 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP3 | ADC_SMPR2_SMP8;
 8001818:	4b57      	ldr	r3, [pc, #348]	; (8001978 <adc_config+0x1b8>)
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	4956      	ldr	r1, [pc, #344]	; (8001978 <adc_config+0x1b8>)
 800181e:	4b58      	ldr	r3, [pc, #352]	; (8001980 <adc_config+0x1c0>)
 8001820:	4313      	orrs	r3, r2
 8001822:	610b      	str	r3, [r1, #16]
  ADC2->SMPR2 |= ADC_SMPR2_SMP4 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP6 | ADC_SMPR2_SMP7 | ADC_SMPR2_SMP9;
 8001824:	4b55      	ldr	r3, [pc, #340]	; (800197c <adc_config+0x1bc>)
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	4954      	ldr	r1, [pc, #336]	; (800197c <adc_config+0x1bc>)
 800182a:	4b56      	ldr	r3, [pc, #344]	; (8001984 <adc_config+0x1c4>)
 800182c:	4313      	orrs	r3, r2
 800182e:	610b      	str	r3, [r1, #16]
  // Number of conversion = 5 for each ADC
  ADC1->SQR1 &= ~(ADC_SQR1_L);
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <adc_config+0x1b8>)
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	4a50      	ldr	r2, [pc, #320]	; (8001978 <adc_config+0x1b8>)
 8001836:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800183a:	62d3      	str	r3, [r2, #44]	; 0x2c
  ADC1->SQR1 |= ADC_SQR1_L_2;
 800183c:	4b4e      	ldr	r3, [pc, #312]	; (8001978 <adc_config+0x1b8>)
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	4a4d      	ldr	r2, [pc, #308]	; (8001978 <adc_config+0x1b8>)
 8001842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001846:	62d3      	str	r3, [r2, #44]	; 0x2c
  ADC2->SQR1 &= ~(ADC_SQR1_L);
 8001848:	4b4c      	ldr	r3, [pc, #304]	; (800197c <adc_config+0x1bc>)
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	4a4b      	ldr	r2, [pc, #300]	; (800197c <adc_config+0x1bc>)
 800184e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001852:	62d3      	str	r3, [r2, #44]	; 0x2c
  ADC2->SQR1 |= ADC_SQR1_L_2;
 8001854:	4b49      	ldr	r3, [pc, #292]	; (800197c <adc_config+0x1bc>)
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	4a48      	ldr	r2, [pc, #288]	; (800197c <adc_config+0x1bc>)
 800185a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800185e:	62d3      	str	r3, [r2, #44]	; 0x2c
  // Sequencer
  ADC1->SQR3 = 0;
 8001860:	4b45      	ldr	r3, [pc, #276]	; (8001978 <adc_config+0x1b8>)
 8001862:	2200      	movs	r2, #0
 8001864:	635a      	str	r2, [r3, #52]	; 0x34
  ADC2->SQR3 = 0;
 8001866:	4b45      	ldr	r3, [pc, #276]	; (800197c <adc_config+0x1bc>)
 8001868:	2200      	movs	r2, #0
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
  // ADC1: Rank 1 - Channel0, Rank 2 - Channel1, Rank 3 - Channel2, Rank 4 - Channel3, Rank 5 - Channel8
  ADC1->SQR3 |= (0UL << 0U) | (1UL << 5U) | (2UL << 10U) | (3UL << 15U) | (8UL << 20U);
 800186c:	4b42      	ldr	r3, [pc, #264]	; (8001978 <adc_config+0x1b8>)
 800186e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001870:	4941      	ldr	r1, [pc, #260]	; (8001978 <adc_config+0x1b8>)
 8001872:	4b45      	ldr	r3, [pc, #276]	; (8001988 <adc_config+0x1c8>)
 8001874:	4313      	orrs	r3, r2
 8001876:	634b      	str	r3, [r1, #52]	; 0x34
  // ADC2: Rank 1 - Channel4, Rank 2 - Channel5, Rank 3 - Channel6, Rank 4 - Channel7, Rank 5 - Channel9
  ADC2->SQR3 |= (4UL << 0U) | (5UL << 5U) | (6UL << 10U) | (7UL << 15U) | (9UL << 20U);
 8001878:	4b40      	ldr	r3, [pc, #256]	; (800197c <adc_config+0x1bc>)
 800187a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800187c:	493f      	ldr	r1, [pc, #252]	; (800197c <adc_config+0x1bc>)
 800187e:	4b43      	ldr	r3, [pc, #268]	; (800198c <adc_config+0x1cc>)
 8001880:	4313      	orrs	r3, r2
 8001882:	634b      	str	r3, [r1, #52]	; 0x34
  // Enable scan mode
  ADC1->CR1 |= ADC_CR1_SCAN;
 8001884:	4b3c      	ldr	r3, [pc, #240]	; (8001978 <adc_config+0x1b8>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a3b      	ldr	r2, [pc, #236]	; (8001978 <adc_config+0x1b8>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188e:	6053      	str	r3, [r2, #4]
  ADC2->CR1 |= ADC_CR1_SCAN;
 8001890:	4b3a      	ldr	r3, [pc, #232]	; (800197c <adc_config+0x1bc>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a39      	ldr	r2, [pc, #228]	; (800197c <adc_config+0x1bc>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6053      	str	r3, [r2, #4]
  // Enable DMA - ADC registers
  ADC1->CR2 |= ADC_CR2_DMA;
 800189c:	4b36      	ldr	r3, [pc, #216]	; (8001978 <adc_config+0x1b8>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a35      	ldr	r2, [pc, #212]	; (8001978 <adc_config+0x1b8>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_DMA;
 80018a8:	4b34      	ldr	r3, [pc, #208]	; (800197c <adc_config+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4a33      	ldr	r2, [pc, #204]	; (800197c <adc_config+0x1bc>)
 80018ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b2:	6093      	str	r3, [r2, #8]
  // Power up ADC
  ADC1->CR2 |= ADC_CR2_ADON;
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <adc_config+0x1b8>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a2f      	ldr	r2, [pc, #188]	; (8001978 <adc_config+0x1b8>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_ADON;
 80018c0:	4b2e      	ldr	r3, [pc, #184]	; (800197c <adc_config+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4a2d      	ldr	r2, [pc, #180]	; (800197c <adc_config+0x1bc>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6093      	str	r3, [r2, #8]
  // Wait for ADC to stabilize by calibrate it
  ADC1->CR2 |= ADC_CR2_RSTCAL;
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <adc_config+0x1b8>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a29      	ldr	r2, [pc, #164]	; (8001978 <adc_config+0x1b8>)
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_RSTCAL;
 80018d8:	4b28      	ldr	r3, [pc, #160]	; (800197c <adc_config+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4a27      	ldr	r2, [pc, #156]	; (800197c <adc_config+0x1bc>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	6093      	str	r3, [r2, #8]
  while((ADC1->CR2 & ADC_CR2_RSTCAL) || (ADC2->CR2 & ADC_CR2_RSTCAL));
 80018e4:	bf00      	nop
 80018e6:	4b24      	ldr	r3, [pc, #144]	; (8001978 <adc_config+0x1b8>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f9      	bne.n	80018e6 <adc_config+0x126>
 80018f2:	4b22      	ldr	r3, [pc, #136]	; (800197c <adc_config+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f3      	bne.n	80018e6 <adc_config+0x126>
  ADC1->CR2 |= ADC_CR2_CAL;
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <adc_config+0x1b8>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <adc_config+0x1b8>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_CAL;
 800190a:	4b1c      	ldr	r3, [pc, #112]	; (800197c <adc_config+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4a1b      	ldr	r2, [pc, #108]	; (800197c <adc_config+0x1bc>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6093      	str	r3, [r2, #8]
  while((ADC1->CR2 & ADC_CR2_CAL) || (ADC2->CR2 & ADC_CR2_CAL));
 8001916:	bf00      	nop
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <adc_config+0x1b8>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f9      	bne.n	8001918 <adc_config+0x158>
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <adc_config+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f3      	bne.n	8001918 <adc_config+0x158>
  // Clear SR
  ADC1->SR = 0;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <adc_config+0x1b8>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
  ADC2->SR = 0;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <adc_config+0x1bc>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
  // Generate software start
  ADC1->CR2 |= ADC_CR2_SWSTART;
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <adc_config+0x1b8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <adc_config+0x1b8>)
 8001942:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001946:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_SWSTART;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <adc_config+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a0b      	ldr	r2, [pc, #44]	; (800197c <adc_config+0x1bc>)
 800194e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001952:	6093      	str	r3, [r2, #8]
  ADC1->CR2 |= ADC_CR2_ADON;
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <adc_config+0x1b8>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <adc_config+0x1b8>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_ADON;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <adc_config+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a05      	ldr	r2, [pc, #20]	; (800197c <adc_config+0x1bc>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6093      	str	r3, [r2, #8]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	40012400 	.word	0x40012400
 800197c:	40012800 	.word	0x40012800
 8001980:	07000fff 	.word	0x07000fff
 8001984:	38fff000 	.word	0x38fff000
 8001988:	00818820 	.word	0x00818820
 800198c:	009398a4 	.word	0x009398a4

08001990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0b      	blt.n	80019ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4906      	ldr	r1, [pc, #24]	; (80019c4 <__NVIC_EnableIRQ+0x34>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2001      	movs	r0, #1
 80019b2:	fa00 f202 	lsl.w	r2, r0, r2
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0c      	blt.n	80019f4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <__NVIC_ClearPendingIRQ+0x38>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	3360      	adds	r3, #96	; 0x60
 80019f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <dma_config>:

/**
 * @brief DMA configuration
 */
void dma_config()
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  // DMA1 - Channel1
  // Enable DMA1 clock
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8001a5c:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <dma_config+0xd0>)
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	4a31      	ldr	r2, [pc, #196]	; (8001b28 <dma_config+0xd0>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6153      	str	r3, [r2, #20]
  // Clear DMA1 - Channel1 status flags
  DMA1->IFCR |= 0xFUL;
 8001a68:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <dma_config+0xd4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a2f      	ldr	r2, [pc, #188]	; (8001b2c <dma_config+0xd4>)
 8001a6e:	f043 030f 	orr.w	r3, r3, #15
 8001a72:	6053      	str	r3, [r2, #4]
  // Peripherals address (src)
  DMA1_Channel1->CPAR = (uint32_t)(&(ADC1->DR));
 8001a74:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <dma_config+0xd8>)
 8001a76:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <dma_config+0xdc>)
 8001a78:	609a      	str	r2, [r3, #8]
  // Memory address (dst)
  DMA1_Channel1->CMAR = (uint32_t)adcValue;
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <dma_config+0xd8>)
 8001a7c:	4a2e      	ldr	r2, [pc, #184]	; (8001b38 <dma_config+0xe0>)
 8001a7e:	60da      	str	r2, [r3, #12]
  // Number of transfer
  DMA1_Channel1->CNDTR = 5UL;
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <dma_config+0xd8>)
 8001a82:	2205      	movs	r2, #5
 8001a84:	605a      	str	r2, [r3, #4]
  // Disable M2M mode
  DMA1_Channel1->CCR &= ~(DMA_CCR_MEM2MEM);
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <dma_config+0xd8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a29      	ldr	r2, [pc, #164]	; (8001b30 <dma_config+0xd8>)
 8001a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a90:	6013      	str	r3, [r2, #0]
  // Set channel priority low
  DMA1_Channel1->CCR &= ~(DMA_CCR_PL);
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <dma_config+0xd8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a26      	ldr	r2, [pc, #152]	; (8001b30 <dma_config+0xd8>)
 8001a98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a9c:	6013      	str	r3, [r2, #0]
  // Circular/normal mode
  DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <dma_config+0xd8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <dma_config+0xd8>)
 8001aa4:	f043 0320 	orr.w	r3, r3, #32
 8001aa8:	6013      	str	r3, [r2, #0]
  // Enable memory increment
  DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <dma_config+0xd8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <dma_config+0xd8>)
 8001ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab4:	6013      	str	r3, [r2, #0]
  // Disable peripheral increment
  DMA1_Channel1->CCR &= ~(DMA_CCR_PINC);
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <dma_config+0xd8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <dma_config+0xd8>)
 8001abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ac0:	6013      	str	r3, [r2, #0]
  // Peripherals 32-bit
  DMA1_Channel1->CCR &= ~(DMA_CCR_PSIZE);
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <dma_config+0xd8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1a      	ldr	r2, [pc, #104]	; (8001b30 <dma_config+0xd8>)
 8001ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001acc:	6013      	str	r3, [r2, #0]
  DMA1_Channel1->CCR |= DMA_CCR_PSIZE_1;
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <dma_config+0xd8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <dma_config+0xd8>)
 8001ad4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad8:	6013      	str	r3, [r2, #0]
  // Memory 32-bit
  DMA1_Channel1->CCR &= ~(DMA_CCR_MSIZE);
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <dma_config+0xd8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <dma_config+0xd8>)
 8001ae0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ae4:	6013      	str	r3, [r2, #0]
  DMA1_Channel1->CCR |= DMA_CCR_MSIZE_1;
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <dma_config+0xd8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <dma_config+0xd8>)
 8001aec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001af0:	6013      	str	r3, [r2, #0]
  // Direction = src -> dst
  DMA1_Channel1->CCR &= ~(DMA_CCR_DIR);
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <dma_config+0xd8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <dma_config+0xd8>)
 8001af8:	f023 0310 	bic.w	r3, r3, #16
 8001afc:	6013      	str	r3, [r2, #0]
  // Enable DMA
  DMA1_Channel1->CCR |= DMA_CCR_EN;
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <dma_config+0xd8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <dma_config+0xd8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6013      	str	r3, [r2, #0]
  // Enable transfer complete interrupt of DMA
  DMA1_Channel1->CCR |= DMA_CCR_TCIE;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <dma_config+0xd8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <dma_config+0xd8>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6013      	str	r3, [r2, #0]

  // NVIC configuration
  NVIC_SetPriority(DMA1_Channel1_IRQn, 1);
 8001b16:	2101      	movs	r1, #1
 8001b18:	200b      	movs	r0, #11
 8001b1a:	f7ff ff73 	bl	8001a04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b1e:	200b      	movs	r0, #11
 8001b20:	f7ff ff36 	bl	8001990 <__NVIC_EnableIRQ>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020008 	.word	0x40020008
 8001b34:	4001244c 	.word	0x4001244c
 8001b38:	2000028c 	.word	0x2000028c

08001b3c <DMA1_Channel1_IRQHandler>:

// DMA transfer complete interrupt
void DMA1_Channel1_IRQHandler()
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  if(DMA1->ISR & DMA_ISR_TCIF1)
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <DMA1_Channel1_IRQHandler+0x94>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d03f      	beq.n	8001bcc <DMA1_Channel1_IRQHandler+0x90>
  {
    // Clear flags
    NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 8001b4c:	200b      	movs	r0, #11
 8001b4e:	f7ff ff3b 	bl	80019c8 <__NVIC_ClearPendingIRQ>
    DMA1->IFCR |= DMA_IFCR_CTCIF1;
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <DMA1_Channel1_IRQHandler+0x94>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <DMA1_Channel1_IRQHandler+0x94>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6053      	str	r3, [r2, #4]
    // Get and sort analog value
    sensorValue[9] =  adcValue[0] & 0x0000FFFF;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <DMA1_Channel1_IRQHandler+0x98>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <DMA1_Channel1_IRQHandler+0x9c>)
 8001b66:	825a      	strh	r2, [r3, #18]
    sensorValue[8] = (adcValue[0] & 0xFFFF0000) >> 16;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <DMA1_Channel1_IRQHandler+0x98>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <DMA1_Channel1_IRQHandler+0x9c>)
 8001b72:	821a      	strh	r2, [r3, #16]
    sensorValue[6] =  adcValue[1] & 0x0000FFFF;
 8001b74:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <DMA1_Channel1_IRQHandler+0x98>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <DMA1_Channel1_IRQHandler+0x9c>)
 8001b7c:	819a      	strh	r2, [r3, #12]
    sensorValue[3] = (adcValue[1] & 0xFFFF0000) >> 16;
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <DMA1_Channel1_IRQHandler+0x98>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	0c1b      	lsrs	r3, r3, #16
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <DMA1_Channel1_IRQHandler+0x9c>)
 8001b88:	80da      	strh	r2, [r3, #6]
    sensorValue[5] =  adcValue[2] & 0x0000FFFF;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <DMA1_Channel1_IRQHandler+0x98>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <DMA1_Channel1_IRQHandler+0x9c>)
 8001b92:	815a      	strh	r2, [r3, #10]
    sensorValue[7] = (adcValue[2] & 0xFFFF0000) >> 16;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <DMA1_Channel1_IRQHandler+0x98>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	0c1b      	lsrs	r3, r3, #16
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <DMA1_Channel1_IRQHandler+0x9c>)
 8001b9e:	81da      	strh	r2, [r3, #14]
    sensorValue[4] =  adcValue[3] & 0x0000FFFF;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <DMA1_Channel1_IRQHandler+0x98>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <DMA1_Channel1_IRQHandler+0x9c>)
 8001ba8:	811a      	strh	r2, [r3, #8]
    sensorValue[2] = (adcValue[3] & 0xFFFF0000) >> 16;
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <DMA1_Channel1_IRQHandler+0x98>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	0c1b      	lsrs	r3, r3, #16
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <DMA1_Channel1_IRQHandler+0x9c>)
 8001bb4:	809a      	strh	r2, [r3, #4]
    sensorValue[0] =  adcValue[4] & 0x0000FFFF;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <DMA1_Channel1_IRQHandler+0x98>)
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <DMA1_Channel1_IRQHandler+0x9c>)
 8001bbe:	801a      	strh	r2, [r3, #0]
    sensorValue[1] = (adcValue[4] & 0xFFFF0000) >> 16;
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <DMA1_Channel1_IRQHandler+0x98>)
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <DMA1_Channel1_IRQHandler+0x9c>)
 8001bca:	805a      	strh	r2, [r3, #2]
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	2000028c 	.word	0x2000028c
 8001bd8:	2000026c 	.word	0x2000026c

08001bdc <__NVIC_EnableIRQ>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db0b      	blt.n	8001c06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 021f 	and.w	r2, r3, #31
 8001bf4:	4906      	ldr	r1, [pc, #24]	; (8001c10 <__NVIC_EnableIRQ+0x34>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_ClearPendingIRQ>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0c      	blt.n	8001c40 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <__NVIC_ClearPendingIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	3360      	adds	r3, #96	; 0x60
 8001c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <exti_config>:

/**
 * @brief Push button EXTI configuration
 */
void exti_config()
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  // PB2, PB11 maps to EXTI2, EXTI11
  AFIO->EXTICR[0] &= ~(AFIO_EXTICR1_EXTI2);
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <exti_config+0x84>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a1e      	ldr	r2, [pc, #120]	; (8001d28 <exti_config+0x84>)
 8001cae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cb2:	6093      	str	r3, [r2, #8]
  AFIO->EXTICR[0] |=  (AFIO_EXTICR1_EXTI2_PB);
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <exti_config+0x84>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <exti_config+0x84>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbe:	6093      	str	r3, [r2, #8]
  AFIO->EXTICR[2] &= ~(AFIO_EXTICR3_EXTI11);
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <exti_config+0x84>)
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <exti_config+0x84>)
 8001cc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001cca:	6113      	str	r3, [r2, #16]
  AFIO->EXTICR[2] |=  (AFIO_EXTICR3_EXTI11_PB);
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <exti_config+0x84>)
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <exti_config+0x84>)
 8001cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd6:	6113      	str	r3, [r2, #16]
  // Unblock EXTI2, EXTI11 interrupt
  EXTI->IMR |= EXTI_IMR_IM2 | EXTI_IMR_IM11;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <exti_config+0x88>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <exti_config+0x88>)
 8001cde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6013      	str	r3, [r2, #0]
  // Enable falling edge only
  EXTI->RTSR &= ~(EXTI_RTSR_RT2 | EXTI_RTSR_RT11);
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <exti_config+0x88>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <exti_config+0x88>)
 8001cee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cf2:	f023 0304 	bic.w	r3, r3, #4
 8001cf6:	6093      	str	r3, [r2, #8]
  EXTI->FTSR |= EXTI_FTSR_FT2 | EXTI_FTSR_FT11;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <exti_config+0x88>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <exti_config+0x88>)
 8001cfe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	60d3      	str	r3, [r2, #12]

  NVIC_SetPriority(EXTI2_IRQn, 5);
 8001d08:	2105      	movs	r1, #5
 8001d0a:	2008      	movs	r0, #8
 8001d0c:	f7ff ffa0 	bl	8001c50 <__NVIC_SetPriority>
  NVIC_SetPriority(EXTI15_10_IRQn, 5);
 8001d10:	2105      	movs	r1, #5
 8001d12:	2028      	movs	r0, #40	; 0x28
 8001d14:	f7ff ff9c 	bl	8001c50 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8001d18:	2008      	movs	r0, #8
 8001d1a:	f7ff ff5f 	bl	8001bdc <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d1e:	2028      	movs	r0, #40	; 0x28
 8001d20:	f7ff ff5c 	bl	8001bdc <__NVIC_EnableIRQ>
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40010000 	.word	0x40010000
 8001d2c:	40010400 	.word	0x40010400

08001d30 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8001d34:	2008      	movs	r0, #8
 8001d36:	f7ff ff6d 	bl	8001c14 <__NVIC_ClearPendingIRQ>
  if(EXTI->PR & EXTI_PR_PR2)
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <EXTI2_IRQHandler+0x38>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <EXTI2_IRQHandler+0x22>
  {
    EXTI->PR |= EXTI_PR_PR2;
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <EXTI2_IRQHandler+0x38>)
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <EXTI2_IRQHandler+0x38>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	6153      	str	r3, [r2, #20]
  }
  // Mask EXTI2 to avoid button debounce
  EXTI->IMR &= ~(EXTI_IMR_IM2);
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <EXTI2_IRQHandler+0x38>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <EXTI2_IRQHandler+0x38>)
 8001d58:	f023 0304 	bic.w	r3, r3, #4
 8001d5c:	6013      	str	r3, [r2, #0]
  // Application
  exti2Flag = true;
 8001d5e:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <EXTI2_IRQHandler+0x3c>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40010400 	.word	0x40010400
 8001d6c:	20000208 	.word	0x20000208

08001d70 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8001d74:	2028      	movs	r0, #40	; 0x28
 8001d76:	f7ff ff4d 	bl	8001c14 <__NVIC_ClearPendingIRQ>
  if(EXTI->PR & EXTI_PR_PR11)
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <EXTI15_10_IRQHandler+0x38>)
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <EXTI15_10_IRQHandler+0x22>
  {
    EXTI->PR |= EXTI_PR_PR11;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <EXTI15_10_IRQHandler+0x38>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <EXTI15_10_IRQHandler+0x38>)
 8001d8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d90:	6153      	str	r3, [r2, #20]
  }
  // Mask EXTI11 to avoid button debounce
  EXTI->IMR &= ~(EXTI_IMR_IM11);
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <EXTI15_10_IRQHandler+0x38>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <EXTI15_10_IRQHandler+0x38>)
 8001d98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d9c:	6013      	str	r3, [r2, #0]
  // Application
  exti11Flag = true;
 8001d9e:	4b03      	ldr	r3, [pc, #12]	; (8001dac <EXTI15_10_IRQHandler+0x3c>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40010400 	.word	0x40010400
 8001dac:	20000209 	.word	0x20000209

08001db0 <flash_read16>:

/**
 * @brief Read-16bits
 */
void flash_read16(uint32_t addr, uint16_t *pBuf, uint32_t len)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  // Loop
  for(uint32_t i = 0; i < len; i++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e00d      	b.n	8001dde <flash_read16+0x2e>
  {
    pBuf[i] = *(__IO uint16_t *)addr;
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	440b      	add	r3, r1
 8001dcc:	8812      	ldrh	r2, [r2, #0]
 8001dce:	b292      	uxth	r2, r2
 8001dd0:	801a      	strh	r2, [r3, #0]
    addr += 2;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	60fb      	str	r3, [r7, #12]
  for(uint32_t i = 0; i < len; i++)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d3ed      	bcc.n	8001dc2 <flash_read16+0x12>
  }
}
 8001de6:	bf00      	nop
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
	...

08001df4 <gpio_config>:

/**
 * @brief GPIO configuration
 */
void gpio_config()
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  // Enable clocks
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <gpio_config+0x48>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <gpio_config+0x48>)
 8001dfe:	f043 031d 	orr.w	r3, r3, #29
 8001e02:	6193      	str	r3, [r2, #24]
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <gpio_config+0x48>)
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <gpio_config+0x48>)
 8001e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	61d3      	str	r3, [r2, #28]
  // Remap
  AFIO->MAPR = 0x07000102UL;
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <gpio_config+0x4c>)
 8001e12:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <gpio_config+0x50>)
 8001e14:	605a      	str	r2, [r3, #4]


  GPIOA->CRL = 0x00000000;
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <gpio_config+0x54>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
  GPIOA->CRH = 0xA8822222;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <gpio_config+0x54>)
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <gpio_config+0x58>)
 8001e20:	605a      	str	r2, [r3, #4]
  GPIOB->CRL = 0xAA44A400;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <gpio_config+0x5c>)
 8001e24:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <gpio_config+0x60>)
 8001e26:	601a      	str	r2, [r3, #0]
  GPIOB->CRH = 0x222242DD;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <gpio_config+0x5c>)
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <gpio_config+0x64>)
 8001e2c:	605a      	str	r2, [r3, #4]
  GPIOC->CRH = 0x44244444;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <gpio_config+0x68>)
 8001e30:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <gpio_config+0x6c>)
 8001e32:	605a      	str	r2, [r3, #4]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010000 	.word	0x40010000
 8001e44:	07000102 	.word	0x07000102
 8001e48:	40010800 	.word	0x40010800
 8001e4c:	a8822222 	.word	0xa8822222
 8001e50:	40010c00 	.word	0x40010c00
 8001e54:	aa44a400 	.word	0xaa44a400
 8001e58:	222242dd 	.word	0x222242dd
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	44244444 	.word	0x44244444

08001e64 <i2c_config>:

/**
 * @brief I2C peripherals configuration
 */
void i2c_config()
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  // Enable I2C1 clock
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <i2c_config+0x60>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <i2c_config+0x60>)
 8001e6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e72:	61d3      	str	r3, [r2, #28]
  // Reset software
  I2C1->CR1 |= I2C_CR1_SWRST;
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <i2c_config+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a13      	ldr	r2, [pc, #76]	; (8001ec8 <i2c_config+0x64>)
 8001e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e7e:	6013      	str	r3, [r2, #0]
  I2C1->CR1 &= ~(I2C_CR1_SWRST);
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <i2c_config+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <i2c_config+0x64>)
 8001e86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e8a:	6013      	str	r3, [r2, #0]
  // Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
  I2C1->CR2 &= ~(I2C_CR2_FREQ);
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <i2c_config+0x64>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <i2c_config+0x64>)
 8001e92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e96:	6053      	str	r3, [r2, #4]
  I2C1->CR2 |= (32U << 0U);
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <i2c_config+0x64>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <i2c_config+0x64>)
 8001e9e:	f043 0320 	orr.w	r3, r3, #32
 8001ea2:	6053      	str	r3, [r2, #4]
  // Configure the clock control registers for 100kHz speed
  I2C1->CCR = 160U;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <i2c_config+0x64>)
 8001ea6:	22a0      	movs	r2, #160	; 0xa0
 8001ea8:	61da      	str	r2, [r3, #28]
  // Configure the rise time register
  I2C1->TRISE = 32 + 1;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <i2c_config+0x64>)
 8001eac:	2221      	movs	r2, #33	; 0x21
 8001eae:	621a      	str	r2, [r3, #32]
  // Program the I2C_CR1 register to enable the peripheral
  I2C1->CR1 |= I2C_CR1_PE;
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <i2c_config+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <i2c_config+0x64>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40005400 	.word	0x40005400

08001ecc <i2c_I2C1_masterTransmit>:

/**
 * @brief I2C master transmit
 */
bool i2c_I2C1_masterTransmit(uint8_t addrs, uint8_t *pData, uint8_t len, uint32_t timeout)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	4613      	mov	r3, r2
 8001edc:	73bb      	strb	r3, [r7, #14]
  uint32_t startTick = tim_msGetTick();
 8001ede:	f000 f9b5 	bl	800224c <tim_msGetTick>
 8001ee2:	61b8      	str	r0, [r7, #24]
  // Wait for busy
  while(I2C1->SR2 & I2C_SR2_BUSY)
 8001ee4:	e009      	b.n	8001efa <i2c_I2C1_masterTransmit+0x2e>
  {
    if(tim_msGetTick() - startTick >= timeout)
 8001ee6:	f000 f9b1 	bl	800224c <tim_msGetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d801      	bhi.n	8001efa <i2c_I2C1_masterTransmit+0x2e>
    {
      return false;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e07d      	b.n	8001ff6 <i2c_I2C1_masterTransmit+0x12a>
  while(I2C1->SR2 & I2C_SR2_BUSY)
 8001efa:	4b41      	ldr	r3, [pc, #260]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ef      	bne.n	8001ee6 <i2c_I2C1_masterTransmit+0x1a>
    }
  }
  // Send start condition
  I2C1->CR1 &= ~(I2C_CR1_POS);
 8001f06:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a3d      	ldr	r2, [pc, #244]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f10:	6013      	str	r3, [r2, #0]
  I2C1->CR1 |= I2C_CR1_START;
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a3a      	ldr	r2, [pc, #232]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1c:	6013      	str	r3, [r2, #0]
  // Clear SB bit
  while(!(I2C1->SR1 & I2C_SR1_SB))
 8001f1e:	e009      	b.n	8001f34 <i2c_I2C1_masterTransmit+0x68>
  {
    if(tim_msGetTick() - startTick >= timeout)
 8001f20:	f000 f994 	bl	800224c <tim_msGetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d801      	bhi.n	8001f34 <i2c_I2C1_masterTransmit+0x68>
    {
      return false;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e060      	b.n	8001ff6 <i2c_I2C1_masterTransmit+0x12a>
  while(!(I2C1->SR1 & I2C_SR1_SB))
 8001f34:	4b32      	ldr	r3, [pc, #200]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ef      	beq.n	8001f20 <i2c_I2C1_masterTransmit+0x54>
    }
  }
  // Send slave address
  I2C1->DR = addrs;
 8001f40:	4a2f      	ldr	r2, [pc, #188]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	6113      	str	r3, [r2, #16]
  // Wait for ACK
  while(!(I2C1->SR1 & I2C_SR1_ADDR))
 8001f46:	e009      	b.n	8001f5c <i2c_I2C1_masterTransmit+0x90>
  {
    if(tim_msGetTick() - startTick >= timeout)
 8001f48:	f000 f980 	bl	800224c <tim_msGetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d801      	bhi.n	8001f5c <i2c_I2C1_masterTransmit+0x90>
    {
      return false;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e04c      	b.n	8001ff6 <i2c_I2C1_masterTransmit+0x12a>
  while(!(I2C1->SR1 & I2C_SR1_ADDR))
 8001f5c:	4b28      	ldr	r3, [pc, #160]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ef      	beq.n	8001f48 <i2c_I2C1_masterTransmit+0x7c>
    }
  }
  // Clear ADDR bit
  __IO uint32_t tempRd = I2C1->SR1;
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	617b      	str	r3, [r7, #20]
  tempRd = I2C1->SR2;
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	617b      	str	r3, [r7, #20]
  (void)tempRd;
 8001f74:	697b      	ldr	r3, [r7, #20]
  // Send data
  uint8_t dataIdx = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	77fb      	strb	r3, [r7, #31]
  int8_t dataSize = len;
 8001f7a:	7bbb      	ldrb	r3, [r7, #14]
 8001f7c:	77bb      	strb	r3, [r7, #30]
  while(dataSize > 0)
 8001f7e:	e02f      	b.n	8001fe0 <i2c_I2C1_masterTransmit+0x114>
  {
    // Check for TX buffer empty --> send byte
    while(!(I2C1->SR1 & I2C_SR1_TXE))
    {
      if(tim_msGetTick() - startTick >= timeout)
 8001f80:	f000 f964 	bl	800224c <tim_msGetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d801      	bhi.n	8001f94 <i2c_I2C1_masterTransmit+0xc8>
      {
        return false;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e030      	b.n	8001ff6 <i2c_I2C1_masterTransmit+0x12a>
    while(!(I2C1->SR1 & I2C_SR1_TXE))
 8001f94:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0ef      	beq.n	8001f80 <i2c_I2C1_masterTransmit+0xb4>
      }
    }
    I2C1->DR = pData[dataIdx];
 8001fa0:	7ffb      	ldrb	r3, [r7, #31]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781a      	ldrb	r2, [r3, #0]
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001faa:	611a      	str	r2, [r3, #16]
    dataIdx++;
 8001fac:	7ffb      	ldrb	r3, [r7, #31]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	77fb      	strb	r3, [r7, #31]
    dataSize--;
 8001fb2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	77bb      	strb	r3, [r7, #30]
    // Wait for BTF flag
    while(!(I2C1->SR1 & I2C_SR1_BTF))
 8001fbe:	e009      	b.n	8001fd4 <i2c_I2C1_masterTransmit+0x108>
    {
      if(tim_msGetTick() - startTick >= timeout)
 8001fc0:	f000 f944 	bl	800224c <tim_msGetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d801      	bhi.n	8001fd4 <i2c_I2C1_masterTransmit+0x108>
      {
        return false;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e010      	b.n	8001ff6 <i2c_I2C1_masterTransmit+0x12a>
    while(!(I2C1->SR1 & I2C_SR1_BTF))
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ef      	beq.n	8001fc0 <i2c_I2C1_masterTransmit+0xf4>
  while(dataSize > 0)
 8001fe0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	dcd5      	bgt.n	8001f94 <i2c_I2C1_masterTransmit+0xc8>
      }
    }
  }
  // Generate stop condition
  I2C1->CR1 |= I2C_CR1_STOP;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <i2c_I2C1_masterTransmit+0x134>)
 8001fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff2:	6013      	str	r3, [r2, #0]
  return true;
 8001ff4:	2301      	movs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40005400 	.word	0x40005400

08002004 <rcc_config>:

/**
 * @brief RCC configuration
 */
void rcc_config()
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* PLL Configuration */
  // Set bitfields [21:18] -> PLL_M = 16
  RCC->CFGR |= RCC_CFGR_PLLMULL;
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <rcc_config+0xf8>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a3b      	ldr	r2, [pc, #236]	; (80020fc <rcc_config+0xf8>)
 800200e:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8002012:	6053      	str	r3, [r2, #4]
  // USB Divider
  RCC->CFGR &= ~(RCC_CFGR_USBPRE);
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <rcc_config+0xf8>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a38      	ldr	r2, [pc, #224]	; (80020fc <rcc_config+0xf8>)
 800201a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800201e:	6053      	str	r3, [r2, #4]

  /* HSI Oscillator */
  // Enable HSI Oscillator
  RCC->CR |= RCC_CR_HSION;
 8002020:	4b36      	ldr	r3, [pc, #216]	; (80020fc <rcc_config+0xf8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a35      	ldr	r2, [pc, #212]	; (80020fc <rcc_config+0xf8>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6013      	str	r3, [r2, #0]
  // Wait for it to stabilize
  while((RCC->CR & RCC_CR_HSIRDY) == 0);
 800202c:	bf00      	nop
 800202e:	4b33      	ldr	r3, [pc, #204]	; (80020fc <rcc_config+0xf8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f9      	beq.n	800202e <rcc_config+0x2a>
  // Select HSI as PLL source
  RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <rcc_config+0xf8>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4a2f      	ldr	r2, [pc, #188]	; (80020fc <rcc_config+0xf8>)
 8002040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002044:	6053      	str	r3, [r2, #4]
  // Enable PLL
  RCC->CR |= RCC_CR_PLLON;
 8002046:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <rcc_config+0xf8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a2c      	ldr	r2, [pc, #176]	; (80020fc <rcc_config+0xf8>)
 800204c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002050:	6013      	str	r3, [r2, #0]
  // Wait for PLL ready
  while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8002052:	bf00      	nop
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <rcc_config+0xf8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f9      	beq.n	8002054 <rcc_config+0x50>

  // Flash prefetch and wait state
  // Clear latency fields
  FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <rcc_config+0xfc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a26      	ldr	r2, [pc, #152]	; (8002100 <rcc_config+0xfc>)
 8002066:	f023 0307 	bic.w	r3, r3, #7
 800206a:	6013      	str	r3, [r2, #0]
  // 2 wait state for 64MHz
  FLASH->ACR |= FLASH_ACR_LATENCY_1;
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <rcc_config+0xfc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a23      	ldr	r2, [pc, #140]	; (8002100 <rcc_config+0xfc>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	6013      	str	r3, [r2, #0]
  // Enable prefetch buffer
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002078:	4b21      	ldr	r3, [pc, #132]	; (8002100 <rcc_config+0xfc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a20      	ldr	r2, [pc, #128]	; (8002100 <rcc_config+0xfc>)
 800207e:	f043 0310 	orr.w	r3, r3, #16
 8002082:	6013      	str	r3, [r2, #0]

  // Select system clock
  // Clear SW bits
  RCC->CFGR &= ~(RCC_CFGR_SW);
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <rcc_config+0xf8>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a1c      	ldr	r2, [pc, #112]	; (80020fc <rcc_config+0xf8>)
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	6053      	str	r3, [r2, #4]
  // PLL selected as system clock
  RCC->CFGR |= RCC_CFGR_SW_1;
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <rcc_config+0xf8>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <rcc_config+0xf8>)
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	6053      	str	r3, [r2, #4]
  // Wait for PLL to be the active clock source
  while((RCC->CFGR & RCC_CFGR_SWS_1) == 0);
 800209c:	bf00      	nop
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <rcc_config+0xf8>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f9      	beq.n	800209e <rcc_config+0x9a>

  // Peripherals clock setup
  // AHB Prescaler
  RCC->CFGR &= ~(RCC_CFGR_HPRE);
 80020aa:	4b14      	ldr	r3, [pc, #80]	; (80020fc <rcc_config+0xf8>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <rcc_config+0xf8>)
 80020b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020b4:	6053      	str	r3, [r2, #4]
  // APB1 Prescaler
  RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <rcc_config+0xf8>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <rcc_config+0xf8>)
 80020bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020c0:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PPRE1_2;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <rcc_config+0xf8>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <rcc_config+0xf8>)
 80020c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020cc:	6053      	str	r3, [r2, #4]
  // APB2 Prescaler
  RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <rcc_config+0xf8>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <rcc_config+0xf8>)
 80020d4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80020d8:	6053      	str	r3, [r2, #4]
  // ADC Prescaler
  RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <rcc_config+0xf8>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4a07      	ldr	r2, [pc, #28]	; (80020fc <rcc_config+0xf8>)
 80020e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020e4:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <rcc_config+0xf8>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <rcc_config+0xf8>)
 80020ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f0:	6053      	str	r3, [r2, #4]
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	40022000 	.word	0x40022000

08002104 <__NVIC_EnableIRQ>:
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db0b      	blt.n	800212e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4906      	ldr	r1, [pc, #24]	; (8002138 <__NVIC_EnableIRQ+0x34>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2001      	movs	r0, #1
 8002126:	fa00 f202 	lsl.w	r2, r0, r2
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_ClearPendingIRQ>:
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0c      	blt.n	8002168 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4907      	ldr	r1, [pc, #28]	; (8002174 <__NVIC_ClearPendingIRQ+0x38>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	3360      	adds	r3, #96	; 0x60
 8002164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <tim_TIM3_initTicks>:

/**
 * @brief TIM3 - Time Base ticks/delay
 */
void tim_TIM3_initTicks(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  // Enable TIM3
  RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80021d0:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <tim_TIM3_initTicks+0x78>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <tim_TIM3_initTicks+0x78>)
 80021d6:	f043 0302 	orr.w	r3, r3, #2
 80021da:	61d3      	str	r3, [r2, #28]
  // Count up mode
  TIM3->CR1 &= ~(TIM_CR1_DIR);
 80021dc:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 80021e2:	f023 0310 	bic.w	r3, r3, #16
 80021e6:	6013      	str	r3, [r2, #0]
  // Periodic
  TIM3->CR1 &= ~(TIM_CR1_OPM);
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a16      	ldr	r2, [pc, #88]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 80021ee:	f023 0308 	bic.w	r3, r3, #8
 80021f2:	6013      	str	r3, [r2, #0]
  // Mode: RESET
  TIM3->CR2 &= ~(TIM_CR2_MMS);
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a13      	ldr	r2, [pc, #76]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 80021fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fe:	6053      	str	r3, [r2, #4]
  // Prescaler
  TIM3->PSC = 64 - 1;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 8002202:	223f      	movs	r2, #63	; 0x3f
 8002204:	629a      	str	r2, [r3, #40]	; 0x28
  // Period
  TIM3->ARR = 1000 - 1; // 1KHz
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 8002208:	f240 32e7 	movw	r2, #999	; 0x3e7
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c

  // Clear update interrupt
  TIM3->SR &= ~(TIM_SR_UIF);
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6113      	str	r3, [r2, #16]
  // Enable update interrupt
  TIM3->DIER |= TIM_DIER_UIE;
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	60d3      	str	r3, [r2, #12]
  // Enable NVIC
  NVIC_SetPriority(TIM3_IRQn, 5);
 8002226:	2105      	movs	r1, #5
 8002228:	201d      	movs	r0, #29
 800222a:	f7ff ffa5 	bl	8002178 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800222e:	201d      	movs	r0, #29
 8002230:	f7ff ff68 	bl	8002104 <__NVIC_EnableIRQ>
  // Start TIM3
  TIM3->CR1 |= TIM_CR1_CEN;
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a03      	ldr	r2, [pc, #12]	; (8002248 <tim_TIM3_initTicks+0x7c>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6013      	str	r3, [r2, #0]
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	40000400 	.word	0x40000400

0800224c <tim_msGetTick>:

/**
 * @brief Get milliseconds
 */
uint32_t tim_msGetTick()
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return msTick;
 8002250:	4b02      	ldr	r3, [pc, #8]	; (800225c <tim_msGetTick+0x10>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	2000020c 	.word	0x2000020c

08002260 <tim_msDelay>:

/**
 * @brief Milliseconds delay function
 */
void tim_msDelay(uint32_t milliseconds)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t startTick = tim_msGetTick();
 8002268:	f7ff fff0 	bl	800224c <tim_msGetTick>
 800226c:	60f8      	str	r0, [r7, #12]
  while(tim_msGetTick() - startTick < milliseconds);
 800226e:	bf00      	nop
 8002270:	f7ff ffec 	bl	800224c <tim_msGetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d8f7      	bhi.n	8002270 <tim_msDelay+0x10>
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <tim_PWM_config>:

/**
 * @brief TIM2 & TIM4 PWM configuration
 */
void tim_PWM_config()
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  // Enable TIM2 and TIM4
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM4EN;
 8002290:	4b63      	ldr	r3, [pc, #396]	; (8002420 <tim_PWM_config+0x194>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	4a62      	ldr	r2, [pc, #392]	; (8002420 <tim_PWM_config+0x194>)
 8002296:	f043 0305 	orr.w	r3, r3, #5
 800229a:	61d3      	str	r3, [r2, #28]
  // Count up mode
  TIM2->CR1 &= ~(TIM_CR1_DIR);
 800229c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022a6:	f023 0310 	bic.w	r3, r3, #16
 80022aa:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~(TIM_CR1_DIR);
 80022ac:	4b5d      	ldr	r3, [pc, #372]	; (8002424 <tim_PWM_config+0x198>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a5c      	ldr	r2, [pc, #368]	; (8002424 <tim_PWM_config+0x198>)
 80022b2:	f023 0310 	bic.w	r3, r3, #16
 80022b6:	6013      	str	r3, [r2, #0]
  // Periodic
  TIM2->CR1 &= ~(TIM_CR1_OPM);
 80022b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c2:	f023 0308 	bic.w	r3, r3, #8
 80022c6:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~(TIM_CR1_OPM);
 80022c8:	4b56      	ldr	r3, [pc, #344]	; (8002424 <tim_PWM_config+0x198>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a55      	ldr	r2, [pc, #340]	; (8002424 <tim_PWM_config+0x198>)
 80022ce:	f023 0308 	bic.w	r3, r3, #8
 80022d2:	6013      	str	r3, [r2, #0]
  // Mode: RESET
  TIM2->CR2 &= ~(TIM_CR2_MMS);
 80022d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e2:	6053      	str	r3, [r2, #4]
  TIM4->CR2 &= ~(TIM_CR2_MMS);
 80022e4:	4b4f      	ldr	r3, [pc, #316]	; (8002424 <tim_PWM_config+0x198>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4a4e      	ldr	r2, [pc, #312]	; (8002424 <tim_PWM_config+0x198>)
 80022ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ee:	6053      	str	r3, [r2, #4]
  // Prescaler
  TIM2->PSC = 0U;
 80022f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022f4:	2200      	movs	r2, #0
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
  TIM4->PSC = 0U;
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <tim_PWM_config+0x198>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	629a      	str	r2, [r3, #40]	; 0x28
  // Period
  TIM2->ARR = 6399U; // 10KHz
 80022fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002302:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM4->ARR = 6399U; //
 8002308:	4b46      	ldr	r3, [pc, #280]	; (8002424 <tim_PWM_config+0x198>)
 800230a:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c
  // Clear update interrupt
  TIM2->SR &= ~(TIM_SR_UIF);
 8002310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	6113      	str	r3, [r2, #16]
  TIM4->SR &= ~(TIM_SR_UIF);
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <tim_PWM_config+0x198>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	4a3f      	ldr	r2, [pc, #252]	; (8002424 <tim_PWM_config+0x198>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6113      	str	r3, [r2, #16]

  /* PWM: TIM2_CH1, TIM2_CH2, TIM4_CH1, TIM4_CH2 */
  // Disable OC
  TIM2->CCER = 0;
 800232c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
  TIM4->CCER = 0;
 8002334:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <tim_PWM_config+0x198>)
 8002336:	2200      	movs	r2, #0
 8002338:	621a      	str	r2, [r3, #32]
  // Set mode to output
  TIM2->CCMR1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800233a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002348:	f023 0303 	bic.w	r3, r3, #3
 800234c:	6193      	str	r3, [r2, #24]
  TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800234e:	4b35      	ldr	r3, [pc, #212]	; (8002424 <tim_PWM_config+0x198>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	4a34      	ldr	r2, [pc, #208]	; (8002424 <tim_PWM_config+0x198>)
 8002354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002358:	f023 0303 	bic.w	r3, r3, #3
 800235c:	6193      	str	r3, [r2, #24]
  // PWM mode 1
  TIM2->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 800235e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800236c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002370:	6193      	str	r3, [r2, #24]
  TIM4->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 8002372:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <tim_PWM_config+0x198>)
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <tim_PWM_config+0x198>)
 8002378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800237c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002380:	6193      	str	r3, [r2, #24]
  TIM2->CCMR1 |= (0x6UL << 4U) | (0x6UL << 12U);
 8002382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800238c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8002390:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002394:	6193      	str	r3, [r2, #24]
  TIM4->CCMR1 |= (0x6UL << 4U) | (0x6UL << 12U);
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <tim_PWM_config+0x198>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	4a22      	ldr	r2, [pc, #136]	; (8002424 <tim_PWM_config+0x198>)
 800239c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80023a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023a4:	6193      	str	r3, [r2, #24]
  // Polarity
  TIM2->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80023a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023b0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80023b4:	6213      	str	r3, [r2, #32]
  TIM4->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <tim_PWM_config+0x198>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <tim_PWM_config+0x198>)
 80023bc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80023c0:	6213      	str	r3, [r2, #32]
  // Set pulse width - duty cycles
  TIM2->CCR1 = 0;
 80023c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023c6:	2200      	movs	r2, #0
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 0;
 80023ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ce:	2200      	movs	r2, #0
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR1 = 0;
 80023d2:	4b14      	ldr	r3, [pc, #80]	; (8002424 <tim_PWM_config+0x198>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 0;
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <tim_PWM_config+0x198>)
 80023da:	2200      	movs	r2, #0
 80023dc:	639a      	str	r2, [r3, #56]	; 0x38
  // Enable channels
  TIM2->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 80023de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023e8:	f043 0311 	orr.w	r3, r3, #17
 80023ec:	6213      	str	r3, [r2, #32]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <tim_PWM_config+0x198>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <tim_PWM_config+0x198>)
 80023f4:	f043 0311 	orr.w	r3, r3, #17
 80023f8:	6213      	str	r3, [r2, #32]
  // Start TIM2 and TIM4
  TIM2->CR1 |= TIM_CR1_CEN;
 80023fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6013      	str	r3, [r2, #0]
  TIM4->CR1 |= TIM_CR1_CEN;
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <tim_PWM_config+0x198>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a05      	ldr	r2, [pc, #20]	; (8002424 <tim_PWM_config+0x198>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	40000800 	.word	0x40000800

08002428 <tim_config>:

/**
 * @brief TIM Configuration
 */
void tim_config()
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  tim_TIM3_initTicks();
 800242c:	f7ff fece 	bl	80021cc <tim_TIM3_initTicks>
  tim_PWM_config();
 8002430:	f7ff ff2c 	bl	800228c <tim_PWM_config>
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}

08002438 <TIM3_IRQHandler>:

void TIM3_IRQHandler()
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  if(TIM3->SR & TIM_SR_UIF)
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <TIM3_IRQHandler+0x30>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <TIM3_IRQHandler+0x2c>
  {
    // Clear flag
    TIM3->SR &= ~TIM_SR_UIF;
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <TIM3_IRQHandler+0x30>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <TIM3_IRQHandler+0x30>)
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	6113      	str	r3, [r2, #16]
    NVIC_ClearPendingIRQ(TIM3_IRQn);
 8002454:	201d      	movs	r0, #29
 8002456:	f7ff fe71 	bl	800213c <__NVIC_ClearPendingIRQ>
    // Increase tick
    msTick++;
 800245a:	4b04      	ldr	r3, [pc, #16]	; (800246c <TIM3_IRQHandler+0x34>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	4a02      	ldr	r2, [pc, #8]	; (800246c <TIM3_IRQHandler+0x34>)
 8002462:	6013      	str	r3, [r2, #0]
  }
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40000400 	.word	0x40000400
 800246c:	2000020c 	.word	0x2000020c

08002470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002470:	480c      	ldr	r0, [pc, #48]	; (80024a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002472:	490d      	ldr	r1, [pc, #52]	; (80024a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002474:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002478:	e002      	b.n	8002480 <LoopCopyDataInit>

0800247a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800247c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247e:	3304      	adds	r3, #4

08002480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002484:	d3f9      	bcc.n	800247a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002488:	4c0a      	ldr	r4, [pc, #40]	; (80024b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800248c:	e001      	b.n	8002492 <LoopFillZerobss>

0800248e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002490:	3204      	adds	r2, #4

08002492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002494:	d3fb      	bcc.n	800248e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002496:	f7ff f98d 	bl	80017b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249a:	f000 f80f 	bl	80024bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249e:	f7ff f859 	bl	8001554 <main>
  bx lr
 80024a2:	4770      	bx	lr
  ldr r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a8:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80024ac:	08005364 	.word	0x08005364
  ldr r2, =_sbss
 80024b0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80024b4:	200002b4 	.word	0x200002b4

080024b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b8:	e7fe      	b.n	80024b8 <ADC1_2_IRQHandler>
	...

080024bc <__libc_init_array>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	2600      	movs	r6, #0
 80024c0:	4d0c      	ldr	r5, [pc, #48]	; (80024f4 <__libc_init_array+0x38>)
 80024c2:	4c0d      	ldr	r4, [pc, #52]	; (80024f8 <__libc_init_array+0x3c>)
 80024c4:	1b64      	subs	r4, r4, r5
 80024c6:	10a4      	asrs	r4, r4, #2
 80024c8:	42a6      	cmp	r6, r4
 80024ca:	d109      	bne.n	80024e0 <__libc_init_array+0x24>
 80024cc:	f002 fd46 	bl	8004f5c <_init>
 80024d0:	2600      	movs	r6, #0
 80024d2:	4d0a      	ldr	r5, [pc, #40]	; (80024fc <__libc_init_array+0x40>)
 80024d4:	4c0a      	ldr	r4, [pc, #40]	; (8002500 <__libc_init_array+0x44>)
 80024d6:	1b64      	subs	r4, r4, r5
 80024d8:	10a4      	asrs	r4, r4, #2
 80024da:	42a6      	cmp	r6, r4
 80024dc:	d105      	bne.n	80024ea <__libc_init_array+0x2e>
 80024de:	bd70      	pop	{r4, r5, r6, pc}
 80024e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e4:	4798      	blx	r3
 80024e6:	3601      	adds	r6, #1
 80024e8:	e7ee      	b.n	80024c8 <__libc_init_array+0xc>
 80024ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ee:	4798      	blx	r3
 80024f0:	3601      	adds	r6, #1
 80024f2:	e7f2      	b.n	80024da <__libc_init_array+0x1e>
 80024f4:	0800535c 	.word	0x0800535c
 80024f8:	0800535c 	.word	0x0800535c
 80024fc:	0800535c 	.word	0x0800535c
 8002500:	08005360 	.word	0x08005360

08002504 <memset>:
 8002504:	4603      	mov	r3, r0
 8002506:	4402      	add	r2, r0
 8002508:	4293      	cmp	r3, r2
 800250a:	d100      	bne.n	800250e <memset+0xa>
 800250c:	4770      	bx	lr
 800250e:	f803 1b01 	strb.w	r1, [r3], #1
 8002512:	e7f9      	b.n	8002508 <memset+0x4>

08002514 <__cvt>:
 8002514:	2b00      	cmp	r3, #0
 8002516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800251a:	461f      	mov	r7, r3
 800251c:	bfbb      	ittet	lt
 800251e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002522:	461f      	movlt	r7, r3
 8002524:	2300      	movge	r3, #0
 8002526:	232d      	movlt	r3, #45	; 0x2d
 8002528:	b088      	sub	sp, #32
 800252a:	4614      	mov	r4, r2
 800252c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800252e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002530:	7013      	strb	r3, [r2, #0]
 8002532:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002534:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002538:	f023 0820 	bic.w	r8, r3, #32
 800253c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002540:	d005      	beq.n	800254e <__cvt+0x3a>
 8002542:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002546:	d100      	bne.n	800254a <__cvt+0x36>
 8002548:	3501      	adds	r5, #1
 800254a:	2302      	movs	r3, #2
 800254c:	e000      	b.n	8002550 <__cvt+0x3c>
 800254e:	2303      	movs	r3, #3
 8002550:	aa07      	add	r2, sp, #28
 8002552:	9204      	str	r2, [sp, #16]
 8002554:	aa06      	add	r2, sp, #24
 8002556:	e9cd a202 	strd	sl, r2, [sp, #8]
 800255a:	e9cd 3500 	strd	r3, r5, [sp]
 800255e:	4622      	mov	r2, r4
 8002560:	463b      	mov	r3, r7
 8002562:	f000 fcc5 	bl	8002ef0 <_dtoa_r>
 8002566:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800256a:	4606      	mov	r6, r0
 800256c:	d102      	bne.n	8002574 <__cvt+0x60>
 800256e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002570:	07db      	lsls	r3, r3, #31
 8002572:	d522      	bpl.n	80025ba <__cvt+0xa6>
 8002574:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002578:	eb06 0905 	add.w	r9, r6, r5
 800257c:	d110      	bne.n	80025a0 <__cvt+0x8c>
 800257e:	7833      	ldrb	r3, [r6, #0]
 8002580:	2b30      	cmp	r3, #48	; 0x30
 8002582:	d10a      	bne.n	800259a <__cvt+0x86>
 8002584:	2200      	movs	r2, #0
 8002586:	2300      	movs	r3, #0
 8002588:	4620      	mov	r0, r4
 800258a:	4639      	mov	r1, r7
 800258c:	f7fe fa0c 	bl	80009a8 <__aeabi_dcmpeq>
 8002590:	b918      	cbnz	r0, 800259a <__cvt+0x86>
 8002592:	f1c5 0501 	rsb	r5, r5, #1
 8002596:	f8ca 5000 	str.w	r5, [sl]
 800259a:	f8da 3000 	ldr.w	r3, [sl]
 800259e:	4499      	add	r9, r3
 80025a0:	2200      	movs	r2, #0
 80025a2:	2300      	movs	r3, #0
 80025a4:	4620      	mov	r0, r4
 80025a6:	4639      	mov	r1, r7
 80025a8:	f7fe f9fe 	bl	80009a8 <__aeabi_dcmpeq>
 80025ac:	b108      	cbz	r0, 80025b2 <__cvt+0x9e>
 80025ae:	f8cd 901c 	str.w	r9, [sp, #28]
 80025b2:	2230      	movs	r2, #48	; 0x30
 80025b4:	9b07      	ldr	r3, [sp, #28]
 80025b6:	454b      	cmp	r3, r9
 80025b8:	d307      	bcc.n	80025ca <__cvt+0xb6>
 80025ba:	4630      	mov	r0, r6
 80025bc:	9b07      	ldr	r3, [sp, #28]
 80025be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80025c0:	1b9b      	subs	r3, r3, r6
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	b008      	add	sp, #32
 80025c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025ca:	1c59      	adds	r1, r3, #1
 80025cc:	9107      	str	r1, [sp, #28]
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	e7f0      	b.n	80025b4 <__cvt+0xa0>

080025d2 <__exponent>:
 80025d2:	4603      	mov	r3, r0
 80025d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025d6:	2900      	cmp	r1, #0
 80025d8:	f803 2b02 	strb.w	r2, [r3], #2
 80025dc:	bfb6      	itet	lt
 80025de:	222d      	movlt	r2, #45	; 0x2d
 80025e0:	222b      	movge	r2, #43	; 0x2b
 80025e2:	4249      	neglt	r1, r1
 80025e4:	2909      	cmp	r1, #9
 80025e6:	7042      	strb	r2, [r0, #1]
 80025e8:	dd2b      	ble.n	8002642 <__exponent+0x70>
 80025ea:	f10d 0407 	add.w	r4, sp, #7
 80025ee:	46a4      	mov	ip, r4
 80025f0:	270a      	movs	r7, #10
 80025f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80025f6:	460a      	mov	r2, r1
 80025f8:	46a6      	mov	lr, r4
 80025fa:	fb07 1516 	mls	r5, r7, r6, r1
 80025fe:	2a63      	cmp	r2, #99	; 0x63
 8002600:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002604:	4631      	mov	r1, r6
 8002606:	f104 34ff 	add.w	r4, r4, #4294967295
 800260a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800260e:	dcf0      	bgt.n	80025f2 <__exponent+0x20>
 8002610:	3130      	adds	r1, #48	; 0x30
 8002612:	f1ae 0502 	sub.w	r5, lr, #2
 8002616:	f804 1c01 	strb.w	r1, [r4, #-1]
 800261a:	4629      	mov	r1, r5
 800261c:	1c44      	adds	r4, r0, #1
 800261e:	4561      	cmp	r1, ip
 8002620:	d30a      	bcc.n	8002638 <__exponent+0x66>
 8002622:	f10d 0209 	add.w	r2, sp, #9
 8002626:	eba2 020e 	sub.w	r2, r2, lr
 800262a:	4565      	cmp	r5, ip
 800262c:	bf88      	it	hi
 800262e:	2200      	movhi	r2, #0
 8002630:	4413      	add	r3, r2
 8002632:	1a18      	subs	r0, r3, r0
 8002634:	b003      	add	sp, #12
 8002636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002638:	f811 2b01 	ldrb.w	r2, [r1], #1
 800263c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002640:	e7ed      	b.n	800261e <__exponent+0x4c>
 8002642:	2330      	movs	r3, #48	; 0x30
 8002644:	3130      	adds	r1, #48	; 0x30
 8002646:	7083      	strb	r3, [r0, #2]
 8002648:	70c1      	strb	r1, [r0, #3]
 800264a:	1d03      	adds	r3, r0, #4
 800264c:	e7f1      	b.n	8002632 <__exponent+0x60>
	...

08002650 <_printf_float>:
 8002650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002654:	b091      	sub	sp, #68	; 0x44
 8002656:	460c      	mov	r4, r1
 8002658:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800265c:	4616      	mov	r6, r2
 800265e:	461f      	mov	r7, r3
 8002660:	4605      	mov	r5, r0
 8002662:	f001 fa33 	bl	8003acc <_localeconv_r>
 8002666:	6803      	ldr	r3, [r0, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	9309      	str	r3, [sp, #36]	; 0x24
 800266c:	f7fd fd70 	bl	8000150 <strlen>
 8002670:	2300      	movs	r3, #0
 8002672:	930e      	str	r3, [sp, #56]	; 0x38
 8002674:	f8d8 3000 	ldr.w	r3, [r8]
 8002678:	900a      	str	r0, [sp, #40]	; 0x28
 800267a:	3307      	adds	r3, #7
 800267c:	f023 0307 	bic.w	r3, r3, #7
 8002680:	f103 0208 	add.w	r2, r3, #8
 8002684:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002688:	f8d4 b000 	ldr.w	fp, [r4]
 800268c:	f8c8 2000 	str.w	r2, [r8]
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002698:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800269c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80026a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80026a2:	f04f 32ff 	mov.w	r2, #4294967295
 80026a6:	4640      	mov	r0, r8
 80026a8:	4b9c      	ldr	r3, [pc, #624]	; (800291c <_printf_float+0x2cc>)
 80026aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80026ac:	f7fe f9ae 	bl	8000a0c <__aeabi_dcmpun>
 80026b0:	bb70      	cbnz	r0, 8002710 <_printf_float+0xc0>
 80026b2:	f04f 32ff 	mov.w	r2, #4294967295
 80026b6:	4640      	mov	r0, r8
 80026b8:	4b98      	ldr	r3, [pc, #608]	; (800291c <_printf_float+0x2cc>)
 80026ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80026bc:	f7fe f988 	bl	80009d0 <__aeabi_dcmple>
 80026c0:	bb30      	cbnz	r0, 8002710 <_printf_float+0xc0>
 80026c2:	2200      	movs	r2, #0
 80026c4:	2300      	movs	r3, #0
 80026c6:	4640      	mov	r0, r8
 80026c8:	4651      	mov	r1, sl
 80026ca:	f7fe f977 	bl	80009bc <__aeabi_dcmplt>
 80026ce:	b110      	cbz	r0, 80026d6 <_printf_float+0x86>
 80026d0:	232d      	movs	r3, #45	; 0x2d
 80026d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026d6:	4b92      	ldr	r3, [pc, #584]	; (8002920 <_printf_float+0x2d0>)
 80026d8:	4892      	ldr	r0, [pc, #584]	; (8002924 <_printf_float+0x2d4>)
 80026da:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80026de:	bf94      	ite	ls
 80026e0:	4698      	movls	r8, r3
 80026e2:	4680      	movhi	r8, r0
 80026e4:	2303      	movs	r3, #3
 80026e6:	f04f 0a00 	mov.w	sl, #0
 80026ea:	6123      	str	r3, [r4, #16]
 80026ec:	f02b 0304 	bic.w	r3, fp, #4
 80026f0:	6023      	str	r3, [r4, #0]
 80026f2:	4633      	mov	r3, r6
 80026f4:	4621      	mov	r1, r4
 80026f6:	4628      	mov	r0, r5
 80026f8:	9700      	str	r7, [sp, #0]
 80026fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80026fc:	f000 f9d4 	bl	8002aa8 <_printf_common>
 8002700:	3001      	adds	r0, #1
 8002702:	f040 8090 	bne.w	8002826 <_printf_float+0x1d6>
 8002706:	f04f 30ff 	mov.w	r0, #4294967295
 800270a:	b011      	add	sp, #68	; 0x44
 800270c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002710:	4642      	mov	r2, r8
 8002712:	4653      	mov	r3, sl
 8002714:	4640      	mov	r0, r8
 8002716:	4651      	mov	r1, sl
 8002718:	f7fe f978 	bl	8000a0c <__aeabi_dcmpun>
 800271c:	b148      	cbz	r0, 8002732 <_printf_float+0xe2>
 800271e:	f1ba 0f00 	cmp.w	sl, #0
 8002722:	bfb8      	it	lt
 8002724:	232d      	movlt	r3, #45	; 0x2d
 8002726:	4880      	ldr	r0, [pc, #512]	; (8002928 <_printf_float+0x2d8>)
 8002728:	bfb8      	it	lt
 800272a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800272e:	4b7f      	ldr	r3, [pc, #508]	; (800292c <_printf_float+0x2dc>)
 8002730:	e7d3      	b.n	80026da <_printf_float+0x8a>
 8002732:	6863      	ldr	r3, [r4, #4]
 8002734:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	d142      	bne.n	80027c2 <_printf_float+0x172>
 800273c:	2306      	movs	r3, #6
 800273e:	6063      	str	r3, [r4, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	9206      	str	r2, [sp, #24]
 8002744:	aa0e      	add	r2, sp, #56	; 0x38
 8002746:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800274a:	aa0d      	add	r2, sp, #52	; 0x34
 800274c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002750:	9203      	str	r2, [sp, #12]
 8002752:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002756:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800275a:	6023      	str	r3, [r4, #0]
 800275c:	6863      	ldr	r3, [r4, #4]
 800275e:	4642      	mov	r2, r8
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	4628      	mov	r0, r5
 8002764:	4653      	mov	r3, sl
 8002766:	910b      	str	r1, [sp, #44]	; 0x2c
 8002768:	f7ff fed4 	bl	8002514 <__cvt>
 800276c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800276e:	4680      	mov	r8, r0
 8002770:	2947      	cmp	r1, #71	; 0x47
 8002772:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002774:	d108      	bne.n	8002788 <_printf_float+0x138>
 8002776:	1cc8      	adds	r0, r1, #3
 8002778:	db02      	blt.n	8002780 <_printf_float+0x130>
 800277a:	6863      	ldr	r3, [r4, #4]
 800277c:	4299      	cmp	r1, r3
 800277e:	dd40      	ble.n	8002802 <_printf_float+0x1b2>
 8002780:	f1a9 0902 	sub.w	r9, r9, #2
 8002784:	fa5f f989 	uxtb.w	r9, r9
 8002788:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800278c:	d81f      	bhi.n	80027ce <_printf_float+0x17e>
 800278e:	464a      	mov	r2, r9
 8002790:	3901      	subs	r1, #1
 8002792:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002796:	910d      	str	r1, [sp, #52]	; 0x34
 8002798:	f7ff ff1b 	bl	80025d2 <__exponent>
 800279c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800279e:	4682      	mov	sl, r0
 80027a0:	1813      	adds	r3, r2, r0
 80027a2:	2a01      	cmp	r2, #1
 80027a4:	6123      	str	r3, [r4, #16]
 80027a6:	dc02      	bgt.n	80027ae <_printf_float+0x15e>
 80027a8:	6822      	ldr	r2, [r4, #0]
 80027aa:	07d2      	lsls	r2, r2, #31
 80027ac:	d501      	bpl.n	80027b2 <_printf_float+0x162>
 80027ae:	3301      	adds	r3, #1
 80027b0:	6123      	str	r3, [r4, #16]
 80027b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d09b      	beq.n	80026f2 <_printf_float+0xa2>
 80027ba:	232d      	movs	r3, #45	; 0x2d
 80027bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027c0:	e797      	b.n	80026f2 <_printf_float+0xa2>
 80027c2:	2947      	cmp	r1, #71	; 0x47
 80027c4:	d1bc      	bne.n	8002740 <_printf_float+0xf0>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ba      	bne.n	8002740 <_printf_float+0xf0>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e7b7      	b.n	800273e <_printf_float+0xee>
 80027ce:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80027d2:	d118      	bne.n	8002806 <_printf_float+0x1b6>
 80027d4:	2900      	cmp	r1, #0
 80027d6:	6863      	ldr	r3, [r4, #4]
 80027d8:	dd0b      	ble.n	80027f2 <_printf_float+0x1a2>
 80027da:	6121      	str	r1, [r4, #16]
 80027dc:	b913      	cbnz	r3, 80027e4 <_printf_float+0x194>
 80027de:	6822      	ldr	r2, [r4, #0]
 80027e0:	07d0      	lsls	r0, r2, #31
 80027e2:	d502      	bpl.n	80027ea <_printf_float+0x19a>
 80027e4:	3301      	adds	r3, #1
 80027e6:	440b      	add	r3, r1
 80027e8:	6123      	str	r3, [r4, #16]
 80027ea:	f04f 0a00 	mov.w	sl, #0
 80027ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80027f0:	e7df      	b.n	80027b2 <_printf_float+0x162>
 80027f2:	b913      	cbnz	r3, 80027fa <_printf_float+0x1aa>
 80027f4:	6822      	ldr	r2, [r4, #0]
 80027f6:	07d2      	lsls	r2, r2, #31
 80027f8:	d501      	bpl.n	80027fe <_printf_float+0x1ae>
 80027fa:	3302      	adds	r3, #2
 80027fc:	e7f4      	b.n	80027e8 <_printf_float+0x198>
 80027fe:	2301      	movs	r3, #1
 8002800:	e7f2      	b.n	80027e8 <_printf_float+0x198>
 8002802:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002808:	4299      	cmp	r1, r3
 800280a:	db05      	blt.n	8002818 <_printf_float+0x1c8>
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	6121      	str	r1, [r4, #16]
 8002810:	07d8      	lsls	r0, r3, #31
 8002812:	d5ea      	bpl.n	80027ea <_printf_float+0x19a>
 8002814:	1c4b      	adds	r3, r1, #1
 8002816:	e7e7      	b.n	80027e8 <_printf_float+0x198>
 8002818:	2900      	cmp	r1, #0
 800281a:	bfcc      	ite	gt
 800281c:	2201      	movgt	r2, #1
 800281e:	f1c1 0202 	rsble	r2, r1, #2
 8002822:	4413      	add	r3, r2
 8002824:	e7e0      	b.n	80027e8 <_printf_float+0x198>
 8002826:	6823      	ldr	r3, [r4, #0]
 8002828:	055a      	lsls	r2, r3, #21
 800282a:	d407      	bmi.n	800283c <_printf_float+0x1ec>
 800282c:	6923      	ldr	r3, [r4, #16]
 800282e:	4642      	mov	r2, r8
 8002830:	4631      	mov	r1, r6
 8002832:	4628      	mov	r0, r5
 8002834:	47b8      	blx	r7
 8002836:	3001      	adds	r0, #1
 8002838:	d12b      	bne.n	8002892 <_printf_float+0x242>
 800283a:	e764      	b.n	8002706 <_printf_float+0xb6>
 800283c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002840:	f240 80dd 	bls.w	80029fe <_printf_float+0x3ae>
 8002844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002848:	2200      	movs	r2, #0
 800284a:	2300      	movs	r3, #0
 800284c:	f7fe f8ac 	bl	80009a8 <__aeabi_dcmpeq>
 8002850:	2800      	cmp	r0, #0
 8002852:	d033      	beq.n	80028bc <_printf_float+0x26c>
 8002854:	2301      	movs	r3, #1
 8002856:	4631      	mov	r1, r6
 8002858:	4628      	mov	r0, r5
 800285a:	4a35      	ldr	r2, [pc, #212]	; (8002930 <_printf_float+0x2e0>)
 800285c:	47b8      	blx	r7
 800285e:	3001      	adds	r0, #1
 8002860:	f43f af51 	beq.w	8002706 <_printf_float+0xb6>
 8002864:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002868:	429a      	cmp	r2, r3
 800286a:	db02      	blt.n	8002872 <_printf_float+0x222>
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	07d8      	lsls	r0, r3, #31
 8002870:	d50f      	bpl.n	8002892 <_printf_float+0x242>
 8002872:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002876:	4631      	mov	r1, r6
 8002878:	4628      	mov	r0, r5
 800287a:	47b8      	blx	r7
 800287c:	3001      	adds	r0, #1
 800287e:	f43f af42 	beq.w	8002706 <_printf_float+0xb6>
 8002882:	f04f 0800 	mov.w	r8, #0
 8002886:	f104 091a 	add.w	r9, r4, #26
 800288a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800288c:	3b01      	subs	r3, #1
 800288e:	4543      	cmp	r3, r8
 8002890:	dc09      	bgt.n	80028a6 <_printf_float+0x256>
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	079b      	lsls	r3, r3, #30
 8002896:	f100 8102 	bmi.w	8002a9e <_printf_float+0x44e>
 800289a:	68e0      	ldr	r0, [r4, #12]
 800289c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800289e:	4298      	cmp	r0, r3
 80028a0:	bfb8      	it	lt
 80028a2:	4618      	movlt	r0, r3
 80028a4:	e731      	b.n	800270a <_printf_float+0xba>
 80028a6:	2301      	movs	r3, #1
 80028a8:	464a      	mov	r2, r9
 80028aa:	4631      	mov	r1, r6
 80028ac:	4628      	mov	r0, r5
 80028ae:	47b8      	blx	r7
 80028b0:	3001      	adds	r0, #1
 80028b2:	f43f af28 	beq.w	8002706 <_printf_float+0xb6>
 80028b6:	f108 0801 	add.w	r8, r8, #1
 80028ba:	e7e6      	b.n	800288a <_printf_float+0x23a>
 80028bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80028be:	2b00      	cmp	r3, #0
 80028c0:	dc38      	bgt.n	8002934 <_printf_float+0x2e4>
 80028c2:	2301      	movs	r3, #1
 80028c4:	4631      	mov	r1, r6
 80028c6:	4628      	mov	r0, r5
 80028c8:	4a19      	ldr	r2, [pc, #100]	; (8002930 <_printf_float+0x2e0>)
 80028ca:	47b8      	blx	r7
 80028cc:	3001      	adds	r0, #1
 80028ce:	f43f af1a 	beq.w	8002706 <_printf_float+0xb6>
 80028d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80028d6:	4313      	orrs	r3, r2
 80028d8:	d102      	bne.n	80028e0 <_printf_float+0x290>
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	07d9      	lsls	r1, r3, #31
 80028de:	d5d8      	bpl.n	8002892 <_printf_float+0x242>
 80028e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028e4:	4631      	mov	r1, r6
 80028e6:	4628      	mov	r0, r5
 80028e8:	47b8      	blx	r7
 80028ea:	3001      	adds	r0, #1
 80028ec:	f43f af0b 	beq.w	8002706 <_printf_float+0xb6>
 80028f0:	f04f 0900 	mov.w	r9, #0
 80028f4:	f104 0a1a 	add.w	sl, r4, #26
 80028f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80028fa:	425b      	negs	r3, r3
 80028fc:	454b      	cmp	r3, r9
 80028fe:	dc01      	bgt.n	8002904 <_printf_float+0x2b4>
 8002900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002902:	e794      	b.n	800282e <_printf_float+0x1de>
 8002904:	2301      	movs	r3, #1
 8002906:	4652      	mov	r2, sl
 8002908:	4631      	mov	r1, r6
 800290a:	4628      	mov	r0, r5
 800290c:	47b8      	blx	r7
 800290e:	3001      	adds	r0, #1
 8002910:	f43f aef9 	beq.w	8002706 <_printf_float+0xb6>
 8002914:	f109 0901 	add.w	r9, r9, #1
 8002918:	e7ee      	b.n	80028f8 <_printf_float+0x2a8>
 800291a:	bf00      	nop
 800291c:	7fefffff 	.word	0x7fefffff
 8002920:	08004f7c 	.word	0x08004f7c
 8002924:	08004f80 	.word	0x08004f80
 8002928:	08004f88 	.word	0x08004f88
 800292c:	08004f84 	.word	0x08004f84
 8002930:	08004f8c 	.word	0x08004f8c
 8002934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002936:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002938:	429a      	cmp	r2, r3
 800293a:	bfa8      	it	ge
 800293c:	461a      	movge	r2, r3
 800293e:	2a00      	cmp	r2, #0
 8002940:	4691      	mov	r9, r2
 8002942:	dc37      	bgt.n	80029b4 <_printf_float+0x364>
 8002944:	f04f 0b00 	mov.w	fp, #0
 8002948:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800294c:	f104 021a 	add.w	r2, r4, #26
 8002950:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002954:	ebaa 0309 	sub.w	r3, sl, r9
 8002958:	455b      	cmp	r3, fp
 800295a:	dc33      	bgt.n	80029c4 <_printf_float+0x374>
 800295c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002960:	429a      	cmp	r2, r3
 8002962:	db3b      	blt.n	80029dc <_printf_float+0x38c>
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	07da      	lsls	r2, r3, #31
 8002968:	d438      	bmi.n	80029dc <_printf_float+0x38c>
 800296a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800296c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800296e:	eba2 030a 	sub.w	r3, r2, sl
 8002972:	eba2 0901 	sub.w	r9, r2, r1
 8002976:	4599      	cmp	r9, r3
 8002978:	bfa8      	it	ge
 800297a:	4699      	movge	r9, r3
 800297c:	f1b9 0f00 	cmp.w	r9, #0
 8002980:	dc34      	bgt.n	80029ec <_printf_float+0x39c>
 8002982:	f04f 0800 	mov.w	r8, #0
 8002986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800298a:	f104 0a1a 	add.w	sl, r4, #26
 800298e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	eba3 0309 	sub.w	r3, r3, r9
 8002998:	4543      	cmp	r3, r8
 800299a:	f77f af7a 	ble.w	8002892 <_printf_float+0x242>
 800299e:	2301      	movs	r3, #1
 80029a0:	4652      	mov	r2, sl
 80029a2:	4631      	mov	r1, r6
 80029a4:	4628      	mov	r0, r5
 80029a6:	47b8      	blx	r7
 80029a8:	3001      	adds	r0, #1
 80029aa:	f43f aeac 	beq.w	8002706 <_printf_float+0xb6>
 80029ae:	f108 0801 	add.w	r8, r8, #1
 80029b2:	e7ec      	b.n	800298e <_printf_float+0x33e>
 80029b4:	4613      	mov	r3, r2
 80029b6:	4631      	mov	r1, r6
 80029b8:	4642      	mov	r2, r8
 80029ba:	4628      	mov	r0, r5
 80029bc:	47b8      	blx	r7
 80029be:	3001      	adds	r0, #1
 80029c0:	d1c0      	bne.n	8002944 <_printf_float+0x2f4>
 80029c2:	e6a0      	b.n	8002706 <_printf_float+0xb6>
 80029c4:	2301      	movs	r3, #1
 80029c6:	4631      	mov	r1, r6
 80029c8:	4628      	mov	r0, r5
 80029ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80029cc:	47b8      	blx	r7
 80029ce:	3001      	adds	r0, #1
 80029d0:	f43f ae99 	beq.w	8002706 <_printf_float+0xb6>
 80029d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80029d6:	f10b 0b01 	add.w	fp, fp, #1
 80029da:	e7b9      	b.n	8002950 <_printf_float+0x300>
 80029dc:	4631      	mov	r1, r6
 80029de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80029e2:	4628      	mov	r0, r5
 80029e4:	47b8      	blx	r7
 80029e6:	3001      	adds	r0, #1
 80029e8:	d1bf      	bne.n	800296a <_printf_float+0x31a>
 80029ea:	e68c      	b.n	8002706 <_printf_float+0xb6>
 80029ec:	464b      	mov	r3, r9
 80029ee:	4631      	mov	r1, r6
 80029f0:	4628      	mov	r0, r5
 80029f2:	eb08 020a 	add.w	r2, r8, sl
 80029f6:	47b8      	blx	r7
 80029f8:	3001      	adds	r0, #1
 80029fa:	d1c2      	bne.n	8002982 <_printf_float+0x332>
 80029fc:	e683      	b.n	8002706 <_printf_float+0xb6>
 80029fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a00:	2a01      	cmp	r2, #1
 8002a02:	dc01      	bgt.n	8002a08 <_printf_float+0x3b8>
 8002a04:	07db      	lsls	r3, r3, #31
 8002a06:	d537      	bpl.n	8002a78 <_printf_float+0x428>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	4642      	mov	r2, r8
 8002a0c:	4631      	mov	r1, r6
 8002a0e:	4628      	mov	r0, r5
 8002a10:	47b8      	blx	r7
 8002a12:	3001      	adds	r0, #1
 8002a14:	f43f ae77 	beq.w	8002706 <_printf_float+0xb6>
 8002a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002a1c:	4631      	mov	r1, r6
 8002a1e:	4628      	mov	r0, r5
 8002a20:	47b8      	blx	r7
 8002a22:	3001      	adds	r0, #1
 8002a24:	f43f ae6f 	beq.w	8002706 <_printf_float+0xb6>
 8002a28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f7fd ffba 	bl	80009a8 <__aeabi_dcmpeq>
 8002a34:	b9d8      	cbnz	r0, 8002a6e <_printf_float+0x41e>
 8002a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a38:	f108 0201 	add.w	r2, r8, #1
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	4631      	mov	r1, r6
 8002a40:	4628      	mov	r0, r5
 8002a42:	47b8      	blx	r7
 8002a44:	3001      	adds	r0, #1
 8002a46:	d10e      	bne.n	8002a66 <_printf_float+0x416>
 8002a48:	e65d      	b.n	8002706 <_printf_float+0xb6>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	464a      	mov	r2, r9
 8002a4e:	4631      	mov	r1, r6
 8002a50:	4628      	mov	r0, r5
 8002a52:	47b8      	blx	r7
 8002a54:	3001      	adds	r0, #1
 8002a56:	f43f ae56 	beq.w	8002706 <_printf_float+0xb6>
 8002a5a:	f108 0801 	add.w	r8, r8, #1
 8002a5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a60:	3b01      	subs	r3, #1
 8002a62:	4543      	cmp	r3, r8
 8002a64:	dcf1      	bgt.n	8002a4a <_printf_float+0x3fa>
 8002a66:	4653      	mov	r3, sl
 8002a68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002a6c:	e6e0      	b.n	8002830 <_printf_float+0x1e0>
 8002a6e:	f04f 0800 	mov.w	r8, #0
 8002a72:	f104 091a 	add.w	r9, r4, #26
 8002a76:	e7f2      	b.n	8002a5e <_printf_float+0x40e>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	4642      	mov	r2, r8
 8002a7c:	e7df      	b.n	8002a3e <_printf_float+0x3ee>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	464a      	mov	r2, r9
 8002a82:	4631      	mov	r1, r6
 8002a84:	4628      	mov	r0, r5
 8002a86:	47b8      	blx	r7
 8002a88:	3001      	adds	r0, #1
 8002a8a:	f43f ae3c 	beq.w	8002706 <_printf_float+0xb6>
 8002a8e:	f108 0801 	add.w	r8, r8, #1
 8002a92:	68e3      	ldr	r3, [r4, #12]
 8002a94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002a96:	1a5b      	subs	r3, r3, r1
 8002a98:	4543      	cmp	r3, r8
 8002a9a:	dcf0      	bgt.n	8002a7e <_printf_float+0x42e>
 8002a9c:	e6fd      	b.n	800289a <_printf_float+0x24a>
 8002a9e:	f04f 0800 	mov.w	r8, #0
 8002aa2:	f104 0919 	add.w	r9, r4, #25
 8002aa6:	e7f4      	b.n	8002a92 <_printf_float+0x442>

08002aa8 <_printf_common>:
 8002aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aac:	4616      	mov	r6, r2
 8002aae:	4699      	mov	r9, r3
 8002ab0:	688a      	ldr	r2, [r1, #8]
 8002ab2:	690b      	ldr	r3, [r1, #16]
 8002ab4:	4607      	mov	r7, r0
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	bfb8      	it	lt
 8002aba:	4613      	movlt	r3, r2
 8002abc:	6033      	str	r3, [r6, #0]
 8002abe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ac8:	b10a      	cbz	r2, 8002ace <_printf_common+0x26>
 8002aca:	3301      	adds	r3, #1
 8002acc:	6033      	str	r3, [r6, #0]
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	0699      	lsls	r1, r3, #26
 8002ad2:	bf42      	ittt	mi
 8002ad4:	6833      	ldrmi	r3, [r6, #0]
 8002ad6:	3302      	addmi	r3, #2
 8002ad8:	6033      	strmi	r3, [r6, #0]
 8002ada:	6825      	ldr	r5, [r4, #0]
 8002adc:	f015 0506 	ands.w	r5, r5, #6
 8002ae0:	d106      	bne.n	8002af0 <_printf_common+0x48>
 8002ae2:	f104 0a19 	add.w	sl, r4, #25
 8002ae6:	68e3      	ldr	r3, [r4, #12]
 8002ae8:	6832      	ldr	r2, [r6, #0]
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	42ab      	cmp	r3, r5
 8002aee:	dc28      	bgt.n	8002b42 <_printf_common+0x9a>
 8002af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002af4:	1e13      	subs	r3, r2, #0
 8002af6:	6822      	ldr	r2, [r4, #0]
 8002af8:	bf18      	it	ne
 8002afa:	2301      	movne	r3, #1
 8002afc:	0692      	lsls	r2, r2, #26
 8002afe:	d42d      	bmi.n	8002b5c <_printf_common+0xb4>
 8002b00:	4649      	mov	r1, r9
 8002b02:	4638      	mov	r0, r7
 8002b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b08:	47c0      	blx	r8
 8002b0a:	3001      	adds	r0, #1
 8002b0c:	d020      	beq.n	8002b50 <_printf_common+0xa8>
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	68e5      	ldr	r5, [r4, #12]
 8002b12:	f003 0306 	and.w	r3, r3, #6
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf18      	it	ne
 8002b1a:	2500      	movne	r5, #0
 8002b1c:	6832      	ldr	r2, [r6, #0]
 8002b1e:	f04f 0600 	mov.w	r6, #0
 8002b22:	68a3      	ldr	r3, [r4, #8]
 8002b24:	bf08      	it	eq
 8002b26:	1aad      	subeq	r5, r5, r2
 8002b28:	6922      	ldr	r2, [r4, #16]
 8002b2a:	bf08      	it	eq
 8002b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b30:	4293      	cmp	r3, r2
 8002b32:	bfc4      	itt	gt
 8002b34:	1a9b      	subgt	r3, r3, r2
 8002b36:	18ed      	addgt	r5, r5, r3
 8002b38:	341a      	adds	r4, #26
 8002b3a:	42b5      	cmp	r5, r6
 8002b3c:	d11a      	bne.n	8002b74 <_printf_common+0xcc>
 8002b3e:	2000      	movs	r0, #0
 8002b40:	e008      	b.n	8002b54 <_printf_common+0xac>
 8002b42:	2301      	movs	r3, #1
 8002b44:	4652      	mov	r2, sl
 8002b46:	4649      	mov	r1, r9
 8002b48:	4638      	mov	r0, r7
 8002b4a:	47c0      	blx	r8
 8002b4c:	3001      	adds	r0, #1
 8002b4e:	d103      	bne.n	8002b58 <_printf_common+0xb0>
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295
 8002b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b58:	3501      	adds	r5, #1
 8002b5a:	e7c4      	b.n	8002ae6 <_printf_common+0x3e>
 8002b5c:	2030      	movs	r0, #48	; 0x30
 8002b5e:	18e1      	adds	r1, r4, r3
 8002b60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b6a:	4422      	add	r2, r4
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b72:	e7c5      	b.n	8002b00 <_printf_common+0x58>
 8002b74:	2301      	movs	r3, #1
 8002b76:	4622      	mov	r2, r4
 8002b78:	4649      	mov	r1, r9
 8002b7a:	4638      	mov	r0, r7
 8002b7c:	47c0      	blx	r8
 8002b7e:	3001      	adds	r0, #1
 8002b80:	d0e6      	beq.n	8002b50 <_printf_common+0xa8>
 8002b82:	3601      	adds	r6, #1
 8002b84:	e7d9      	b.n	8002b3a <_printf_common+0x92>
	...

08002b88 <_printf_i>:
 8002b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	7e27      	ldrb	r7, [r4, #24]
 8002b90:	4691      	mov	r9, r2
 8002b92:	2f78      	cmp	r7, #120	; 0x78
 8002b94:	4680      	mov	r8, r0
 8002b96:	469a      	mov	sl, r3
 8002b98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002b9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b9e:	d807      	bhi.n	8002bb0 <_printf_i+0x28>
 8002ba0:	2f62      	cmp	r7, #98	; 0x62
 8002ba2:	d80a      	bhi.n	8002bba <_printf_i+0x32>
 8002ba4:	2f00      	cmp	r7, #0
 8002ba6:	f000 80d9 	beq.w	8002d5c <_printf_i+0x1d4>
 8002baa:	2f58      	cmp	r7, #88	; 0x58
 8002bac:	f000 80a4 	beq.w	8002cf8 <_printf_i+0x170>
 8002bb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002bb8:	e03a      	b.n	8002c30 <_printf_i+0xa8>
 8002bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002bbe:	2b15      	cmp	r3, #21
 8002bc0:	d8f6      	bhi.n	8002bb0 <_printf_i+0x28>
 8002bc2:	a001      	add	r0, pc, #4	; (adr r0, 8002bc8 <_printf_i+0x40>)
 8002bc4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002bc8:	08002c21 	.word	0x08002c21
 8002bcc:	08002c35 	.word	0x08002c35
 8002bd0:	08002bb1 	.word	0x08002bb1
 8002bd4:	08002bb1 	.word	0x08002bb1
 8002bd8:	08002bb1 	.word	0x08002bb1
 8002bdc:	08002bb1 	.word	0x08002bb1
 8002be0:	08002c35 	.word	0x08002c35
 8002be4:	08002bb1 	.word	0x08002bb1
 8002be8:	08002bb1 	.word	0x08002bb1
 8002bec:	08002bb1 	.word	0x08002bb1
 8002bf0:	08002bb1 	.word	0x08002bb1
 8002bf4:	08002d43 	.word	0x08002d43
 8002bf8:	08002c65 	.word	0x08002c65
 8002bfc:	08002d25 	.word	0x08002d25
 8002c00:	08002bb1 	.word	0x08002bb1
 8002c04:	08002bb1 	.word	0x08002bb1
 8002c08:	08002d65 	.word	0x08002d65
 8002c0c:	08002bb1 	.word	0x08002bb1
 8002c10:	08002c65 	.word	0x08002c65
 8002c14:	08002bb1 	.word	0x08002bb1
 8002c18:	08002bb1 	.word	0x08002bb1
 8002c1c:	08002d2d 	.word	0x08002d2d
 8002c20:	680b      	ldr	r3, [r1, #0]
 8002c22:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c26:	1d1a      	adds	r2, r3, #4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	600a      	str	r2, [r1, #0]
 8002c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0a4      	b.n	8002d7e <_printf_i+0x1f6>
 8002c34:	6825      	ldr	r5, [r4, #0]
 8002c36:	6808      	ldr	r0, [r1, #0]
 8002c38:	062e      	lsls	r6, r5, #24
 8002c3a:	f100 0304 	add.w	r3, r0, #4
 8002c3e:	d50a      	bpl.n	8002c56 <_printf_i+0xce>
 8002c40:	6805      	ldr	r5, [r0, #0]
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	2d00      	cmp	r5, #0
 8002c46:	da03      	bge.n	8002c50 <_printf_i+0xc8>
 8002c48:	232d      	movs	r3, #45	; 0x2d
 8002c4a:	426d      	negs	r5, r5
 8002c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c50:	230a      	movs	r3, #10
 8002c52:	485e      	ldr	r0, [pc, #376]	; (8002dcc <_printf_i+0x244>)
 8002c54:	e019      	b.n	8002c8a <_printf_i+0x102>
 8002c56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002c5a:	6805      	ldr	r5, [r0, #0]
 8002c5c:	600b      	str	r3, [r1, #0]
 8002c5e:	bf18      	it	ne
 8002c60:	b22d      	sxthne	r5, r5
 8002c62:	e7ef      	b.n	8002c44 <_printf_i+0xbc>
 8002c64:	680b      	ldr	r3, [r1, #0]
 8002c66:	6825      	ldr	r5, [r4, #0]
 8002c68:	1d18      	adds	r0, r3, #4
 8002c6a:	6008      	str	r0, [r1, #0]
 8002c6c:	0628      	lsls	r0, r5, #24
 8002c6e:	d501      	bpl.n	8002c74 <_printf_i+0xec>
 8002c70:	681d      	ldr	r5, [r3, #0]
 8002c72:	e002      	b.n	8002c7a <_printf_i+0xf2>
 8002c74:	0669      	lsls	r1, r5, #25
 8002c76:	d5fb      	bpl.n	8002c70 <_printf_i+0xe8>
 8002c78:	881d      	ldrh	r5, [r3, #0]
 8002c7a:	2f6f      	cmp	r7, #111	; 0x6f
 8002c7c:	bf0c      	ite	eq
 8002c7e:	2308      	moveq	r3, #8
 8002c80:	230a      	movne	r3, #10
 8002c82:	4852      	ldr	r0, [pc, #328]	; (8002dcc <_printf_i+0x244>)
 8002c84:	2100      	movs	r1, #0
 8002c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c8a:	6866      	ldr	r6, [r4, #4]
 8002c8c:	2e00      	cmp	r6, #0
 8002c8e:	bfa8      	it	ge
 8002c90:	6821      	ldrge	r1, [r4, #0]
 8002c92:	60a6      	str	r6, [r4, #8]
 8002c94:	bfa4      	itt	ge
 8002c96:	f021 0104 	bicge.w	r1, r1, #4
 8002c9a:	6021      	strge	r1, [r4, #0]
 8002c9c:	b90d      	cbnz	r5, 8002ca2 <_printf_i+0x11a>
 8002c9e:	2e00      	cmp	r6, #0
 8002ca0:	d04d      	beq.n	8002d3e <_printf_i+0x1b6>
 8002ca2:	4616      	mov	r6, r2
 8002ca4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ca8:	fb03 5711 	mls	r7, r3, r1, r5
 8002cac:	5dc7      	ldrb	r7, [r0, r7]
 8002cae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002cb2:	462f      	mov	r7, r5
 8002cb4:	42bb      	cmp	r3, r7
 8002cb6:	460d      	mov	r5, r1
 8002cb8:	d9f4      	bls.n	8002ca4 <_printf_i+0x11c>
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d10b      	bne.n	8002cd6 <_printf_i+0x14e>
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	07df      	lsls	r7, r3, #31
 8002cc2:	d508      	bpl.n	8002cd6 <_printf_i+0x14e>
 8002cc4:	6923      	ldr	r3, [r4, #16]
 8002cc6:	6861      	ldr	r1, [r4, #4]
 8002cc8:	4299      	cmp	r1, r3
 8002cca:	bfde      	ittt	le
 8002ccc:	2330      	movle	r3, #48	; 0x30
 8002cce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002cd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002cd6:	1b92      	subs	r2, r2, r6
 8002cd8:	6122      	str	r2, [r4, #16]
 8002cda:	464b      	mov	r3, r9
 8002cdc:	4621      	mov	r1, r4
 8002cde:	4640      	mov	r0, r8
 8002ce0:	f8cd a000 	str.w	sl, [sp]
 8002ce4:	aa03      	add	r2, sp, #12
 8002ce6:	f7ff fedf 	bl	8002aa8 <_printf_common>
 8002cea:	3001      	adds	r0, #1
 8002cec:	d14c      	bne.n	8002d88 <_printf_i+0x200>
 8002cee:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf2:	b004      	add	sp, #16
 8002cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cf8:	4834      	ldr	r0, [pc, #208]	; (8002dcc <_printf_i+0x244>)
 8002cfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002cfe:	680e      	ldr	r6, [r1, #0]
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	f856 5b04 	ldr.w	r5, [r6], #4
 8002d06:	061f      	lsls	r7, r3, #24
 8002d08:	600e      	str	r6, [r1, #0]
 8002d0a:	d514      	bpl.n	8002d36 <_printf_i+0x1ae>
 8002d0c:	07d9      	lsls	r1, r3, #31
 8002d0e:	bf44      	itt	mi
 8002d10:	f043 0320 	orrmi.w	r3, r3, #32
 8002d14:	6023      	strmi	r3, [r4, #0]
 8002d16:	b91d      	cbnz	r5, 8002d20 <_printf_i+0x198>
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	f023 0320 	bic.w	r3, r3, #32
 8002d1e:	6023      	str	r3, [r4, #0]
 8002d20:	2310      	movs	r3, #16
 8002d22:	e7af      	b.n	8002c84 <_printf_i+0xfc>
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	f043 0320 	orr.w	r3, r3, #32
 8002d2a:	6023      	str	r3, [r4, #0]
 8002d2c:	2378      	movs	r3, #120	; 0x78
 8002d2e:	4828      	ldr	r0, [pc, #160]	; (8002dd0 <_printf_i+0x248>)
 8002d30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d34:	e7e3      	b.n	8002cfe <_printf_i+0x176>
 8002d36:	065e      	lsls	r6, r3, #25
 8002d38:	bf48      	it	mi
 8002d3a:	b2ad      	uxthmi	r5, r5
 8002d3c:	e7e6      	b.n	8002d0c <_printf_i+0x184>
 8002d3e:	4616      	mov	r6, r2
 8002d40:	e7bb      	b.n	8002cba <_printf_i+0x132>
 8002d42:	680b      	ldr	r3, [r1, #0]
 8002d44:	6826      	ldr	r6, [r4, #0]
 8002d46:	1d1d      	adds	r5, r3, #4
 8002d48:	6960      	ldr	r0, [r4, #20]
 8002d4a:	600d      	str	r5, [r1, #0]
 8002d4c:	0635      	lsls	r5, r6, #24
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	d501      	bpl.n	8002d56 <_printf_i+0x1ce>
 8002d52:	6018      	str	r0, [r3, #0]
 8002d54:	e002      	b.n	8002d5c <_printf_i+0x1d4>
 8002d56:	0671      	lsls	r1, r6, #25
 8002d58:	d5fb      	bpl.n	8002d52 <_printf_i+0x1ca>
 8002d5a:	8018      	strh	r0, [r3, #0]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	4616      	mov	r6, r2
 8002d60:	6123      	str	r3, [r4, #16]
 8002d62:	e7ba      	b.n	8002cda <_printf_i+0x152>
 8002d64:	680b      	ldr	r3, [r1, #0]
 8002d66:	1d1a      	adds	r2, r3, #4
 8002d68:	600a      	str	r2, [r1, #0]
 8002d6a:	681e      	ldr	r6, [r3, #0]
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4630      	mov	r0, r6
 8002d70:	6862      	ldr	r2, [r4, #4]
 8002d72:	f000 feb7 	bl	8003ae4 <memchr>
 8002d76:	b108      	cbz	r0, 8002d7c <_printf_i+0x1f4>
 8002d78:	1b80      	subs	r0, r0, r6
 8002d7a:	6060      	str	r0, [r4, #4]
 8002d7c:	6863      	ldr	r3, [r4, #4]
 8002d7e:	6123      	str	r3, [r4, #16]
 8002d80:	2300      	movs	r3, #0
 8002d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d86:	e7a8      	b.n	8002cda <_printf_i+0x152>
 8002d88:	4632      	mov	r2, r6
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	4640      	mov	r0, r8
 8002d8e:	6923      	ldr	r3, [r4, #16]
 8002d90:	47d0      	blx	sl
 8002d92:	3001      	adds	r0, #1
 8002d94:	d0ab      	beq.n	8002cee <_printf_i+0x166>
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	079b      	lsls	r3, r3, #30
 8002d9a:	d413      	bmi.n	8002dc4 <_printf_i+0x23c>
 8002d9c:	68e0      	ldr	r0, [r4, #12]
 8002d9e:	9b03      	ldr	r3, [sp, #12]
 8002da0:	4298      	cmp	r0, r3
 8002da2:	bfb8      	it	lt
 8002da4:	4618      	movlt	r0, r3
 8002da6:	e7a4      	b.n	8002cf2 <_printf_i+0x16a>
 8002da8:	2301      	movs	r3, #1
 8002daa:	4632      	mov	r2, r6
 8002dac:	4649      	mov	r1, r9
 8002dae:	4640      	mov	r0, r8
 8002db0:	47d0      	blx	sl
 8002db2:	3001      	adds	r0, #1
 8002db4:	d09b      	beq.n	8002cee <_printf_i+0x166>
 8002db6:	3501      	adds	r5, #1
 8002db8:	68e3      	ldr	r3, [r4, #12]
 8002dba:	9903      	ldr	r1, [sp, #12]
 8002dbc:	1a5b      	subs	r3, r3, r1
 8002dbe:	42ab      	cmp	r3, r5
 8002dc0:	dcf2      	bgt.n	8002da8 <_printf_i+0x220>
 8002dc2:	e7eb      	b.n	8002d9c <_printf_i+0x214>
 8002dc4:	2500      	movs	r5, #0
 8002dc6:	f104 0619 	add.w	r6, r4, #25
 8002dca:	e7f5      	b.n	8002db8 <_printf_i+0x230>
 8002dcc:	08004f8e 	.word	0x08004f8e
 8002dd0:	08004f9f 	.word	0x08004f9f

08002dd4 <quorem>:
 8002dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd8:	6903      	ldr	r3, [r0, #16]
 8002dda:	690c      	ldr	r4, [r1, #16]
 8002ddc:	4607      	mov	r7, r0
 8002dde:	42a3      	cmp	r3, r4
 8002de0:	f2c0 8083 	blt.w	8002eea <quorem+0x116>
 8002de4:	3c01      	subs	r4, #1
 8002de6:	f100 0514 	add.w	r5, r0, #20
 8002dea:	f101 0814 	add.w	r8, r1, #20
 8002dee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002df8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	fbb2 f6f3 	udiv	r6, r2, r3
 8002e04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002e08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002e0c:	d332      	bcc.n	8002e74 <quorem+0xa0>
 8002e0e:	f04f 0e00 	mov.w	lr, #0
 8002e12:	4640      	mov	r0, r8
 8002e14:	46ac      	mov	ip, r5
 8002e16:	46f2      	mov	sl, lr
 8002e18:	f850 2b04 	ldr.w	r2, [r0], #4
 8002e1c:	b293      	uxth	r3, r2
 8002e1e:	fb06 e303 	mla	r3, r6, r3, lr
 8002e22:	0c12      	lsrs	r2, r2, #16
 8002e24:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002e28:	fb06 e202 	mla	r2, r6, r2, lr
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	ebaa 0303 	sub.w	r3, sl, r3
 8002e32:	f8dc a000 	ldr.w	sl, [ip]
 8002e36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002e3a:	fa1f fa8a 	uxth.w	sl, sl
 8002e3e:	4453      	add	r3, sl
 8002e40:	fa1f fa82 	uxth.w	sl, r2
 8002e44:	f8dc 2000 	ldr.w	r2, [ip]
 8002e48:	4581      	cmp	r9, r0
 8002e4a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8002e4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e58:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002e5c:	f84c 3b04 	str.w	r3, [ip], #4
 8002e60:	d2da      	bcs.n	8002e18 <quorem+0x44>
 8002e62:	f855 300b 	ldr.w	r3, [r5, fp]
 8002e66:	b92b      	cbnz	r3, 8002e74 <quorem+0xa0>
 8002e68:	9b01      	ldr	r3, [sp, #4]
 8002e6a:	3b04      	subs	r3, #4
 8002e6c:	429d      	cmp	r5, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	d32f      	bcc.n	8002ed2 <quorem+0xfe>
 8002e72:	613c      	str	r4, [r7, #16]
 8002e74:	4638      	mov	r0, r7
 8002e76:	f001 f8cb 	bl	8004010 <__mcmp>
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	db25      	blt.n	8002eca <quorem+0xf6>
 8002e7e:	4628      	mov	r0, r5
 8002e80:	f04f 0c00 	mov.w	ip, #0
 8002e84:	3601      	adds	r6, #1
 8002e86:	f858 1b04 	ldr.w	r1, [r8], #4
 8002e8a:	f8d0 e000 	ldr.w	lr, [r0]
 8002e8e:	b28b      	uxth	r3, r1
 8002e90:	ebac 0303 	sub.w	r3, ip, r3
 8002e94:	fa1f f28e 	uxth.w	r2, lr
 8002e98:	4413      	add	r3, r2
 8002e9a:	0c0a      	lsrs	r2, r1, #16
 8002e9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002ea0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002eaa:	45c1      	cmp	r9, r8
 8002eac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002eb0:	f840 3b04 	str.w	r3, [r0], #4
 8002eb4:	d2e7      	bcs.n	8002e86 <quorem+0xb2>
 8002eb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002eba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002ebe:	b922      	cbnz	r2, 8002eca <quorem+0xf6>
 8002ec0:	3b04      	subs	r3, #4
 8002ec2:	429d      	cmp	r5, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	d30a      	bcc.n	8002ede <quorem+0x10a>
 8002ec8:	613c      	str	r4, [r7, #16]
 8002eca:	4630      	mov	r0, r6
 8002ecc:	b003      	add	sp, #12
 8002ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	3b04      	subs	r3, #4
 8002ed6:	2a00      	cmp	r2, #0
 8002ed8:	d1cb      	bne.n	8002e72 <quorem+0x9e>
 8002eda:	3c01      	subs	r4, #1
 8002edc:	e7c6      	b.n	8002e6c <quorem+0x98>
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	3b04      	subs	r3, #4
 8002ee2:	2a00      	cmp	r2, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <quorem+0xf4>
 8002ee6:	3c01      	subs	r4, #1
 8002ee8:	e7eb      	b.n	8002ec2 <quorem+0xee>
 8002eea:	2000      	movs	r0, #0
 8002eec:	e7ee      	b.n	8002ecc <quorem+0xf8>
	...

08002ef0 <_dtoa_r>:
 8002ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef4:	4616      	mov	r6, r2
 8002ef6:	461f      	mov	r7, r3
 8002ef8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002efa:	b099      	sub	sp, #100	; 0x64
 8002efc:	4605      	mov	r5, r0
 8002efe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002f02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8002f06:	b974      	cbnz	r4, 8002f26 <_dtoa_r+0x36>
 8002f08:	2010      	movs	r0, #16
 8002f0a:	f000 fde3 	bl	8003ad4 <malloc>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	6268      	str	r0, [r5, #36]	; 0x24
 8002f12:	b920      	cbnz	r0, 8002f1e <_dtoa_r+0x2e>
 8002f14:	21ea      	movs	r1, #234	; 0xea
 8002f16:	4bae      	ldr	r3, [pc, #696]	; (80031d0 <_dtoa_r+0x2e0>)
 8002f18:	48ae      	ldr	r0, [pc, #696]	; (80031d4 <_dtoa_r+0x2e4>)
 8002f1a:	f001 fa45 	bl	80043a8 <__assert_func>
 8002f1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002f22:	6004      	str	r4, [r0, #0]
 8002f24:	60c4      	str	r4, [r0, #12]
 8002f26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	b151      	cbz	r1, 8002f42 <_dtoa_r+0x52>
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	2301      	movs	r3, #1
 8002f30:	4093      	lsls	r3, r2
 8002f32:	604a      	str	r2, [r1, #4]
 8002f34:	608b      	str	r3, [r1, #8]
 8002f36:	4628      	mov	r0, r5
 8002f38:	f000 fe30 	bl	8003b9c <_Bfree>
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	1e3b      	subs	r3, r7, #0
 8002f44:	bfaf      	iteee	ge
 8002f46:	2300      	movge	r3, #0
 8002f48:	2201      	movlt	r2, #1
 8002f4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002f4e:	9305      	strlt	r3, [sp, #20]
 8002f50:	bfa8      	it	ge
 8002f52:	f8c8 3000 	strge.w	r3, [r8]
 8002f56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002f5a:	4b9f      	ldr	r3, [pc, #636]	; (80031d8 <_dtoa_r+0x2e8>)
 8002f5c:	bfb8      	it	lt
 8002f5e:	f8c8 2000 	strlt.w	r2, [r8]
 8002f62:	ea33 0309 	bics.w	r3, r3, r9
 8002f66:	d119      	bne.n	8002f9c <_dtoa_r+0xac>
 8002f68:	f242 730f 	movw	r3, #9999	; 0x270f
 8002f6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002f74:	4333      	orrs	r3, r6
 8002f76:	f000 8580 	beq.w	8003a7a <_dtoa_r+0xb8a>
 8002f7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002f7c:	b953      	cbnz	r3, 8002f94 <_dtoa_r+0xa4>
 8002f7e:	4b97      	ldr	r3, [pc, #604]	; (80031dc <_dtoa_r+0x2ec>)
 8002f80:	e022      	b.n	8002fc8 <_dtoa_r+0xd8>
 8002f82:	4b97      	ldr	r3, [pc, #604]	; (80031e0 <_dtoa_r+0x2f0>)
 8002f84:	9308      	str	r3, [sp, #32]
 8002f86:	3308      	adds	r3, #8
 8002f88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	9808      	ldr	r0, [sp, #32]
 8002f8e:	b019      	add	sp, #100	; 0x64
 8002f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f94:	4b91      	ldr	r3, [pc, #580]	; (80031dc <_dtoa_r+0x2ec>)
 8002f96:	9308      	str	r3, [sp, #32]
 8002f98:	3303      	adds	r3, #3
 8002f9a:	e7f5      	b.n	8002f88 <_dtoa_r+0x98>
 8002f9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002fa0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8002fa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2300      	movs	r3, #0
 8002fac:	f7fd fcfc 	bl	80009a8 <__aeabi_dcmpeq>
 8002fb0:	4680      	mov	r8, r0
 8002fb2:	b158      	cbz	r0, 8002fcc <_dtoa_r+0xdc>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8559 	beq.w	8003a74 <_dtoa_r+0xb84>
 8002fc2:	4888      	ldr	r0, [pc, #544]	; (80031e4 <_dtoa_r+0x2f4>)
 8002fc4:	6018      	str	r0, [r3, #0]
 8002fc6:	1e43      	subs	r3, r0, #1
 8002fc8:	9308      	str	r3, [sp, #32]
 8002fca:	e7df      	b.n	8002f8c <_dtoa_r+0x9c>
 8002fcc:	ab16      	add	r3, sp, #88	; 0x58
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	ab17      	add	r3, sp, #92	; 0x5c
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002fda:	f001 f8c5 	bl	8004168 <__d2b>
 8002fde:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8002fe2:	4682      	mov	sl, r0
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d07e      	beq.n	80030e6 <_dtoa_r+0x1f6>
 8002fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002ff2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ff6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002ffa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002ffe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003002:	2200      	movs	r2, #0
 8003004:	4b78      	ldr	r3, [pc, #480]	; (80031e8 <_dtoa_r+0x2f8>)
 8003006:	f7fd f8af 	bl	8000168 <__aeabi_dsub>
 800300a:	a36b      	add	r3, pc, #428	; (adr r3, 80031b8 <_dtoa_r+0x2c8>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f7fd fa62 	bl	80004d8 <__aeabi_dmul>
 8003014:	a36a      	add	r3, pc, #424	; (adr r3, 80031c0 <_dtoa_r+0x2d0>)
 8003016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301a:	f7fd f8a7 	bl	800016c <__adddf3>
 800301e:	4606      	mov	r6, r0
 8003020:	4620      	mov	r0, r4
 8003022:	460f      	mov	r7, r1
 8003024:	f7fd f9ee 	bl	8000404 <__aeabi_i2d>
 8003028:	a367      	add	r3, pc, #412	; (adr r3, 80031c8 <_dtoa_r+0x2d8>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	f7fd fa53 	bl	80004d8 <__aeabi_dmul>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4630      	mov	r0, r6
 8003038:	4639      	mov	r1, r7
 800303a:	f7fd f897 	bl	800016c <__adddf3>
 800303e:	4606      	mov	r6, r0
 8003040:	460f      	mov	r7, r1
 8003042:	f7fd fcf9 	bl	8000a38 <__aeabi_d2iz>
 8003046:	2200      	movs	r2, #0
 8003048:	4681      	mov	r9, r0
 800304a:	2300      	movs	r3, #0
 800304c:	4630      	mov	r0, r6
 800304e:	4639      	mov	r1, r7
 8003050:	f7fd fcb4 	bl	80009bc <__aeabi_dcmplt>
 8003054:	b148      	cbz	r0, 800306a <_dtoa_r+0x17a>
 8003056:	4648      	mov	r0, r9
 8003058:	f7fd f9d4 	bl	8000404 <__aeabi_i2d>
 800305c:	4632      	mov	r2, r6
 800305e:	463b      	mov	r3, r7
 8003060:	f7fd fca2 	bl	80009a8 <__aeabi_dcmpeq>
 8003064:	b908      	cbnz	r0, 800306a <_dtoa_r+0x17a>
 8003066:	f109 39ff 	add.w	r9, r9, #4294967295
 800306a:	f1b9 0f16 	cmp.w	r9, #22
 800306e:	d857      	bhi.n	8003120 <_dtoa_r+0x230>
 8003070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003074:	4b5d      	ldr	r3, [pc, #372]	; (80031ec <_dtoa_r+0x2fc>)
 8003076:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f7fd fc9d 	bl	80009bc <__aeabi_dcmplt>
 8003082:	2800      	cmp	r0, #0
 8003084:	d04e      	beq.n	8003124 <_dtoa_r+0x234>
 8003086:	2300      	movs	r3, #0
 8003088:	f109 39ff 	add.w	r9, r9, #4294967295
 800308c:	930f      	str	r3, [sp, #60]	; 0x3c
 800308e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003090:	1b1c      	subs	r4, r3, r4
 8003092:	1e63      	subs	r3, r4, #1
 8003094:	9309      	str	r3, [sp, #36]	; 0x24
 8003096:	bf49      	itett	mi
 8003098:	f1c4 0301 	rsbmi	r3, r4, #1
 800309c:	2300      	movpl	r3, #0
 800309e:	9306      	strmi	r3, [sp, #24]
 80030a0:	2300      	movmi	r3, #0
 80030a2:	bf54      	ite	pl
 80030a4:	9306      	strpl	r3, [sp, #24]
 80030a6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80030a8:	f1b9 0f00 	cmp.w	r9, #0
 80030ac:	db3c      	blt.n	8003128 <_dtoa_r+0x238>
 80030ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030b0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80030b4:	444b      	add	r3, r9
 80030b6:	9309      	str	r3, [sp, #36]	; 0x24
 80030b8:	2300      	movs	r3, #0
 80030ba:	930a      	str	r3, [sp, #40]	; 0x28
 80030bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030be:	2b09      	cmp	r3, #9
 80030c0:	d86c      	bhi.n	800319c <_dtoa_r+0x2ac>
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	bfc4      	itt	gt
 80030c6:	3b04      	subgt	r3, #4
 80030c8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80030ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030cc:	bfc8      	it	gt
 80030ce:	2400      	movgt	r4, #0
 80030d0:	f1a3 0302 	sub.w	r3, r3, #2
 80030d4:	bfd8      	it	le
 80030d6:	2401      	movle	r4, #1
 80030d8:	2b03      	cmp	r3, #3
 80030da:	f200 808b 	bhi.w	80031f4 <_dtoa_r+0x304>
 80030de:	e8df f003 	tbb	[pc, r3]
 80030e2:	4f2d      	.short	0x4f2d
 80030e4:	5b4d      	.short	0x5b4d
 80030e6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80030ea:	441c      	add	r4, r3
 80030ec:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	bfc3      	ittte	gt
 80030f4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80030f8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80030fc:	fa09 f303 	lslgt.w	r3, r9, r3
 8003100:	f1c3 0320 	rsble	r3, r3, #32
 8003104:	bfc6      	itte	gt
 8003106:	fa26 f000 	lsrgt.w	r0, r6, r0
 800310a:	4318      	orrgt	r0, r3
 800310c:	fa06 f003 	lslle.w	r0, r6, r3
 8003110:	f7fd f968 	bl	80003e4 <__aeabi_ui2d>
 8003114:	2301      	movs	r3, #1
 8003116:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800311a:	3c01      	subs	r4, #1
 800311c:	9313      	str	r3, [sp, #76]	; 0x4c
 800311e:	e770      	b.n	8003002 <_dtoa_r+0x112>
 8003120:	2301      	movs	r3, #1
 8003122:	e7b3      	b.n	800308c <_dtoa_r+0x19c>
 8003124:	900f      	str	r0, [sp, #60]	; 0x3c
 8003126:	e7b2      	b.n	800308e <_dtoa_r+0x19e>
 8003128:	9b06      	ldr	r3, [sp, #24]
 800312a:	eba3 0309 	sub.w	r3, r3, r9
 800312e:	9306      	str	r3, [sp, #24]
 8003130:	f1c9 0300 	rsb	r3, r9, #0
 8003134:	930a      	str	r3, [sp, #40]	; 0x28
 8003136:	2300      	movs	r3, #0
 8003138:	930e      	str	r3, [sp, #56]	; 0x38
 800313a:	e7bf      	b.n	80030bc <_dtoa_r+0x1cc>
 800313c:	2300      	movs	r3, #0
 800313e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003140:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003142:	2b00      	cmp	r3, #0
 8003144:	dc59      	bgt.n	80031fa <_dtoa_r+0x30a>
 8003146:	f04f 0b01 	mov.w	fp, #1
 800314a:	465b      	mov	r3, fp
 800314c:	f8cd b008 	str.w	fp, [sp, #8]
 8003150:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003154:	2200      	movs	r2, #0
 8003156:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003158:	6042      	str	r2, [r0, #4]
 800315a:	2204      	movs	r2, #4
 800315c:	f102 0614 	add.w	r6, r2, #20
 8003160:	429e      	cmp	r6, r3
 8003162:	6841      	ldr	r1, [r0, #4]
 8003164:	d94f      	bls.n	8003206 <_dtoa_r+0x316>
 8003166:	4628      	mov	r0, r5
 8003168:	f000 fcd8 	bl	8003b1c <_Balloc>
 800316c:	9008      	str	r0, [sp, #32]
 800316e:	2800      	cmp	r0, #0
 8003170:	d14d      	bne.n	800320e <_dtoa_r+0x31e>
 8003172:	4602      	mov	r2, r0
 8003174:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003178:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <_dtoa_r+0x300>)
 800317a:	e6cd      	b.n	8002f18 <_dtoa_r+0x28>
 800317c:	2301      	movs	r3, #1
 800317e:	e7de      	b.n	800313e <_dtoa_r+0x24e>
 8003180:	2300      	movs	r3, #0
 8003182:	930b      	str	r3, [sp, #44]	; 0x2c
 8003184:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003186:	eb09 0b03 	add.w	fp, r9, r3
 800318a:	f10b 0301 	add.w	r3, fp, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	9302      	str	r3, [sp, #8]
 8003192:	bfb8      	it	lt
 8003194:	2301      	movlt	r3, #1
 8003196:	e7dd      	b.n	8003154 <_dtoa_r+0x264>
 8003198:	2301      	movs	r3, #1
 800319a:	e7f2      	b.n	8003182 <_dtoa_r+0x292>
 800319c:	2401      	movs	r4, #1
 800319e:	2300      	movs	r3, #0
 80031a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80031a2:	9322      	str	r3, [sp, #136]	; 0x88
 80031a4:	f04f 3bff 	mov.w	fp, #4294967295
 80031a8:	2200      	movs	r2, #0
 80031aa:	2312      	movs	r3, #18
 80031ac:	f8cd b008 	str.w	fp, [sp, #8]
 80031b0:	9223      	str	r2, [sp, #140]	; 0x8c
 80031b2:	e7cf      	b.n	8003154 <_dtoa_r+0x264>
 80031b4:	f3af 8000 	nop.w
 80031b8:	636f4361 	.word	0x636f4361
 80031bc:	3fd287a7 	.word	0x3fd287a7
 80031c0:	8b60c8b3 	.word	0x8b60c8b3
 80031c4:	3fc68a28 	.word	0x3fc68a28
 80031c8:	509f79fb 	.word	0x509f79fb
 80031cc:	3fd34413 	.word	0x3fd34413
 80031d0:	08004fbd 	.word	0x08004fbd
 80031d4:	08004fd4 	.word	0x08004fd4
 80031d8:	7ff00000 	.word	0x7ff00000
 80031dc:	08004fb9 	.word	0x08004fb9
 80031e0:	08004fb0 	.word	0x08004fb0
 80031e4:	08004f8d 	.word	0x08004f8d
 80031e8:	3ff80000 	.word	0x3ff80000
 80031ec:	080050d0 	.word	0x080050d0
 80031f0:	08005033 	.word	0x08005033
 80031f4:	2301      	movs	r3, #1
 80031f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80031f8:	e7d4      	b.n	80031a4 <_dtoa_r+0x2b4>
 80031fa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80031fe:	465b      	mov	r3, fp
 8003200:	f8cd b008 	str.w	fp, [sp, #8]
 8003204:	e7a6      	b.n	8003154 <_dtoa_r+0x264>
 8003206:	3101      	adds	r1, #1
 8003208:	6041      	str	r1, [r0, #4]
 800320a:	0052      	lsls	r2, r2, #1
 800320c:	e7a6      	b.n	800315c <_dtoa_r+0x26c>
 800320e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003210:	9a08      	ldr	r2, [sp, #32]
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	9b02      	ldr	r3, [sp, #8]
 8003216:	2b0e      	cmp	r3, #14
 8003218:	f200 80a8 	bhi.w	800336c <_dtoa_r+0x47c>
 800321c:	2c00      	cmp	r4, #0
 800321e:	f000 80a5 	beq.w	800336c <_dtoa_r+0x47c>
 8003222:	f1b9 0f00 	cmp.w	r9, #0
 8003226:	dd34      	ble.n	8003292 <_dtoa_r+0x3a2>
 8003228:	4a9a      	ldr	r2, [pc, #616]	; (8003494 <_dtoa_r+0x5a4>)
 800322a:	f009 030f 	and.w	r3, r9, #15
 800322e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003232:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003236:	e9d3 3400 	ldrd	r3, r4, [r3]
 800323a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800323e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003242:	d016      	beq.n	8003272 <_dtoa_r+0x382>
 8003244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003248:	4b93      	ldr	r3, [pc, #588]	; (8003498 <_dtoa_r+0x5a8>)
 800324a:	2703      	movs	r7, #3
 800324c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003250:	f7fd fa6c 	bl	800072c <__aeabi_ddiv>
 8003254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003258:	f004 040f 	and.w	r4, r4, #15
 800325c:	4e8e      	ldr	r6, [pc, #568]	; (8003498 <_dtoa_r+0x5a8>)
 800325e:	b954      	cbnz	r4, 8003276 <_dtoa_r+0x386>
 8003260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003268:	f7fd fa60 	bl	800072c <__aeabi_ddiv>
 800326c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003270:	e029      	b.n	80032c6 <_dtoa_r+0x3d6>
 8003272:	2702      	movs	r7, #2
 8003274:	e7f2      	b.n	800325c <_dtoa_r+0x36c>
 8003276:	07e1      	lsls	r1, r4, #31
 8003278:	d508      	bpl.n	800328c <_dtoa_r+0x39c>
 800327a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800327e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003282:	f7fd f929 	bl	80004d8 <__aeabi_dmul>
 8003286:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800328a:	3701      	adds	r7, #1
 800328c:	1064      	asrs	r4, r4, #1
 800328e:	3608      	adds	r6, #8
 8003290:	e7e5      	b.n	800325e <_dtoa_r+0x36e>
 8003292:	f000 80a5 	beq.w	80033e0 <_dtoa_r+0x4f0>
 8003296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800329a:	f1c9 0400 	rsb	r4, r9, #0
 800329e:	4b7d      	ldr	r3, [pc, #500]	; (8003494 <_dtoa_r+0x5a4>)
 80032a0:	f004 020f 	and.w	r2, r4, #15
 80032a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f7fd f914 	bl	80004d8 <__aeabi_dmul>
 80032b0:	2702      	movs	r7, #2
 80032b2:	2300      	movs	r3, #0
 80032b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80032b8:	4e77      	ldr	r6, [pc, #476]	; (8003498 <_dtoa_r+0x5a8>)
 80032ba:	1124      	asrs	r4, r4, #4
 80032bc:	2c00      	cmp	r4, #0
 80032be:	f040 8084 	bne.w	80033ca <_dtoa_r+0x4da>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1d2      	bne.n	800326c <_dtoa_r+0x37c>
 80032c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 808b 	beq.w	80033e4 <_dtoa_r+0x4f4>
 80032ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80032d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80032d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80032da:	2200      	movs	r2, #0
 80032dc:	4b6f      	ldr	r3, [pc, #444]	; (800349c <_dtoa_r+0x5ac>)
 80032de:	f7fd fb6d 	bl	80009bc <__aeabi_dcmplt>
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d07e      	beq.n	80033e4 <_dtoa_r+0x4f4>
 80032e6:	9b02      	ldr	r3, [sp, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d07b      	beq.n	80033e4 <_dtoa_r+0x4f4>
 80032ec:	f1bb 0f00 	cmp.w	fp, #0
 80032f0:	dd38      	ble.n	8003364 <_dtoa_r+0x474>
 80032f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80032f6:	2200      	movs	r2, #0
 80032f8:	4b69      	ldr	r3, [pc, #420]	; (80034a0 <_dtoa_r+0x5b0>)
 80032fa:	f7fd f8ed 	bl	80004d8 <__aeabi_dmul>
 80032fe:	465c      	mov	r4, fp
 8003300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003304:	f109 38ff 	add.w	r8, r9, #4294967295
 8003308:	3701      	adds	r7, #1
 800330a:	4638      	mov	r0, r7
 800330c:	f7fd f87a 	bl	8000404 <__aeabi_i2d>
 8003310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003314:	f7fd f8e0 	bl	80004d8 <__aeabi_dmul>
 8003318:	2200      	movs	r2, #0
 800331a:	4b62      	ldr	r3, [pc, #392]	; (80034a4 <_dtoa_r+0x5b4>)
 800331c:	f7fc ff26 	bl	800016c <__adddf3>
 8003320:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003324:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003328:	9611      	str	r6, [sp, #68]	; 0x44
 800332a:	2c00      	cmp	r4, #0
 800332c:	d15d      	bne.n	80033ea <_dtoa_r+0x4fa>
 800332e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003332:	2200      	movs	r2, #0
 8003334:	4b5c      	ldr	r3, [pc, #368]	; (80034a8 <_dtoa_r+0x5b8>)
 8003336:	f7fc ff17 	bl	8000168 <__aeabi_dsub>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003342:	4633      	mov	r3, r6
 8003344:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003346:	f7fd fb57 	bl	80009f8 <__aeabi_dcmpgt>
 800334a:	2800      	cmp	r0, #0
 800334c:	f040 829e 	bne.w	800388c <_dtoa_r+0x99c>
 8003350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003354:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003356:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800335a:	f7fd fb2f 	bl	80009bc <__aeabi_dcmplt>
 800335e:	2800      	cmp	r0, #0
 8003360:	f040 8292 	bne.w	8003888 <_dtoa_r+0x998>
 8003364:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003368:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800336c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800336e:	2b00      	cmp	r3, #0
 8003370:	f2c0 8153 	blt.w	800361a <_dtoa_r+0x72a>
 8003374:	f1b9 0f0e 	cmp.w	r9, #14
 8003378:	f300 814f 	bgt.w	800361a <_dtoa_r+0x72a>
 800337c:	4b45      	ldr	r3, [pc, #276]	; (8003494 <_dtoa_r+0x5a4>)
 800337e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003382:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003386:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800338a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800338c:	2b00      	cmp	r3, #0
 800338e:	f280 80db 	bge.w	8003548 <_dtoa_r+0x658>
 8003392:	9b02      	ldr	r3, [sp, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f300 80d7 	bgt.w	8003548 <_dtoa_r+0x658>
 800339a:	f040 8274 	bne.w	8003886 <_dtoa_r+0x996>
 800339e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033a2:	2200      	movs	r2, #0
 80033a4:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <_dtoa_r+0x5b8>)
 80033a6:	f7fd f897 	bl	80004d8 <__aeabi_dmul>
 80033aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033ae:	f7fd fb19 	bl	80009e4 <__aeabi_dcmpge>
 80033b2:	9c02      	ldr	r4, [sp, #8]
 80033b4:	4626      	mov	r6, r4
 80033b6:	2800      	cmp	r0, #0
 80033b8:	f040 824a 	bne.w	8003850 <_dtoa_r+0x960>
 80033bc:	2331      	movs	r3, #49	; 0x31
 80033be:	9f08      	ldr	r7, [sp, #32]
 80033c0:	f109 0901 	add.w	r9, r9, #1
 80033c4:	f807 3b01 	strb.w	r3, [r7], #1
 80033c8:	e246      	b.n	8003858 <_dtoa_r+0x968>
 80033ca:	07e2      	lsls	r2, r4, #31
 80033cc:	d505      	bpl.n	80033da <_dtoa_r+0x4ea>
 80033ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80033d2:	f7fd f881 	bl	80004d8 <__aeabi_dmul>
 80033d6:	2301      	movs	r3, #1
 80033d8:	3701      	adds	r7, #1
 80033da:	1064      	asrs	r4, r4, #1
 80033dc:	3608      	adds	r6, #8
 80033de:	e76d      	b.n	80032bc <_dtoa_r+0x3cc>
 80033e0:	2702      	movs	r7, #2
 80033e2:	e770      	b.n	80032c6 <_dtoa_r+0x3d6>
 80033e4:	46c8      	mov	r8, r9
 80033e6:	9c02      	ldr	r4, [sp, #8]
 80033e8:	e78f      	b.n	800330a <_dtoa_r+0x41a>
 80033ea:	9908      	ldr	r1, [sp, #32]
 80033ec:	4b29      	ldr	r3, [pc, #164]	; (8003494 <_dtoa_r+0x5a4>)
 80033ee:	4421      	add	r1, r4
 80033f0:	9112      	str	r1, [sp, #72]	; 0x48
 80033f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80033f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80033fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003400:	2900      	cmp	r1, #0
 8003402:	d055      	beq.n	80034b0 <_dtoa_r+0x5c0>
 8003404:	2000      	movs	r0, #0
 8003406:	4929      	ldr	r1, [pc, #164]	; (80034ac <_dtoa_r+0x5bc>)
 8003408:	f7fd f990 	bl	800072c <__aeabi_ddiv>
 800340c:	463b      	mov	r3, r7
 800340e:	4632      	mov	r2, r6
 8003410:	f7fc feaa 	bl	8000168 <__aeabi_dsub>
 8003414:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003418:	9f08      	ldr	r7, [sp, #32]
 800341a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800341e:	f7fd fb0b 	bl	8000a38 <__aeabi_d2iz>
 8003422:	4604      	mov	r4, r0
 8003424:	f7fc ffee 	bl	8000404 <__aeabi_i2d>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003430:	f7fc fe9a 	bl	8000168 <__aeabi_dsub>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	3430      	adds	r4, #48	; 0x30
 800343a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800343e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003442:	f807 4b01 	strb.w	r4, [r7], #1
 8003446:	f7fd fab9 	bl	80009bc <__aeabi_dcmplt>
 800344a:	2800      	cmp	r0, #0
 800344c:	d174      	bne.n	8003538 <_dtoa_r+0x648>
 800344e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003452:	2000      	movs	r0, #0
 8003454:	4911      	ldr	r1, [pc, #68]	; (800349c <_dtoa_r+0x5ac>)
 8003456:	f7fc fe87 	bl	8000168 <__aeabi_dsub>
 800345a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800345e:	f7fd faad 	bl	80009bc <__aeabi_dcmplt>
 8003462:	2800      	cmp	r0, #0
 8003464:	f040 80b6 	bne.w	80035d4 <_dtoa_r+0x6e4>
 8003468:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800346a:	429f      	cmp	r7, r3
 800346c:	f43f af7a 	beq.w	8003364 <_dtoa_r+0x474>
 8003470:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003474:	2200      	movs	r2, #0
 8003476:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <_dtoa_r+0x5b0>)
 8003478:	f7fd f82e 	bl	80004d8 <__aeabi_dmul>
 800347c:	2200      	movs	r2, #0
 800347e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <_dtoa_r+0x5b0>)
 8003488:	f7fd f826 	bl	80004d8 <__aeabi_dmul>
 800348c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003490:	e7c3      	b.n	800341a <_dtoa_r+0x52a>
 8003492:	bf00      	nop
 8003494:	080050d0 	.word	0x080050d0
 8003498:	080050a8 	.word	0x080050a8
 800349c:	3ff00000 	.word	0x3ff00000
 80034a0:	40240000 	.word	0x40240000
 80034a4:	401c0000 	.word	0x401c0000
 80034a8:	40140000 	.word	0x40140000
 80034ac:	3fe00000 	.word	0x3fe00000
 80034b0:	4630      	mov	r0, r6
 80034b2:	4639      	mov	r1, r7
 80034b4:	f7fd f810 	bl	80004d8 <__aeabi_dmul>
 80034b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80034ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80034be:	9c08      	ldr	r4, [sp, #32]
 80034c0:	9314      	str	r3, [sp, #80]	; 0x50
 80034c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034c6:	f7fd fab7 	bl	8000a38 <__aeabi_d2iz>
 80034ca:	9015      	str	r0, [sp, #84]	; 0x54
 80034cc:	f7fc ff9a 	bl	8000404 <__aeabi_i2d>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034d8:	f7fc fe46 	bl	8000168 <__aeabi_dsub>
 80034dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80034de:	4606      	mov	r6, r0
 80034e0:	3330      	adds	r3, #48	; 0x30
 80034e2:	f804 3b01 	strb.w	r3, [r4], #1
 80034e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80034e8:	460f      	mov	r7, r1
 80034ea:	429c      	cmp	r4, r3
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	d124      	bne.n	800353c <_dtoa_r+0x64c>
 80034f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80034f6:	4bb3      	ldr	r3, [pc, #716]	; (80037c4 <_dtoa_r+0x8d4>)
 80034f8:	f7fc fe38 	bl	800016c <__adddf3>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4630      	mov	r0, r6
 8003502:	4639      	mov	r1, r7
 8003504:	f7fd fa78 	bl	80009f8 <__aeabi_dcmpgt>
 8003508:	2800      	cmp	r0, #0
 800350a:	d162      	bne.n	80035d2 <_dtoa_r+0x6e2>
 800350c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003510:	2000      	movs	r0, #0
 8003512:	49ac      	ldr	r1, [pc, #688]	; (80037c4 <_dtoa_r+0x8d4>)
 8003514:	f7fc fe28 	bl	8000168 <__aeabi_dsub>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4630      	mov	r0, r6
 800351e:	4639      	mov	r1, r7
 8003520:	f7fd fa4c 	bl	80009bc <__aeabi_dcmplt>
 8003524:	2800      	cmp	r0, #0
 8003526:	f43f af1d 	beq.w	8003364 <_dtoa_r+0x474>
 800352a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800352c:	1e7b      	subs	r3, r7, #1
 800352e:	9314      	str	r3, [sp, #80]	; 0x50
 8003530:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003534:	2b30      	cmp	r3, #48	; 0x30
 8003536:	d0f8      	beq.n	800352a <_dtoa_r+0x63a>
 8003538:	46c1      	mov	r9, r8
 800353a:	e03a      	b.n	80035b2 <_dtoa_r+0x6c2>
 800353c:	4ba2      	ldr	r3, [pc, #648]	; (80037c8 <_dtoa_r+0x8d8>)
 800353e:	f7fc ffcb 	bl	80004d8 <__aeabi_dmul>
 8003542:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003546:	e7bc      	b.n	80034c2 <_dtoa_r+0x5d2>
 8003548:	9f08      	ldr	r7, [sp, #32]
 800354a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800354e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003552:	f7fd f8eb 	bl	800072c <__aeabi_ddiv>
 8003556:	f7fd fa6f 	bl	8000a38 <__aeabi_d2iz>
 800355a:	4604      	mov	r4, r0
 800355c:	f7fc ff52 	bl	8000404 <__aeabi_i2d>
 8003560:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003564:	f7fc ffb8 	bl	80004d8 <__aeabi_dmul>
 8003568:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800356c:	460b      	mov	r3, r1
 800356e:	4602      	mov	r2, r0
 8003570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003574:	f7fc fdf8 	bl	8000168 <__aeabi_dsub>
 8003578:	f807 6b01 	strb.w	r6, [r7], #1
 800357c:	9e08      	ldr	r6, [sp, #32]
 800357e:	9b02      	ldr	r3, [sp, #8]
 8003580:	1bbe      	subs	r6, r7, r6
 8003582:	42b3      	cmp	r3, r6
 8003584:	d13a      	bne.n	80035fc <_dtoa_r+0x70c>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	f7fc fdef 	bl	800016c <__adddf3>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003596:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800359a:	f7fd fa2d 	bl	80009f8 <__aeabi_dcmpgt>
 800359e:	bb58      	cbnz	r0, 80035f8 <_dtoa_r+0x708>
 80035a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80035a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035a8:	f7fd f9fe 	bl	80009a8 <__aeabi_dcmpeq>
 80035ac:	b108      	cbz	r0, 80035b2 <_dtoa_r+0x6c2>
 80035ae:	07e1      	lsls	r1, r4, #31
 80035b0:	d422      	bmi.n	80035f8 <_dtoa_r+0x708>
 80035b2:	4628      	mov	r0, r5
 80035b4:	4651      	mov	r1, sl
 80035b6:	f000 faf1 	bl	8003b9c <_Bfree>
 80035ba:	2300      	movs	r3, #0
 80035bc:	703b      	strb	r3, [r7, #0]
 80035be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80035c0:	f109 0001 	add.w	r0, r9, #1
 80035c4:	6018      	str	r0, [r3, #0]
 80035c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f43f acdf 	beq.w	8002f8c <_dtoa_r+0x9c>
 80035ce:	601f      	str	r7, [r3, #0]
 80035d0:	e4dc      	b.n	8002f8c <_dtoa_r+0x9c>
 80035d2:	4627      	mov	r7, r4
 80035d4:	463b      	mov	r3, r7
 80035d6:	461f      	mov	r7, r3
 80035d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80035dc:	2a39      	cmp	r2, #57	; 0x39
 80035de:	d107      	bne.n	80035f0 <_dtoa_r+0x700>
 80035e0:	9a08      	ldr	r2, [sp, #32]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d1f7      	bne.n	80035d6 <_dtoa_r+0x6e6>
 80035e6:	2230      	movs	r2, #48	; 0x30
 80035e8:	9908      	ldr	r1, [sp, #32]
 80035ea:	f108 0801 	add.w	r8, r8, #1
 80035ee:	700a      	strb	r2, [r1, #0]
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	3201      	adds	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e79f      	b.n	8003538 <_dtoa_r+0x648>
 80035f8:	46c8      	mov	r8, r9
 80035fa:	e7eb      	b.n	80035d4 <_dtoa_r+0x6e4>
 80035fc:	2200      	movs	r2, #0
 80035fe:	4b72      	ldr	r3, [pc, #456]	; (80037c8 <_dtoa_r+0x8d8>)
 8003600:	f7fc ff6a 	bl	80004d8 <__aeabi_dmul>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800360c:	2200      	movs	r2, #0
 800360e:	2300      	movs	r3, #0
 8003610:	f7fd f9ca 	bl	80009a8 <__aeabi_dcmpeq>
 8003614:	2800      	cmp	r0, #0
 8003616:	d098      	beq.n	800354a <_dtoa_r+0x65a>
 8003618:	e7cb      	b.n	80035b2 <_dtoa_r+0x6c2>
 800361a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800361c:	2a00      	cmp	r2, #0
 800361e:	f000 80cd 	beq.w	80037bc <_dtoa_r+0x8cc>
 8003622:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003624:	2a01      	cmp	r2, #1
 8003626:	f300 80af 	bgt.w	8003788 <_dtoa_r+0x898>
 800362a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800362c:	2a00      	cmp	r2, #0
 800362e:	f000 80a7 	beq.w	8003780 <_dtoa_r+0x890>
 8003632:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003636:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003638:	9f06      	ldr	r7, [sp, #24]
 800363a:	9a06      	ldr	r2, [sp, #24]
 800363c:	2101      	movs	r1, #1
 800363e:	441a      	add	r2, r3
 8003640:	9206      	str	r2, [sp, #24]
 8003642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003644:	4628      	mov	r0, r5
 8003646:	441a      	add	r2, r3
 8003648:	9209      	str	r2, [sp, #36]	; 0x24
 800364a:	f000 fb61 	bl	8003d10 <__i2b>
 800364e:	4606      	mov	r6, r0
 8003650:	2f00      	cmp	r7, #0
 8003652:	dd0c      	ble.n	800366e <_dtoa_r+0x77e>
 8003654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003656:	2b00      	cmp	r3, #0
 8003658:	dd09      	ble.n	800366e <_dtoa_r+0x77e>
 800365a:	42bb      	cmp	r3, r7
 800365c:	bfa8      	it	ge
 800365e:	463b      	movge	r3, r7
 8003660:	9a06      	ldr	r2, [sp, #24]
 8003662:	1aff      	subs	r7, r7, r3
 8003664:	1ad2      	subs	r2, r2, r3
 8003666:	9206      	str	r2, [sp, #24]
 8003668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	9309      	str	r3, [sp, #36]	; 0x24
 800366e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003670:	b1f3      	cbz	r3, 80036b0 <_dtoa_r+0x7c0>
 8003672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80a9 	beq.w	80037cc <_dtoa_r+0x8dc>
 800367a:	2c00      	cmp	r4, #0
 800367c:	dd10      	ble.n	80036a0 <_dtoa_r+0x7b0>
 800367e:	4631      	mov	r1, r6
 8003680:	4622      	mov	r2, r4
 8003682:	4628      	mov	r0, r5
 8003684:	f000 fbfe 	bl	8003e84 <__pow5mult>
 8003688:	4652      	mov	r2, sl
 800368a:	4601      	mov	r1, r0
 800368c:	4606      	mov	r6, r0
 800368e:	4628      	mov	r0, r5
 8003690:	f000 fb54 	bl	8003d3c <__multiply>
 8003694:	4680      	mov	r8, r0
 8003696:	4651      	mov	r1, sl
 8003698:	4628      	mov	r0, r5
 800369a:	f000 fa7f 	bl	8003b9c <_Bfree>
 800369e:	46c2      	mov	sl, r8
 80036a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036a2:	1b1a      	subs	r2, r3, r4
 80036a4:	d004      	beq.n	80036b0 <_dtoa_r+0x7c0>
 80036a6:	4651      	mov	r1, sl
 80036a8:	4628      	mov	r0, r5
 80036aa:	f000 fbeb 	bl	8003e84 <__pow5mult>
 80036ae:	4682      	mov	sl, r0
 80036b0:	2101      	movs	r1, #1
 80036b2:	4628      	mov	r0, r5
 80036b4:	f000 fb2c 	bl	8003d10 <__i2b>
 80036b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036ba:	4604      	mov	r4, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f340 8087 	ble.w	80037d0 <_dtoa_r+0x8e0>
 80036c2:	461a      	mov	r2, r3
 80036c4:	4601      	mov	r1, r0
 80036c6:	4628      	mov	r0, r5
 80036c8:	f000 fbdc 	bl	8003e84 <__pow5mult>
 80036cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036ce:	4604      	mov	r4, r0
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	f340 8080 	ble.w	80037d6 <_dtoa_r+0x8e6>
 80036d6:	f04f 0800 	mov.w	r8, #0
 80036da:	6923      	ldr	r3, [r4, #16]
 80036dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80036e0:	6918      	ldr	r0, [r3, #16]
 80036e2:	f000 fac7 	bl	8003c74 <__hi0bits>
 80036e6:	f1c0 0020 	rsb	r0, r0, #32
 80036ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ec:	4418      	add	r0, r3
 80036ee:	f010 001f 	ands.w	r0, r0, #31
 80036f2:	f000 8092 	beq.w	800381a <_dtoa_r+0x92a>
 80036f6:	f1c0 0320 	rsb	r3, r0, #32
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	f340 808a 	ble.w	8003814 <_dtoa_r+0x924>
 8003700:	f1c0 001c 	rsb	r0, r0, #28
 8003704:	9b06      	ldr	r3, [sp, #24]
 8003706:	4407      	add	r7, r0
 8003708:	4403      	add	r3, r0
 800370a:	9306      	str	r3, [sp, #24]
 800370c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800370e:	4403      	add	r3, r0
 8003710:	9309      	str	r3, [sp, #36]	; 0x24
 8003712:	9b06      	ldr	r3, [sp, #24]
 8003714:	2b00      	cmp	r3, #0
 8003716:	dd05      	ble.n	8003724 <_dtoa_r+0x834>
 8003718:	4651      	mov	r1, sl
 800371a:	461a      	mov	r2, r3
 800371c:	4628      	mov	r0, r5
 800371e:	f000 fc0b 	bl	8003f38 <__lshift>
 8003722:	4682      	mov	sl, r0
 8003724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	dd05      	ble.n	8003736 <_dtoa_r+0x846>
 800372a:	4621      	mov	r1, r4
 800372c:	461a      	mov	r2, r3
 800372e:	4628      	mov	r0, r5
 8003730:	f000 fc02 	bl	8003f38 <__lshift>
 8003734:	4604      	mov	r4, r0
 8003736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d070      	beq.n	800381e <_dtoa_r+0x92e>
 800373c:	4621      	mov	r1, r4
 800373e:	4650      	mov	r0, sl
 8003740:	f000 fc66 	bl	8004010 <__mcmp>
 8003744:	2800      	cmp	r0, #0
 8003746:	da6a      	bge.n	800381e <_dtoa_r+0x92e>
 8003748:	2300      	movs	r3, #0
 800374a:	4651      	mov	r1, sl
 800374c:	220a      	movs	r2, #10
 800374e:	4628      	mov	r0, r5
 8003750:	f000 fa46 	bl	8003be0 <__multadd>
 8003754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003756:	4682      	mov	sl, r0
 8003758:	f109 39ff 	add.w	r9, r9, #4294967295
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8193 	beq.w	8003a88 <_dtoa_r+0xb98>
 8003762:	4631      	mov	r1, r6
 8003764:	2300      	movs	r3, #0
 8003766:	220a      	movs	r2, #10
 8003768:	4628      	mov	r0, r5
 800376a:	f000 fa39 	bl	8003be0 <__multadd>
 800376e:	f1bb 0f00 	cmp.w	fp, #0
 8003772:	4606      	mov	r6, r0
 8003774:	f300 8093 	bgt.w	800389e <_dtoa_r+0x9ae>
 8003778:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800377a:	2b02      	cmp	r3, #2
 800377c:	dc57      	bgt.n	800382e <_dtoa_r+0x93e>
 800377e:	e08e      	b.n	800389e <_dtoa_r+0x9ae>
 8003780:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003782:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003786:	e756      	b.n	8003636 <_dtoa_r+0x746>
 8003788:	9b02      	ldr	r3, [sp, #8]
 800378a:	1e5c      	subs	r4, r3, #1
 800378c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800378e:	42a3      	cmp	r3, r4
 8003790:	bfb7      	itett	lt
 8003792:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003794:	1b1c      	subge	r4, r3, r4
 8003796:	1ae2      	sublt	r2, r4, r3
 8003798:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800379a:	bfbe      	ittt	lt
 800379c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800379e:	189b      	addlt	r3, r3, r2
 80037a0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80037a2:	9b02      	ldr	r3, [sp, #8]
 80037a4:	bfb8      	it	lt
 80037a6:	2400      	movlt	r4, #0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bfbb      	ittet	lt
 80037ac:	9b06      	ldrlt	r3, [sp, #24]
 80037ae:	9a02      	ldrlt	r2, [sp, #8]
 80037b0:	9f06      	ldrge	r7, [sp, #24]
 80037b2:	1a9f      	sublt	r7, r3, r2
 80037b4:	bfac      	ite	ge
 80037b6:	9b02      	ldrge	r3, [sp, #8]
 80037b8:	2300      	movlt	r3, #0
 80037ba:	e73e      	b.n	800363a <_dtoa_r+0x74a>
 80037bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80037be:	9f06      	ldr	r7, [sp, #24]
 80037c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80037c2:	e745      	b.n	8003650 <_dtoa_r+0x760>
 80037c4:	3fe00000 	.word	0x3fe00000
 80037c8:	40240000 	.word	0x40240000
 80037cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037ce:	e76a      	b.n	80036a6 <_dtoa_r+0x7b6>
 80037d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	dc19      	bgt.n	800380a <_dtoa_r+0x91a>
 80037d6:	9b04      	ldr	r3, [sp, #16]
 80037d8:	b9bb      	cbnz	r3, 800380a <_dtoa_r+0x91a>
 80037da:	9b05      	ldr	r3, [sp, #20]
 80037dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e0:	b99b      	cbnz	r3, 800380a <_dtoa_r+0x91a>
 80037e2:	9b05      	ldr	r3, [sp, #20]
 80037e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037e8:	0d1b      	lsrs	r3, r3, #20
 80037ea:	051b      	lsls	r3, r3, #20
 80037ec:	b183      	cbz	r3, 8003810 <_dtoa_r+0x920>
 80037ee:	f04f 0801 	mov.w	r8, #1
 80037f2:	9b06      	ldr	r3, [sp, #24]
 80037f4:	3301      	adds	r3, #1
 80037f6:	9306      	str	r3, [sp, #24]
 80037f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037fa:	3301      	adds	r3, #1
 80037fc:	9309      	str	r3, [sp, #36]	; 0x24
 80037fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003800:	2b00      	cmp	r3, #0
 8003802:	f47f af6a 	bne.w	80036da <_dtoa_r+0x7ea>
 8003806:	2001      	movs	r0, #1
 8003808:	e76f      	b.n	80036ea <_dtoa_r+0x7fa>
 800380a:	f04f 0800 	mov.w	r8, #0
 800380e:	e7f6      	b.n	80037fe <_dtoa_r+0x90e>
 8003810:	4698      	mov	r8, r3
 8003812:	e7f4      	b.n	80037fe <_dtoa_r+0x90e>
 8003814:	f43f af7d 	beq.w	8003712 <_dtoa_r+0x822>
 8003818:	4618      	mov	r0, r3
 800381a:	301c      	adds	r0, #28
 800381c:	e772      	b.n	8003704 <_dtoa_r+0x814>
 800381e:	9b02      	ldr	r3, [sp, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	dc36      	bgt.n	8003892 <_dtoa_r+0x9a2>
 8003824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003826:	2b02      	cmp	r3, #2
 8003828:	dd33      	ble.n	8003892 <_dtoa_r+0x9a2>
 800382a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800382e:	f1bb 0f00 	cmp.w	fp, #0
 8003832:	d10d      	bne.n	8003850 <_dtoa_r+0x960>
 8003834:	4621      	mov	r1, r4
 8003836:	465b      	mov	r3, fp
 8003838:	2205      	movs	r2, #5
 800383a:	4628      	mov	r0, r5
 800383c:	f000 f9d0 	bl	8003be0 <__multadd>
 8003840:	4601      	mov	r1, r0
 8003842:	4604      	mov	r4, r0
 8003844:	4650      	mov	r0, sl
 8003846:	f000 fbe3 	bl	8004010 <__mcmp>
 800384a:	2800      	cmp	r0, #0
 800384c:	f73f adb6 	bgt.w	80033bc <_dtoa_r+0x4cc>
 8003850:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003852:	9f08      	ldr	r7, [sp, #32]
 8003854:	ea6f 0903 	mvn.w	r9, r3
 8003858:	f04f 0800 	mov.w	r8, #0
 800385c:	4621      	mov	r1, r4
 800385e:	4628      	mov	r0, r5
 8003860:	f000 f99c 	bl	8003b9c <_Bfree>
 8003864:	2e00      	cmp	r6, #0
 8003866:	f43f aea4 	beq.w	80035b2 <_dtoa_r+0x6c2>
 800386a:	f1b8 0f00 	cmp.w	r8, #0
 800386e:	d005      	beq.n	800387c <_dtoa_r+0x98c>
 8003870:	45b0      	cmp	r8, r6
 8003872:	d003      	beq.n	800387c <_dtoa_r+0x98c>
 8003874:	4641      	mov	r1, r8
 8003876:	4628      	mov	r0, r5
 8003878:	f000 f990 	bl	8003b9c <_Bfree>
 800387c:	4631      	mov	r1, r6
 800387e:	4628      	mov	r0, r5
 8003880:	f000 f98c 	bl	8003b9c <_Bfree>
 8003884:	e695      	b.n	80035b2 <_dtoa_r+0x6c2>
 8003886:	2400      	movs	r4, #0
 8003888:	4626      	mov	r6, r4
 800388a:	e7e1      	b.n	8003850 <_dtoa_r+0x960>
 800388c:	46c1      	mov	r9, r8
 800388e:	4626      	mov	r6, r4
 8003890:	e594      	b.n	80033bc <_dtoa_r+0x4cc>
 8003892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003894:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80fc 	beq.w	8003a96 <_dtoa_r+0xba6>
 800389e:	2f00      	cmp	r7, #0
 80038a0:	dd05      	ble.n	80038ae <_dtoa_r+0x9be>
 80038a2:	4631      	mov	r1, r6
 80038a4:	463a      	mov	r2, r7
 80038a6:	4628      	mov	r0, r5
 80038a8:	f000 fb46 	bl	8003f38 <__lshift>
 80038ac:	4606      	mov	r6, r0
 80038ae:	f1b8 0f00 	cmp.w	r8, #0
 80038b2:	d05c      	beq.n	800396e <_dtoa_r+0xa7e>
 80038b4:	4628      	mov	r0, r5
 80038b6:	6871      	ldr	r1, [r6, #4]
 80038b8:	f000 f930 	bl	8003b1c <_Balloc>
 80038bc:	4607      	mov	r7, r0
 80038be:	b928      	cbnz	r0, 80038cc <_dtoa_r+0x9dc>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80038c6:	4b7e      	ldr	r3, [pc, #504]	; (8003ac0 <_dtoa_r+0xbd0>)
 80038c8:	f7ff bb26 	b.w	8002f18 <_dtoa_r+0x28>
 80038cc:	6932      	ldr	r2, [r6, #16]
 80038ce:	f106 010c 	add.w	r1, r6, #12
 80038d2:	3202      	adds	r2, #2
 80038d4:	0092      	lsls	r2, r2, #2
 80038d6:	300c      	adds	r0, #12
 80038d8:	f000 f912 	bl	8003b00 <memcpy>
 80038dc:	2201      	movs	r2, #1
 80038de:	4639      	mov	r1, r7
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 fb29 	bl	8003f38 <__lshift>
 80038e6:	46b0      	mov	r8, r6
 80038e8:	4606      	mov	r6, r0
 80038ea:	9b08      	ldr	r3, [sp, #32]
 80038ec:	3301      	adds	r3, #1
 80038ee:	9302      	str	r3, [sp, #8]
 80038f0:	9b08      	ldr	r3, [sp, #32]
 80038f2:	445b      	add	r3, fp
 80038f4:	930a      	str	r3, [sp, #40]	; 0x28
 80038f6:	9b04      	ldr	r3, [sp, #16]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	9309      	str	r3, [sp, #36]	; 0x24
 80038fe:	9b02      	ldr	r3, [sp, #8]
 8003900:	4621      	mov	r1, r4
 8003902:	4650      	mov	r0, sl
 8003904:	f103 3bff 	add.w	fp, r3, #4294967295
 8003908:	f7ff fa64 	bl	8002dd4 <quorem>
 800390c:	4603      	mov	r3, r0
 800390e:	4641      	mov	r1, r8
 8003910:	3330      	adds	r3, #48	; 0x30
 8003912:	9004      	str	r0, [sp, #16]
 8003914:	4650      	mov	r0, sl
 8003916:	930b      	str	r3, [sp, #44]	; 0x2c
 8003918:	f000 fb7a 	bl	8004010 <__mcmp>
 800391c:	4632      	mov	r2, r6
 800391e:	9006      	str	r0, [sp, #24]
 8003920:	4621      	mov	r1, r4
 8003922:	4628      	mov	r0, r5
 8003924:	f000 fb90 	bl	8004048 <__mdiff>
 8003928:	68c2      	ldr	r2, [r0, #12]
 800392a:	4607      	mov	r7, r0
 800392c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800392e:	bb02      	cbnz	r2, 8003972 <_dtoa_r+0xa82>
 8003930:	4601      	mov	r1, r0
 8003932:	4650      	mov	r0, sl
 8003934:	f000 fb6c 	bl	8004010 <__mcmp>
 8003938:	4602      	mov	r2, r0
 800393a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800393c:	4639      	mov	r1, r7
 800393e:	4628      	mov	r0, r5
 8003940:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003944:	f000 f92a 	bl	8003b9c <_Bfree>
 8003948:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800394a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800394c:	9f02      	ldr	r7, [sp, #8]
 800394e:	ea43 0102 	orr.w	r1, r3, r2
 8003952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003954:	430b      	orrs	r3, r1
 8003956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003958:	d10d      	bne.n	8003976 <_dtoa_r+0xa86>
 800395a:	2b39      	cmp	r3, #57	; 0x39
 800395c:	d027      	beq.n	80039ae <_dtoa_r+0xabe>
 800395e:	9a06      	ldr	r2, [sp, #24]
 8003960:	2a00      	cmp	r2, #0
 8003962:	dd01      	ble.n	8003968 <_dtoa_r+0xa78>
 8003964:	9b04      	ldr	r3, [sp, #16]
 8003966:	3331      	adds	r3, #49	; 0x31
 8003968:	f88b 3000 	strb.w	r3, [fp]
 800396c:	e776      	b.n	800385c <_dtoa_r+0x96c>
 800396e:	4630      	mov	r0, r6
 8003970:	e7b9      	b.n	80038e6 <_dtoa_r+0x9f6>
 8003972:	2201      	movs	r2, #1
 8003974:	e7e2      	b.n	800393c <_dtoa_r+0xa4c>
 8003976:	9906      	ldr	r1, [sp, #24]
 8003978:	2900      	cmp	r1, #0
 800397a:	db04      	blt.n	8003986 <_dtoa_r+0xa96>
 800397c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800397e:	4301      	orrs	r1, r0
 8003980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003982:	4301      	orrs	r1, r0
 8003984:	d120      	bne.n	80039c8 <_dtoa_r+0xad8>
 8003986:	2a00      	cmp	r2, #0
 8003988:	ddee      	ble.n	8003968 <_dtoa_r+0xa78>
 800398a:	4651      	mov	r1, sl
 800398c:	2201      	movs	r2, #1
 800398e:	4628      	mov	r0, r5
 8003990:	9302      	str	r3, [sp, #8]
 8003992:	f000 fad1 	bl	8003f38 <__lshift>
 8003996:	4621      	mov	r1, r4
 8003998:	4682      	mov	sl, r0
 800399a:	f000 fb39 	bl	8004010 <__mcmp>
 800399e:	2800      	cmp	r0, #0
 80039a0:	9b02      	ldr	r3, [sp, #8]
 80039a2:	dc02      	bgt.n	80039aa <_dtoa_r+0xaba>
 80039a4:	d1e0      	bne.n	8003968 <_dtoa_r+0xa78>
 80039a6:	07da      	lsls	r2, r3, #31
 80039a8:	d5de      	bpl.n	8003968 <_dtoa_r+0xa78>
 80039aa:	2b39      	cmp	r3, #57	; 0x39
 80039ac:	d1da      	bne.n	8003964 <_dtoa_r+0xa74>
 80039ae:	2339      	movs	r3, #57	; 0x39
 80039b0:	f88b 3000 	strb.w	r3, [fp]
 80039b4:	463b      	mov	r3, r7
 80039b6:	461f      	mov	r7, r3
 80039b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80039bc:	3b01      	subs	r3, #1
 80039be:	2a39      	cmp	r2, #57	; 0x39
 80039c0:	d050      	beq.n	8003a64 <_dtoa_r+0xb74>
 80039c2:	3201      	adds	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	e749      	b.n	800385c <_dtoa_r+0x96c>
 80039c8:	2a00      	cmp	r2, #0
 80039ca:	dd03      	ble.n	80039d4 <_dtoa_r+0xae4>
 80039cc:	2b39      	cmp	r3, #57	; 0x39
 80039ce:	d0ee      	beq.n	80039ae <_dtoa_r+0xabe>
 80039d0:	3301      	adds	r3, #1
 80039d2:	e7c9      	b.n	8003968 <_dtoa_r+0xa78>
 80039d4:	9a02      	ldr	r2, [sp, #8]
 80039d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80039d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80039dc:	428a      	cmp	r2, r1
 80039de:	d02a      	beq.n	8003a36 <_dtoa_r+0xb46>
 80039e0:	4651      	mov	r1, sl
 80039e2:	2300      	movs	r3, #0
 80039e4:	220a      	movs	r2, #10
 80039e6:	4628      	mov	r0, r5
 80039e8:	f000 f8fa 	bl	8003be0 <__multadd>
 80039ec:	45b0      	cmp	r8, r6
 80039ee:	4682      	mov	sl, r0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	f04f 020a 	mov.w	r2, #10
 80039f8:	4641      	mov	r1, r8
 80039fa:	4628      	mov	r0, r5
 80039fc:	d107      	bne.n	8003a0e <_dtoa_r+0xb1e>
 80039fe:	f000 f8ef 	bl	8003be0 <__multadd>
 8003a02:	4680      	mov	r8, r0
 8003a04:	4606      	mov	r6, r0
 8003a06:	9b02      	ldr	r3, [sp, #8]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	9302      	str	r3, [sp, #8]
 8003a0c:	e777      	b.n	80038fe <_dtoa_r+0xa0e>
 8003a0e:	f000 f8e7 	bl	8003be0 <__multadd>
 8003a12:	4631      	mov	r1, r6
 8003a14:	4680      	mov	r8, r0
 8003a16:	2300      	movs	r3, #0
 8003a18:	220a      	movs	r2, #10
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f000 f8e0 	bl	8003be0 <__multadd>
 8003a20:	4606      	mov	r6, r0
 8003a22:	e7f0      	b.n	8003a06 <_dtoa_r+0xb16>
 8003a24:	f1bb 0f00 	cmp.w	fp, #0
 8003a28:	bfcc      	ite	gt
 8003a2a:	465f      	movgt	r7, fp
 8003a2c:	2701      	movle	r7, #1
 8003a2e:	f04f 0800 	mov.w	r8, #0
 8003a32:	9a08      	ldr	r2, [sp, #32]
 8003a34:	4417      	add	r7, r2
 8003a36:	4651      	mov	r1, sl
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	9302      	str	r3, [sp, #8]
 8003a3e:	f000 fa7b 	bl	8003f38 <__lshift>
 8003a42:	4621      	mov	r1, r4
 8003a44:	4682      	mov	sl, r0
 8003a46:	f000 fae3 	bl	8004010 <__mcmp>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	dcb2      	bgt.n	80039b4 <_dtoa_r+0xac4>
 8003a4e:	d102      	bne.n	8003a56 <_dtoa_r+0xb66>
 8003a50:	9b02      	ldr	r3, [sp, #8]
 8003a52:	07db      	lsls	r3, r3, #31
 8003a54:	d4ae      	bmi.n	80039b4 <_dtoa_r+0xac4>
 8003a56:	463b      	mov	r3, r7
 8003a58:	461f      	mov	r7, r3
 8003a5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003a5e:	2a30      	cmp	r2, #48	; 0x30
 8003a60:	d0fa      	beq.n	8003a58 <_dtoa_r+0xb68>
 8003a62:	e6fb      	b.n	800385c <_dtoa_r+0x96c>
 8003a64:	9a08      	ldr	r2, [sp, #32]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d1a5      	bne.n	80039b6 <_dtoa_r+0xac6>
 8003a6a:	2331      	movs	r3, #49	; 0x31
 8003a6c:	f109 0901 	add.w	r9, r9, #1
 8003a70:	7013      	strb	r3, [r2, #0]
 8003a72:	e6f3      	b.n	800385c <_dtoa_r+0x96c>
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <_dtoa_r+0xbd4>)
 8003a76:	f7ff baa7 	b.w	8002fc8 <_dtoa_r+0xd8>
 8003a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f47f aa80 	bne.w	8002f82 <_dtoa_r+0x92>
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <_dtoa_r+0xbd8>)
 8003a84:	f7ff baa0 	b.w	8002fc8 <_dtoa_r+0xd8>
 8003a88:	f1bb 0f00 	cmp.w	fp, #0
 8003a8c:	dc03      	bgt.n	8003a96 <_dtoa_r+0xba6>
 8003a8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	f73f aecc 	bgt.w	800382e <_dtoa_r+0x93e>
 8003a96:	9f08      	ldr	r7, [sp, #32]
 8003a98:	4621      	mov	r1, r4
 8003a9a:	4650      	mov	r0, sl
 8003a9c:	f7ff f99a 	bl	8002dd4 <quorem>
 8003aa0:	9a08      	ldr	r2, [sp, #32]
 8003aa2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003aa6:	f807 3b01 	strb.w	r3, [r7], #1
 8003aaa:	1aba      	subs	r2, r7, r2
 8003aac:	4593      	cmp	fp, r2
 8003aae:	ddb9      	ble.n	8003a24 <_dtoa_r+0xb34>
 8003ab0:	4651      	mov	r1, sl
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	220a      	movs	r2, #10
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f000 f892 	bl	8003be0 <__multadd>
 8003abc:	4682      	mov	sl, r0
 8003abe:	e7eb      	b.n	8003a98 <_dtoa_r+0xba8>
 8003ac0:	08005033 	.word	0x08005033
 8003ac4:	08004f8c 	.word	0x08004f8c
 8003ac8:	08004fb0 	.word	0x08004fb0

08003acc <_localeconv_r>:
 8003acc:	4800      	ldr	r0, [pc, #0]	; (8003ad0 <_localeconv_r+0x4>)
 8003ace:	4770      	bx	lr
 8003ad0:	20000154 	.word	0x20000154

08003ad4 <malloc>:
 8003ad4:	4b02      	ldr	r3, [pc, #8]	; (8003ae0 <malloc+0xc>)
 8003ad6:	4601      	mov	r1, r0
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	f000 bbfb 	b.w	80042d4 <_malloc_r>
 8003ade:	bf00      	nop
 8003ae0:	20000000 	.word	0x20000000

08003ae4 <memchr>:
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	b510      	push	{r4, lr}
 8003ae8:	b2c9      	uxtb	r1, r1
 8003aea:	4402      	add	r2, r0
 8003aec:	4293      	cmp	r3, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	d101      	bne.n	8003af6 <memchr+0x12>
 8003af2:	2000      	movs	r0, #0
 8003af4:	e003      	b.n	8003afe <memchr+0x1a>
 8003af6:	7804      	ldrb	r4, [r0, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	428c      	cmp	r4, r1
 8003afc:	d1f6      	bne.n	8003aec <memchr+0x8>
 8003afe:	bd10      	pop	{r4, pc}

08003b00 <memcpy>:
 8003b00:	440a      	add	r2, r1
 8003b02:	4291      	cmp	r1, r2
 8003b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b08:	d100      	bne.n	8003b0c <memcpy+0xc>
 8003b0a:	4770      	bx	lr
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b12:	4291      	cmp	r1, r2
 8003b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b18:	d1f9      	bne.n	8003b0e <memcpy+0xe>
 8003b1a:	bd10      	pop	{r4, pc}

08003b1c <_Balloc>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003b20:	4604      	mov	r4, r0
 8003b22:	460d      	mov	r5, r1
 8003b24:	b976      	cbnz	r6, 8003b44 <_Balloc+0x28>
 8003b26:	2010      	movs	r0, #16
 8003b28:	f7ff ffd4 	bl	8003ad4 <malloc>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6260      	str	r0, [r4, #36]	; 0x24
 8003b30:	b920      	cbnz	r0, 8003b3c <_Balloc+0x20>
 8003b32:	2166      	movs	r1, #102	; 0x66
 8003b34:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <_Balloc+0x78>)
 8003b36:	4818      	ldr	r0, [pc, #96]	; (8003b98 <_Balloc+0x7c>)
 8003b38:	f000 fc36 	bl	80043a8 <__assert_func>
 8003b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b40:	6006      	str	r6, [r0, #0]
 8003b42:	60c6      	str	r6, [r0, #12]
 8003b44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003b46:	68f3      	ldr	r3, [r6, #12]
 8003b48:	b183      	cbz	r3, 8003b6c <_Balloc+0x50>
 8003b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003b52:	b9b8      	cbnz	r0, 8003b84 <_Balloc+0x68>
 8003b54:	2101      	movs	r1, #1
 8003b56:	fa01 f605 	lsl.w	r6, r1, r5
 8003b5a:	1d72      	adds	r2, r6, #5
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	0092      	lsls	r2, r2, #2
 8003b60:	f000 fb5e 	bl	8004220 <_calloc_r>
 8003b64:	b160      	cbz	r0, 8003b80 <_Balloc+0x64>
 8003b66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003b6a:	e00e      	b.n	8003b8a <_Balloc+0x6e>
 8003b6c:	2221      	movs	r2, #33	; 0x21
 8003b6e:	2104      	movs	r1, #4
 8003b70:	4620      	mov	r0, r4
 8003b72:	f000 fb55 	bl	8004220 <_calloc_r>
 8003b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b78:	60f0      	str	r0, [r6, #12]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e4      	bne.n	8003b4a <_Balloc+0x2e>
 8003b80:	2000      	movs	r0, #0
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	6802      	ldr	r2, [r0, #0]
 8003b86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003b90:	e7f7      	b.n	8003b82 <_Balloc+0x66>
 8003b92:	bf00      	nop
 8003b94:	08004fbd 	.word	0x08004fbd
 8003b98:	08005044 	.word	0x08005044

08003b9c <_Bfree>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003ba0:	4605      	mov	r5, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	b976      	cbnz	r6, 8003bc4 <_Bfree+0x28>
 8003ba6:	2010      	movs	r0, #16
 8003ba8:	f7ff ff94 	bl	8003ad4 <malloc>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6268      	str	r0, [r5, #36]	; 0x24
 8003bb0:	b920      	cbnz	r0, 8003bbc <_Bfree+0x20>
 8003bb2:	218a      	movs	r1, #138	; 0x8a
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <_Bfree+0x3c>)
 8003bb6:	4809      	ldr	r0, [pc, #36]	; (8003bdc <_Bfree+0x40>)
 8003bb8:	f000 fbf6 	bl	80043a8 <__assert_func>
 8003bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003bc0:	6006      	str	r6, [r0, #0]
 8003bc2:	60c6      	str	r6, [r0, #12]
 8003bc4:	b13c      	cbz	r4, 8003bd6 <_Bfree+0x3a>
 8003bc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003bc8:	6862      	ldr	r2, [r4, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bd0:	6021      	str	r1, [r4, #0]
 8003bd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	08004fbd 	.word	0x08004fbd
 8003bdc:	08005044 	.word	0x08005044

08003be0 <__multadd>:
 8003be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be4:	4698      	mov	r8, r3
 8003be6:	460c      	mov	r4, r1
 8003be8:	2300      	movs	r3, #0
 8003bea:	690e      	ldr	r6, [r1, #16]
 8003bec:	4607      	mov	r7, r0
 8003bee:	f101 0014 	add.w	r0, r1, #20
 8003bf2:	6805      	ldr	r5, [r0, #0]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	b2a9      	uxth	r1, r5
 8003bf8:	fb02 8101 	mla	r1, r2, r1, r8
 8003bfc:	0c2d      	lsrs	r5, r5, #16
 8003bfe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003c02:	fb02 c505 	mla	r5, r2, r5, ip
 8003c06:	b289      	uxth	r1, r1
 8003c08:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003c0c:	429e      	cmp	r6, r3
 8003c0e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003c12:	f840 1b04 	str.w	r1, [r0], #4
 8003c16:	dcec      	bgt.n	8003bf2 <__multadd+0x12>
 8003c18:	f1b8 0f00 	cmp.w	r8, #0
 8003c1c:	d022      	beq.n	8003c64 <__multadd+0x84>
 8003c1e:	68a3      	ldr	r3, [r4, #8]
 8003c20:	42b3      	cmp	r3, r6
 8003c22:	dc19      	bgt.n	8003c58 <__multadd+0x78>
 8003c24:	6861      	ldr	r1, [r4, #4]
 8003c26:	4638      	mov	r0, r7
 8003c28:	3101      	adds	r1, #1
 8003c2a:	f7ff ff77 	bl	8003b1c <_Balloc>
 8003c2e:	4605      	mov	r5, r0
 8003c30:	b928      	cbnz	r0, 8003c3e <__multadd+0x5e>
 8003c32:	4602      	mov	r2, r0
 8003c34:	21b5      	movs	r1, #181	; 0xb5
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <__multadd+0x8c>)
 8003c38:	480d      	ldr	r0, [pc, #52]	; (8003c70 <__multadd+0x90>)
 8003c3a:	f000 fbb5 	bl	80043a8 <__assert_func>
 8003c3e:	6922      	ldr	r2, [r4, #16]
 8003c40:	f104 010c 	add.w	r1, r4, #12
 8003c44:	3202      	adds	r2, #2
 8003c46:	0092      	lsls	r2, r2, #2
 8003c48:	300c      	adds	r0, #12
 8003c4a:	f7ff ff59 	bl	8003b00 <memcpy>
 8003c4e:	4621      	mov	r1, r4
 8003c50:	4638      	mov	r0, r7
 8003c52:	f7ff ffa3 	bl	8003b9c <_Bfree>
 8003c56:	462c      	mov	r4, r5
 8003c58:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8003c5c:	3601      	adds	r6, #1
 8003c5e:	f8c3 8014 	str.w	r8, [r3, #20]
 8003c62:	6126      	str	r6, [r4, #16]
 8003c64:	4620      	mov	r0, r4
 8003c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c6a:	bf00      	nop
 8003c6c:	08005033 	.word	0x08005033
 8003c70:	08005044 	.word	0x08005044

08003c74 <__hi0bits>:
 8003c74:	0c02      	lsrs	r2, r0, #16
 8003c76:	0412      	lsls	r2, r2, #16
 8003c78:	4603      	mov	r3, r0
 8003c7a:	b9ca      	cbnz	r2, 8003cb0 <__hi0bits+0x3c>
 8003c7c:	0403      	lsls	r3, r0, #16
 8003c7e:	2010      	movs	r0, #16
 8003c80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003c84:	bf04      	itt	eq
 8003c86:	021b      	lsleq	r3, r3, #8
 8003c88:	3008      	addeq	r0, #8
 8003c8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003c8e:	bf04      	itt	eq
 8003c90:	011b      	lsleq	r3, r3, #4
 8003c92:	3004      	addeq	r0, #4
 8003c94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003c98:	bf04      	itt	eq
 8003c9a:	009b      	lsleq	r3, r3, #2
 8003c9c:	3002      	addeq	r0, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	db05      	blt.n	8003cae <__hi0bits+0x3a>
 8003ca2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003ca6:	f100 0001 	add.w	r0, r0, #1
 8003caa:	bf08      	it	eq
 8003cac:	2020      	moveq	r0, #32
 8003cae:	4770      	bx	lr
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	e7e5      	b.n	8003c80 <__hi0bits+0xc>

08003cb4 <__lo0bits>:
 8003cb4:	6803      	ldr	r3, [r0, #0]
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	f013 0007 	ands.w	r0, r3, #7
 8003cbc:	d00b      	beq.n	8003cd6 <__lo0bits+0x22>
 8003cbe:	07d9      	lsls	r1, r3, #31
 8003cc0:	d422      	bmi.n	8003d08 <__lo0bits+0x54>
 8003cc2:	0798      	lsls	r0, r3, #30
 8003cc4:	bf49      	itett	mi
 8003cc6:	085b      	lsrmi	r3, r3, #1
 8003cc8:	089b      	lsrpl	r3, r3, #2
 8003cca:	2001      	movmi	r0, #1
 8003ccc:	6013      	strmi	r3, [r2, #0]
 8003cce:	bf5c      	itt	pl
 8003cd0:	2002      	movpl	r0, #2
 8003cd2:	6013      	strpl	r3, [r2, #0]
 8003cd4:	4770      	bx	lr
 8003cd6:	b299      	uxth	r1, r3
 8003cd8:	b909      	cbnz	r1, 8003cde <__lo0bits+0x2a>
 8003cda:	2010      	movs	r0, #16
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003ce2:	bf04      	itt	eq
 8003ce4:	0a1b      	lsreq	r3, r3, #8
 8003ce6:	3008      	addeq	r0, #8
 8003ce8:	0719      	lsls	r1, r3, #28
 8003cea:	bf04      	itt	eq
 8003cec:	091b      	lsreq	r3, r3, #4
 8003cee:	3004      	addeq	r0, #4
 8003cf0:	0799      	lsls	r1, r3, #30
 8003cf2:	bf04      	itt	eq
 8003cf4:	089b      	lsreq	r3, r3, #2
 8003cf6:	3002      	addeq	r0, #2
 8003cf8:	07d9      	lsls	r1, r3, #31
 8003cfa:	d403      	bmi.n	8003d04 <__lo0bits+0x50>
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	f100 0001 	add.w	r0, r0, #1
 8003d02:	d003      	beq.n	8003d0c <__lo0bits+0x58>
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4770      	bx	lr
 8003d08:	2000      	movs	r0, #0
 8003d0a:	4770      	bx	lr
 8003d0c:	2020      	movs	r0, #32
 8003d0e:	4770      	bx	lr

08003d10 <__i2b>:
 8003d10:	b510      	push	{r4, lr}
 8003d12:	460c      	mov	r4, r1
 8003d14:	2101      	movs	r1, #1
 8003d16:	f7ff ff01 	bl	8003b1c <_Balloc>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	b928      	cbnz	r0, 8003d2a <__i2b+0x1a>
 8003d1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <__i2b+0x24>)
 8003d24:	4804      	ldr	r0, [pc, #16]	; (8003d38 <__i2b+0x28>)
 8003d26:	f000 fb3f 	bl	80043a8 <__assert_func>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	6144      	str	r4, [r0, #20]
 8003d2e:	6103      	str	r3, [r0, #16]
 8003d30:	bd10      	pop	{r4, pc}
 8003d32:	bf00      	nop
 8003d34:	08005033 	.word	0x08005033
 8003d38:	08005044 	.word	0x08005044

08003d3c <__multiply>:
 8003d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d40:	4614      	mov	r4, r2
 8003d42:	690a      	ldr	r2, [r1, #16]
 8003d44:	6923      	ldr	r3, [r4, #16]
 8003d46:	460d      	mov	r5, r1
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	bfbe      	ittt	lt
 8003d4c:	460b      	movlt	r3, r1
 8003d4e:	4625      	movlt	r5, r4
 8003d50:	461c      	movlt	r4, r3
 8003d52:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8003d56:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003d5a:	68ab      	ldr	r3, [r5, #8]
 8003d5c:	6869      	ldr	r1, [r5, #4]
 8003d5e:	eb0a 0709 	add.w	r7, sl, r9
 8003d62:	42bb      	cmp	r3, r7
 8003d64:	b085      	sub	sp, #20
 8003d66:	bfb8      	it	lt
 8003d68:	3101      	addlt	r1, #1
 8003d6a:	f7ff fed7 	bl	8003b1c <_Balloc>
 8003d6e:	b930      	cbnz	r0, 8003d7e <__multiply+0x42>
 8003d70:	4602      	mov	r2, r0
 8003d72:	f240 115d 	movw	r1, #349	; 0x15d
 8003d76:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <__multiply+0x140>)
 8003d78:	4841      	ldr	r0, [pc, #260]	; (8003e80 <__multiply+0x144>)
 8003d7a:	f000 fb15 	bl	80043a8 <__assert_func>
 8003d7e:	f100 0614 	add.w	r6, r0, #20
 8003d82:	4633      	mov	r3, r6
 8003d84:	2200      	movs	r2, #0
 8003d86:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8003d8a:	4543      	cmp	r3, r8
 8003d8c:	d31e      	bcc.n	8003dcc <__multiply+0x90>
 8003d8e:	f105 0c14 	add.w	ip, r5, #20
 8003d92:	f104 0314 	add.w	r3, r4, #20
 8003d96:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003d9a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8003d9e:	9202      	str	r2, [sp, #8]
 8003da0:	ebac 0205 	sub.w	r2, ip, r5
 8003da4:	3a15      	subs	r2, #21
 8003da6:	f022 0203 	bic.w	r2, r2, #3
 8003daa:	3204      	adds	r2, #4
 8003dac:	f105 0115 	add.w	r1, r5, #21
 8003db0:	458c      	cmp	ip, r1
 8003db2:	bf38      	it	cc
 8003db4:	2204      	movcc	r2, #4
 8003db6:	9201      	str	r2, [sp, #4]
 8003db8:	9a02      	ldr	r2, [sp, #8]
 8003dba:	9303      	str	r3, [sp, #12]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d808      	bhi.n	8003dd2 <__multiply+0x96>
 8003dc0:	2f00      	cmp	r7, #0
 8003dc2:	dc55      	bgt.n	8003e70 <__multiply+0x134>
 8003dc4:	6107      	str	r7, [r0, #16]
 8003dc6:	b005      	add	sp, #20
 8003dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dcc:	f843 2b04 	str.w	r2, [r3], #4
 8003dd0:	e7db      	b.n	8003d8a <__multiply+0x4e>
 8003dd2:	f8b3 a000 	ldrh.w	sl, [r3]
 8003dd6:	f1ba 0f00 	cmp.w	sl, #0
 8003dda:	d020      	beq.n	8003e1e <__multiply+0xe2>
 8003ddc:	46b1      	mov	r9, r6
 8003dde:	2200      	movs	r2, #0
 8003de0:	f105 0e14 	add.w	lr, r5, #20
 8003de4:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003de8:	f8d9 b000 	ldr.w	fp, [r9]
 8003dec:	b2a1      	uxth	r1, r4
 8003dee:	fa1f fb8b 	uxth.w	fp, fp
 8003df2:	fb0a b101 	mla	r1, sl, r1, fp
 8003df6:	4411      	add	r1, r2
 8003df8:	f8d9 2000 	ldr.w	r2, [r9]
 8003dfc:	0c24      	lsrs	r4, r4, #16
 8003dfe:	0c12      	lsrs	r2, r2, #16
 8003e00:	fb0a 2404 	mla	r4, sl, r4, r2
 8003e04:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8003e08:	b289      	uxth	r1, r1
 8003e0a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003e0e:	45f4      	cmp	ip, lr
 8003e10:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8003e14:	f849 1b04 	str.w	r1, [r9], #4
 8003e18:	d8e4      	bhi.n	8003de4 <__multiply+0xa8>
 8003e1a:	9901      	ldr	r1, [sp, #4]
 8003e1c:	5072      	str	r2, [r6, r1]
 8003e1e:	9a03      	ldr	r2, [sp, #12]
 8003e20:	3304      	adds	r3, #4
 8003e22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003e26:	f1b9 0f00 	cmp.w	r9, #0
 8003e2a:	d01f      	beq.n	8003e6c <__multiply+0x130>
 8003e2c:	46b6      	mov	lr, r6
 8003e2e:	f04f 0a00 	mov.w	sl, #0
 8003e32:	6834      	ldr	r4, [r6, #0]
 8003e34:	f105 0114 	add.w	r1, r5, #20
 8003e38:	880a      	ldrh	r2, [r1, #0]
 8003e3a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003e3e:	b2a4      	uxth	r4, r4
 8003e40:	fb09 b202 	mla	r2, r9, r2, fp
 8003e44:	4492      	add	sl, r2
 8003e46:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8003e4a:	f84e 4b04 	str.w	r4, [lr], #4
 8003e4e:	f851 4b04 	ldr.w	r4, [r1], #4
 8003e52:	f8be 2000 	ldrh.w	r2, [lr]
 8003e56:	0c24      	lsrs	r4, r4, #16
 8003e58:	fb09 2404 	mla	r4, r9, r4, r2
 8003e5c:	458c      	cmp	ip, r1
 8003e5e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8003e62:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003e66:	d8e7      	bhi.n	8003e38 <__multiply+0xfc>
 8003e68:	9a01      	ldr	r2, [sp, #4]
 8003e6a:	50b4      	str	r4, [r6, r2]
 8003e6c:	3604      	adds	r6, #4
 8003e6e:	e7a3      	b.n	8003db8 <__multiply+0x7c>
 8003e70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1a5      	bne.n	8003dc4 <__multiply+0x88>
 8003e78:	3f01      	subs	r7, #1
 8003e7a:	e7a1      	b.n	8003dc0 <__multiply+0x84>
 8003e7c:	08005033 	.word	0x08005033
 8003e80:	08005044 	.word	0x08005044

08003e84 <__pow5mult>:
 8003e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e88:	4615      	mov	r5, r2
 8003e8a:	f012 0203 	ands.w	r2, r2, #3
 8003e8e:	4606      	mov	r6, r0
 8003e90:	460f      	mov	r7, r1
 8003e92:	d007      	beq.n	8003ea4 <__pow5mult+0x20>
 8003e94:	4c25      	ldr	r4, [pc, #148]	; (8003f2c <__pow5mult+0xa8>)
 8003e96:	3a01      	subs	r2, #1
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e9e:	f7ff fe9f 	bl	8003be0 <__multadd>
 8003ea2:	4607      	mov	r7, r0
 8003ea4:	10ad      	asrs	r5, r5, #2
 8003ea6:	d03d      	beq.n	8003f24 <__pow5mult+0xa0>
 8003ea8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003eaa:	b97c      	cbnz	r4, 8003ecc <__pow5mult+0x48>
 8003eac:	2010      	movs	r0, #16
 8003eae:	f7ff fe11 	bl	8003ad4 <malloc>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6270      	str	r0, [r6, #36]	; 0x24
 8003eb6:	b928      	cbnz	r0, 8003ec4 <__pow5mult+0x40>
 8003eb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003ebc:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <__pow5mult+0xac>)
 8003ebe:	481d      	ldr	r0, [pc, #116]	; (8003f34 <__pow5mult+0xb0>)
 8003ec0:	f000 fa72 	bl	80043a8 <__assert_func>
 8003ec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ec8:	6004      	str	r4, [r0, #0]
 8003eca:	60c4      	str	r4, [r0, #12]
 8003ecc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003ed0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003ed4:	b94c      	cbnz	r4, 8003eea <__pow5mult+0x66>
 8003ed6:	f240 2171 	movw	r1, #625	; 0x271
 8003eda:	4630      	mov	r0, r6
 8003edc:	f7ff ff18 	bl	8003d10 <__i2b>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ee8:	6003      	str	r3, [r0, #0]
 8003eea:	f04f 0900 	mov.w	r9, #0
 8003eee:	07eb      	lsls	r3, r5, #31
 8003ef0:	d50a      	bpl.n	8003f08 <__pow5mult+0x84>
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	f7ff ff20 	bl	8003d3c <__multiply>
 8003efc:	4680      	mov	r8, r0
 8003efe:	4639      	mov	r1, r7
 8003f00:	4630      	mov	r0, r6
 8003f02:	f7ff fe4b 	bl	8003b9c <_Bfree>
 8003f06:	4647      	mov	r7, r8
 8003f08:	106d      	asrs	r5, r5, #1
 8003f0a:	d00b      	beq.n	8003f24 <__pow5mult+0xa0>
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	b938      	cbnz	r0, 8003f20 <__pow5mult+0x9c>
 8003f10:	4622      	mov	r2, r4
 8003f12:	4621      	mov	r1, r4
 8003f14:	4630      	mov	r0, r6
 8003f16:	f7ff ff11 	bl	8003d3c <__multiply>
 8003f1a:	6020      	str	r0, [r4, #0]
 8003f1c:	f8c0 9000 	str.w	r9, [r0]
 8003f20:	4604      	mov	r4, r0
 8003f22:	e7e4      	b.n	8003eee <__pow5mult+0x6a>
 8003f24:	4638      	mov	r0, r7
 8003f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f2a:	bf00      	nop
 8003f2c:	08005198 	.word	0x08005198
 8003f30:	08004fbd 	.word	0x08004fbd
 8003f34:	08005044 	.word	0x08005044

08003f38 <__lshift>:
 8003f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	4607      	mov	r7, r0
 8003f40:	4691      	mov	r9, r2
 8003f42:	6923      	ldr	r3, [r4, #16]
 8003f44:	6849      	ldr	r1, [r1, #4]
 8003f46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003f4a:	68a3      	ldr	r3, [r4, #8]
 8003f4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f50:	f108 0601 	add.w	r6, r8, #1
 8003f54:	42b3      	cmp	r3, r6
 8003f56:	db0b      	blt.n	8003f70 <__lshift+0x38>
 8003f58:	4638      	mov	r0, r7
 8003f5a:	f7ff fddf 	bl	8003b1c <_Balloc>
 8003f5e:	4605      	mov	r5, r0
 8003f60:	b948      	cbnz	r0, 8003f76 <__lshift+0x3e>
 8003f62:	4602      	mov	r2, r0
 8003f64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003f68:	4b27      	ldr	r3, [pc, #156]	; (8004008 <__lshift+0xd0>)
 8003f6a:	4828      	ldr	r0, [pc, #160]	; (800400c <__lshift+0xd4>)
 8003f6c:	f000 fa1c 	bl	80043a8 <__assert_func>
 8003f70:	3101      	adds	r1, #1
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	e7ee      	b.n	8003f54 <__lshift+0x1c>
 8003f76:	2300      	movs	r3, #0
 8003f78:	f100 0114 	add.w	r1, r0, #20
 8003f7c:	f100 0210 	add.w	r2, r0, #16
 8003f80:	4618      	mov	r0, r3
 8003f82:	4553      	cmp	r3, sl
 8003f84:	db33      	blt.n	8003fee <__lshift+0xb6>
 8003f86:	6920      	ldr	r0, [r4, #16]
 8003f88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003f8c:	f104 0314 	add.w	r3, r4, #20
 8003f90:	f019 091f 	ands.w	r9, r9, #31
 8003f94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003f98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003f9c:	d02b      	beq.n	8003ff6 <__lshift+0xbe>
 8003f9e:	468a      	mov	sl, r1
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f1c9 0e20 	rsb	lr, r9, #32
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	fa00 f009 	lsl.w	r0, r0, r9
 8003fac:	4302      	orrs	r2, r0
 8003fae:	f84a 2b04 	str.w	r2, [sl], #4
 8003fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fb6:	459c      	cmp	ip, r3
 8003fb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8003fbc:	d8f3      	bhi.n	8003fa6 <__lshift+0x6e>
 8003fbe:	ebac 0304 	sub.w	r3, ip, r4
 8003fc2:	3b15      	subs	r3, #21
 8003fc4:	f023 0303 	bic.w	r3, r3, #3
 8003fc8:	3304      	adds	r3, #4
 8003fca:	f104 0015 	add.w	r0, r4, #21
 8003fce:	4584      	cmp	ip, r0
 8003fd0:	bf38      	it	cc
 8003fd2:	2304      	movcc	r3, #4
 8003fd4:	50ca      	str	r2, [r1, r3]
 8003fd6:	b10a      	cbz	r2, 8003fdc <__lshift+0xa4>
 8003fd8:	f108 0602 	add.w	r6, r8, #2
 8003fdc:	3e01      	subs	r6, #1
 8003fde:	4638      	mov	r0, r7
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	612e      	str	r6, [r5, #16]
 8003fe4:	f7ff fdda 	bl	8003b9c <_Bfree>
 8003fe8:	4628      	mov	r0, r5
 8003fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fee:	f842 0f04 	str.w	r0, [r2, #4]!
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	e7c5      	b.n	8003f82 <__lshift+0x4a>
 8003ff6:	3904      	subs	r1, #4
 8003ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ffc:	459c      	cmp	ip, r3
 8003ffe:	f841 2f04 	str.w	r2, [r1, #4]!
 8004002:	d8f9      	bhi.n	8003ff8 <__lshift+0xc0>
 8004004:	e7ea      	b.n	8003fdc <__lshift+0xa4>
 8004006:	bf00      	nop
 8004008:	08005033 	.word	0x08005033
 800400c:	08005044 	.word	0x08005044

08004010 <__mcmp>:
 8004010:	4603      	mov	r3, r0
 8004012:	690a      	ldr	r2, [r1, #16]
 8004014:	6900      	ldr	r0, [r0, #16]
 8004016:	b530      	push	{r4, r5, lr}
 8004018:	1a80      	subs	r0, r0, r2
 800401a:	d10d      	bne.n	8004038 <__mcmp+0x28>
 800401c:	3314      	adds	r3, #20
 800401e:	3114      	adds	r1, #20
 8004020:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004024:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004028:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800402c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004030:	4295      	cmp	r5, r2
 8004032:	d002      	beq.n	800403a <__mcmp+0x2a>
 8004034:	d304      	bcc.n	8004040 <__mcmp+0x30>
 8004036:	2001      	movs	r0, #1
 8004038:	bd30      	pop	{r4, r5, pc}
 800403a:	42a3      	cmp	r3, r4
 800403c:	d3f4      	bcc.n	8004028 <__mcmp+0x18>
 800403e:	e7fb      	b.n	8004038 <__mcmp+0x28>
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	e7f8      	b.n	8004038 <__mcmp+0x28>
	...

08004048 <__mdiff>:
 8004048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404c:	460c      	mov	r4, r1
 800404e:	4606      	mov	r6, r0
 8004050:	4611      	mov	r1, r2
 8004052:	4620      	mov	r0, r4
 8004054:	4692      	mov	sl, r2
 8004056:	f7ff ffdb 	bl	8004010 <__mcmp>
 800405a:	1e05      	subs	r5, r0, #0
 800405c:	d111      	bne.n	8004082 <__mdiff+0x3a>
 800405e:	4629      	mov	r1, r5
 8004060:	4630      	mov	r0, r6
 8004062:	f7ff fd5b 	bl	8003b1c <_Balloc>
 8004066:	4602      	mov	r2, r0
 8004068:	b928      	cbnz	r0, 8004076 <__mdiff+0x2e>
 800406a:	f240 2132 	movw	r1, #562	; 0x232
 800406e:	4b3c      	ldr	r3, [pc, #240]	; (8004160 <__mdiff+0x118>)
 8004070:	483c      	ldr	r0, [pc, #240]	; (8004164 <__mdiff+0x11c>)
 8004072:	f000 f999 	bl	80043a8 <__assert_func>
 8004076:	2301      	movs	r3, #1
 8004078:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800407c:	4610      	mov	r0, r2
 800407e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004082:	bfa4      	itt	ge
 8004084:	4653      	movge	r3, sl
 8004086:	46a2      	movge	sl, r4
 8004088:	4630      	mov	r0, r6
 800408a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800408e:	bfa6      	itte	ge
 8004090:	461c      	movge	r4, r3
 8004092:	2500      	movge	r5, #0
 8004094:	2501      	movlt	r5, #1
 8004096:	f7ff fd41 	bl	8003b1c <_Balloc>
 800409a:	4602      	mov	r2, r0
 800409c:	b918      	cbnz	r0, 80040a6 <__mdiff+0x5e>
 800409e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80040a2:	4b2f      	ldr	r3, [pc, #188]	; (8004160 <__mdiff+0x118>)
 80040a4:	e7e4      	b.n	8004070 <__mdiff+0x28>
 80040a6:	f100 0814 	add.w	r8, r0, #20
 80040aa:	f8da 7010 	ldr.w	r7, [sl, #16]
 80040ae:	60c5      	str	r5, [r0, #12]
 80040b0:	f04f 0c00 	mov.w	ip, #0
 80040b4:	f10a 0514 	add.w	r5, sl, #20
 80040b8:	f10a 0010 	add.w	r0, sl, #16
 80040bc:	46c2      	mov	sl, r8
 80040be:	6926      	ldr	r6, [r4, #16]
 80040c0:	f104 0914 	add.w	r9, r4, #20
 80040c4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80040c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80040cc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80040d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80040d4:	fa1f f18b 	uxth.w	r1, fp
 80040d8:	4461      	add	r1, ip
 80040da:	fa1f fc83 	uxth.w	ip, r3
 80040de:	0c1b      	lsrs	r3, r3, #16
 80040e0:	eba1 010c 	sub.w	r1, r1, ip
 80040e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80040e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80040ec:	b289      	uxth	r1, r1
 80040ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80040f2:	454e      	cmp	r6, r9
 80040f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80040f8:	f84a 3b04 	str.w	r3, [sl], #4
 80040fc:	d8e6      	bhi.n	80040cc <__mdiff+0x84>
 80040fe:	1b33      	subs	r3, r6, r4
 8004100:	3b15      	subs	r3, #21
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	3415      	adds	r4, #21
 8004108:	3304      	adds	r3, #4
 800410a:	42a6      	cmp	r6, r4
 800410c:	bf38      	it	cc
 800410e:	2304      	movcc	r3, #4
 8004110:	441d      	add	r5, r3
 8004112:	4443      	add	r3, r8
 8004114:	461e      	mov	r6, r3
 8004116:	462c      	mov	r4, r5
 8004118:	4574      	cmp	r4, lr
 800411a:	d30e      	bcc.n	800413a <__mdiff+0xf2>
 800411c:	f10e 0103 	add.w	r1, lr, #3
 8004120:	1b49      	subs	r1, r1, r5
 8004122:	f021 0103 	bic.w	r1, r1, #3
 8004126:	3d03      	subs	r5, #3
 8004128:	45ae      	cmp	lr, r5
 800412a:	bf38      	it	cc
 800412c:	2100      	movcc	r1, #0
 800412e:	4419      	add	r1, r3
 8004130:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004134:	b18b      	cbz	r3, 800415a <__mdiff+0x112>
 8004136:	6117      	str	r7, [r2, #16]
 8004138:	e7a0      	b.n	800407c <__mdiff+0x34>
 800413a:	f854 8b04 	ldr.w	r8, [r4], #4
 800413e:	fa1f f188 	uxth.w	r1, r8
 8004142:	4461      	add	r1, ip
 8004144:	1408      	asrs	r0, r1, #16
 8004146:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800414a:	b289      	uxth	r1, r1
 800414c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004150:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004154:	f846 1b04 	str.w	r1, [r6], #4
 8004158:	e7de      	b.n	8004118 <__mdiff+0xd0>
 800415a:	3f01      	subs	r7, #1
 800415c:	e7e8      	b.n	8004130 <__mdiff+0xe8>
 800415e:	bf00      	nop
 8004160:	08005033 	.word	0x08005033
 8004164:	08005044 	.word	0x08005044

08004168 <__d2b>:
 8004168:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800416c:	2101      	movs	r1, #1
 800416e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004172:	4690      	mov	r8, r2
 8004174:	461d      	mov	r5, r3
 8004176:	f7ff fcd1 	bl	8003b1c <_Balloc>
 800417a:	4604      	mov	r4, r0
 800417c:	b930      	cbnz	r0, 800418c <__d2b+0x24>
 800417e:	4602      	mov	r2, r0
 8004180:	f240 310a 	movw	r1, #778	; 0x30a
 8004184:	4b24      	ldr	r3, [pc, #144]	; (8004218 <__d2b+0xb0>)
 8004186:	4825      	ldr	r0, [pc, #148]	; (800421c <__d2b+0xb4>)
 8004188:	f000 f90e 	bl	80043a8 <__assert_func>
 800418c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004190:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004194:	bb2d      	cbnz	r5, 80041e2 <__d2b+0x7a>
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	f1b8 0300 	subs.w	r3, r8, #0
 800419c:	d026      	beq.n	80041ec <__d2b+0x84>
 800419e:	4668      	mov	r0, sp
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	f7ff fd87 	bl	8003cb4 <__lo0bits>
 80041a6:	9900      	ldr	r1, [sp, #0]
 80041a8:	b1f0      	cbz	r0, 80041e8 <__d2b+0x80>
 80041aa:	9a01      	ldr	r2, [sp, #4]
 80041ac:	f1c0 0320 	rsb	r3, r0, #32
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	430b      	orrs	r3, r1
 80041b6:	40c2      	lsrs	r2, r0
 80041b8:	6163      	str	r3, [r4, #20]
 80041ba:	9201      	str	r2, [sp, #4]
 80041bc:	9b01      	ldr	r3, [sp, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bf14      	ite	ne
 80041c2:	2102      	movne	r1, #2
 80041c4:	2101      	moveq	r1, #1
 80041c6:	61a3      	str	r3, [r4, #24]
 80041c8:	6121      	str	r1, [r4, #16]
 80041ca:	b1c5      	cbz	r5, 80041fe <__d2b+0x96>
 80041cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80041d0:	4405      	add	r5, r0
 80041d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80041d6:	603d      	str	r5, [r7, #0]
 80041d8:	6030      	str	r0, [r6, #0]
 80041da:	4620      	mov	r0, r4
 80041dc:	b002      	add	sp, #8
 80041de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041e6:	e7d6      	b.n	8004196 <__d2b+0x2e>
 80041e8:	6161      	str	r1, [r4, #20]
 80041ea:	e7e7      	b.n	80041bc <__d2b+0x54>
 80041ec:	a801      	add	r0, sp, #4
 80041ee:	f7ff fd61 	bl	8003cb4 <__lo0bits>
 80041f2:	2101      	movs	r1, #1
 80041f4:	9b01      	ldr	r3, [sp, #4]
 80041f6:	6121      	str	r1, [r4, #16]
 80041f8:	6163      	str	r3, [r4, #20]
 80041fa:	3020      	adds	r0, #32
 80041fc:	e7e5      	b.n	80041ca <__d2b+0x62>
 80041fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004202:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004206:	6038      	str	r0, [r7, #0]
 8004208:	6918      	ldr	r0, [r3, #16]
 800420a:	f7ff fd33 	bl	8003c74 <__hi0bits>
 800420e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004212:	6031      	str	r1, [r6, #0]
 8004214:	e7e1      	b.n	80041da <__d2b+0x72>
 8004216:	bf00      	nop
 8004218:	08005033 	.word	0x08005033
 800421c:	08005044 	.word	0x08005044

08004220 <_calloc_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	fb02 f501 	mul.w	r5, r2, r1
 8004226:	4629      	mov	r1, r5
 8004228:	f000 f854 	bl	80042d4 <_malloc_r>
 800422c:	4604      	mov	r4, r0
 800422e:	b118      	cbz	r0, 8004238 <_calloc_r+0x18>
 8004230:	462a      	mov	r2, r5
 8004232:	2100      	movs	r1, #0
 8004234:	f7fe f966 	bl	8002504 <memset>
 8004238:	4620      	mov	r0, r4
 800423a:	bd38      	pop	{r3, r4, r5, pc}

0800423c <_free_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4605      	mov	r5, r0
 8004240:	2900      	cmp	r1, #0
 8004242:	d043      	beq.n	80042cc <_free_r+0x90>
 8004244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004248:	1f0c      	subs	r4, r1, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	bfb8      	it	lt
 800424e:	18e4      	addlt	r4, r4, r3
 8004250:	f000 f8ec 	bl	800442c <__malloc_lock>
 8004254:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <_free_r+0x94>)
 8004256:	6813      	ldr	r3, [r2, #0]
 8004258:	4610      	mov	r0, r2
 800425a:	b933      	cbnz	r3, 800426a <_free_r+0x2e>
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	6014      	str	r4, [r2, #0]
 8004260:	4628      	mov	r0, r5
 8004262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004266:	f000 b8e7 	b.w	8004438 <__malloc_unlock>
 800426a:	42a3      	cmp	r3, r4
 800426c:	d90a      	bls.n	8004284 <_free_r+0x48>
 800426e:	6821      	ldr	r1, [r4, #0]
 8004270:	1862      	adds	r2, r4, r1
 8004272:	4293      	cmp	r3, r2
 8004274:	bf01      	itttt	eq
 8004276:	681a      	ldreq	r2, [r3, #0]
 8004278:	685b      	ldreq	r3, [r3, #4]
 800427a:	1852      	addeq	r2, r2, r1
 800427c:	6022      	streq	r2, [r4, #0]
 800427e:	6063      	str	r3, [r4, #4]
 8004280:	6004      	str	r4, [r0, #0]
 8004282:	e7ed      	b.n	8004260 <_free_r+0x24>
 8004284:	461a      	mov	r2, r3
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	b10b      	cbz	r3, 800428e <_free_r+0x52>
 800428a:	42a3      	cmp	r3, r4
 800428c:	d9fa      	bls.n	8004284 <_free_r+0x48>
 800428e:	6811      	ldr	r1, [r2, #0]
 8004290:	1850      	adds	r0, r2, r1
 8004292:	42a0      	cmp	r0, r4
 8004294:	d10b      	bne.n	80042ae <_free_r+0x72>
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	4401      	add	r1, r0
 800429a:	1850      	adds	r0, r2, r1
 800429c:	4283      	cmp	r3, r0
 800429e:	6011      	str	r1, [r2, #0]
 80042a0:	d1de      	bne.n	8004260 <_free_r+0x24>
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4401      	add	r1, r0
 80042a8:	6011      	str	r1, [r2, #0]
 80042aa:	6053      	str	r3, [r2, #4]
 80042ac:	e7d8      	b.n	8004260 <_free_r+0x24>
 80042ae:	d902      	bls.n	80042b6 <_free_r+0x7a>
 80042b0:	230c      	movs	r3, #12
 80042b2:	602b      	str	r3, [r5, #0]
 80042b4:	e7d4      	b.n	8004260 <_free_r+0x24>
 80042b6:	6820      	ldr	r0, [r4, #0]
 80042b8:	1821      	adds	r1, r4, r0
 80042ba:	428b      	cmp	r3, r1
 80042bc:	bf01      	itttt	eq
 80042be:	6819      	ldreq	r1, [r3, #0]
 80042c0:	685b      	ldreq	r3, [r3, #4]
 80042c2:	1809      	addeq	r1, r1, r0
 80042c4:	6021      	streq	r1, [r4, #0]
 80042c6:	6063      	str	r3, [r4, #4]
 80042c8:	6054      	str	r4, [r2, #4]
 80042ca:	e7c9      	b.n	8004260 <_free_r+0x24>
 80042cc:	bd38      	pop	{r3, r4, r5, pc}
 80042ce:	bf00      	nop
 80042d0:	20000210 	.word	0x20000210

080042d4 <_malloc_r>:
 80042d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d6:	1ccd      	adds	r5, r1, #3
 80042d8:	f025 0503 	bic.w	r5, r5, #3
 80042dc:	3508      	adds	r5, #8
 80042de:	2d0c      	cmp	r5, #12
 80042e0:	bf38      	it	cc
 80042e2:	250c      	movcc	r5, #12
 80042e4:	2d00      	cmp	r5, #0
 80042e6:	4606      	mov	r6, r0
 80042e8:	db01      	blt.n	80042ee <_malloc_r+0x1a>
 80042ea:	42a9      	cmp	r1, r5
 80042ec:	d903      	bls.n	80042f6 <_malloc_r+0x22>
 80042ee:	230c      	movs	r3, #12
 80042f0:	6033      	str	r3, [r6, #0]
 80042f2:	2000      	movs	r0, #0
 80042f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f6:	f000 f899 	bl	800442c <__malloc_lock>
 80042fa:	4921      	ldr	r1, [pc, #132]	; (8004380 <_malloc_r+0xac>)
 80042fc:	680a      	ldr	r2, [r1, #0]
 80042fe:	4614      	mov	r4, r2
 8004300:	b99c      	cbnz	r4, 800432a <_malloc_r+0x56>
 8004302:	4f20      	ldr	r7, [pc, #128]	; (8004384 <_malloc_r+0xb0>)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	b923      	cbnz	r3, 8004312 <_malloc_r+0x3e>
 8004308:	4621      	mov	r1, r4
 800430a:	4630      	mov	r0, r6
 800430c:	f000 f83c 	bl	8004388 <_sbrk_r>
 8004310:	6038      	str	r0, [r7, #0]
 8004312:	4629      	mov	r1, r5
 8004314:	4630      	mov	r0, r6
 8004316:	f000 f837 	bl	8004388 <_sbrk_r>
 800431a:	1c43      	adds	r3, r0, #1
 800431c:	d123      	bne.n	8004366 <_malloc_r+0x92>
 800431e:	230c      	movs	r3, #12
 8004320:	4630      	mov	r0, r6
 8004322:	6033      	str	r3, [r6, #0]
 8004324:	f000 f888 	bl	8004438 <__malloc_unlock>
 8004328:	e7e3      	b.n	80042f2 <_malloc_r+0x1e>
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	1b5b      	subs	r3, r3, r5
 800432e:	d417      	bmi.n	8004360 <_malloc_r+0x8c>
 8004330:	2b0b      	cmp	r3, #11
 8004332:	d903      	bls.n	800433c <_malloc_r+0x68>
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	441c      	add	r4, r3
 8004338:	6025      	str	r5, [r4, #0]
 800433a:	e004      	b.n	8004346 <_malloc_r+0x72>
 800433c:	6863      	ldr	r3, [r4, #4]
 800433e:	42a2      	cmp	r2, r4
 8004340:	bf0c      	ite	eq
 8004342:	600b      	streq	r3, [r1, #0]
 8004344:	6053      	strne	r3, [r2, #4]
 8004346:	4630      	mov	r0, r6
 8004348:	f000 f876 	bl	8004438 <__malloc_unlock>
 800434c:	f104 000b 	add.w	r0, r4, #11
 8004350:	1d23      	adds	r3, r4, #4
 8004352:	f020 0007 	bic.w	r0, r0, #7
 8004356:	1ac2      	subs	r2, r0, r3
 8004358:	d0cc      	beq.n	80042f4 <_malloc_r+0x20>
 800435a:	1a1b      	subs	r3, r3, r0
 800435c:	50a3      	str	r3, [r4, r2]
 800435e:	e7c9      	b.n	80042f4 <_malloc_r+0x20>
 8004360:	4622      	mov	r2, r4
 8004362:	6864      	ldr	r4, [r4, #4]
 8004364:	e7cc      	b.n	8004300 <_malloc_r+0x2c>
 8004366:	1cc4      	adds	r4, r0, #3
 8004368:	f024 0403 	bic.w	r4, r4, #3
 800436c:	42a0      	cmp	r0, r4
 800436e:	d0e3      	beq.n	8004338 <_malloc_r+0x64>
 8004370:	1a21      	subs	r1, r4, r0
 8004372:	4630      	mov	r0, r6
 8004374:	f000 f808 	bl	8004388 <_sbrk_r>
 8004378:	3001      	adds	r0, #1
 800437a:	d1dd      	bne.n	8004338 <_malloc_r+0x64>
 800437c:	e7cf      	b.n	800431e <_malloc_r+0x4a>
 800437e:	bf00      	nop
 8004380:	20000210 	.word	0x20000210
 8004384:	20000214 	.word	0x20000214

08004388 <_sbrk_r>:
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	2300      	movs	r3, #0
 800438c:	4d05      	ldr	r5, [pc, #20]	; (80043a4 <_sbrk_r+0x1c>)
 800438e:	4604      	mov	r4, r0
 8004390:	4608      	mov	r0, r1
 8004392:	602b      	str	r3, [r5, #0]
 8004394:	f000 fdca 	bl	8004f2c <_sbrk>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_sbrk_r+0x1a>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_sbrk_r+0x1a>
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	200002a4 	.word	0x200002a4

080043a8 <__assert_func>:
 80043a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043aa:	4614      	mov	r4, r2
 80043ac:	461a      	mov	r2, r3
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <__assert_func+0x2c>)
 80043b0:	4605      	mov	r5, r0
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68d8      	ldr	r0, [r3, #12]
 80043b6:	b14c      	cbz	r4, 80043cc <__assert_func+0x24>
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <__assert_func+0x30>)
 80043ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80043be:	9100      	str	r1, [sp, #0]
 80043c0:	462b      	mov	r3, r5
 80043c2:	4906      	ldr	r1, [pc, #24]	; (80043dc <__assert_func+0x34>)
 80043c4:	f000 f80e 	bl	80043e4 <fiprintf>
 80043c8:	f000 fa62 	bl	8004890 <abort>
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <__assert_func+0x38>)
 80043ce:	461c      	mov	r4, r3
 80043d0:	e7f3      	b.n	80043ba <__assert_func+0x12>
 80043d2:	bf00      	nop
 80043d4:	20000000 	.word	0x20000000
 80043d8:	080051a4 	.word	0x080051a4
 80043dc:	080051b1 	.word	0x080051b1
 80043e0:	080051df 	.word	0x080051df

080043e4 <fiprintf>:
 80043e4:	b40e      	push	{r1, r2, r3}
 80043e6:	b503      	push	{r0, r1, lr}
 80043e8:	4601      	mov	r1, r0
 80043ea:	ab03      	add	r3, sp, #12
 80043ec:	4805      	ldr	r0, [pc, #20]	; (8004404 <fiprintf+0x20>)
 80043ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80043f2:	6800      	ldr	r0, [r0, #0]
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	f000 f84d 	bl	8004494 <_vfiprintf_r>
 80043fa:	b002      	add	sp, #8
 80043fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004400:	b003      	add	sp, #12
 8004402:	4770      	bx	lr
 8004404:	20000000 	.word	0x20000000

08004408 <__ascii_mbtowc>:
 8004408:	b082      	sub	sp, #8
 800440a:	b901      	cbnz	r1, 800440e <__ascii_mbtowc+0x6>
 800440c:	a901      	add	r1, sp, #4
 800440e:	b142      	cbz	r2, 8004422 <__ascii_mbtowc+0x1a>
 8004410:	b14b      	cbz	r3, 8004426 <__ascii_mbtowc+0x1e>
 8004412:	7813      	ldrb	r3, [r2, #0]
 8004414:	600b      	str	r3, [r1, #0]
 8004416:	7812      	ldrb	r2, [r2, #0]
 8004418:	1e10      	subs	r0, r2, #0
 800441a:	bf18      	it	ne
 800441c:	2001      	movne	r0, #1
 800441e:	b002      	add	sp, #8
 8004420:	4770      	bx	lr
 8004422:	4610      	mov	r0, r2
 8004424:	e7fb      	b.n	800441e <__ascii_mbtowc+0x16>
 8004426:	f06f 0001 	mvn.w	r0, #1
 800442a:	e7f8      	b.n	800441e <__ascii_mbtowc+0x16>

0800442c <__malloc_lock>:
 800442c:	4801      	ldr	r0, [pc, #4]	; (8004434 <__malloc_lock+0x8>)
 800442e:	f000 bbef 	b.w	8004c10 <__retarget_lock_acquire_recursive>
 8004432:	bf00      	nop
 8004434:	200002ac 	.word	0x200002ac

08004438 <__malloc_unlock>:
 8004438:	4801      	ldr	r0, [pc, #4]	; (8004440 <__malloc_unlock+0x8>)
 800443a:	f000 bbea 	b.w	8004c12 <__retarget_lock_release_recursive>
 800443e:	bf00      	nop
 8004440:	200002ac 	.word	0x200002ac

08004444 <__sfputc_r>:
 8004444:	6893      	ldr	r3, [r2, #8]
 8004446:	b410      	push	{r4}
 8004448:	3b01      	subs	r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	6093      	str	r3, [r2, #8]
 800444e:	da07      	bge.n	8004460 <__sfputc_r+0x1c>
 8004450:	6994      	ldr	r4, [r2, #24]
 8004452:	42a3      	cmp	r3, r4
 8004454:	db01      	blt.n	800445a <__sfputc_r+0x16>
 8004456:	290a      	cmp	r1, #10
 8004458:	d102      	bne.n	8004460 <__sfputc_r+0x1c>
 800445a:	bc10      	pop	{r4}
 800445c:	f000 b94a 	b.w	80046f4 <__swbuf_r>
 8004460:	6813      	ldr	r3, [r2, #0]
 8004462:	1c58      	adds	r0, r3, #1
 8004464:	6010      	str	r0, [r2, #0]
 8004466:	7019      	strb	r1, [r3, #0]
 8004468:	4608      	mov	r0, r1
 800446a:	bc10      	pop	{r4}
 800446c:	4770      	bx	lr

0800446e <__sfputs_r>:
 800446e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004470:	4606      	mov	r6, r0
 8004472:	460f      	mov	r7, r1
 8004474:	4614      	mov	r4, r2
 8004476:	18d5      	adds	r5, r2, r3
 8004478:	42ac      	cmp	r4, r5
 800447a:	d101      	bne.n	8004480 <__sfputs_r+0x12>
 800447c:	2000      	movs	r0, #0
 800447e:	e007      	b.n	8004490 <__sfputs_r+0x22>
 8004480:	463a      	mov	r2, r7
 8004482:	4630      	mov	r0, r6
 8004484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004488:	f7ff ffdc 	bl	8004444 <__sfputc_r>
 800448c:	1c43      	adds	r3, r0, #1
 800448e:	d1f3      	bne.n	8004478 <__sfputs_r+0xa>
 8004490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004494 <_vfiprintf_r>:
 8004494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004498:	460d      	mov	r5, r1
 800449a:	4614      	mov	r4, r2
 800449c:	4698      	mov	r8, r3
 800449e:	4606      	mov	r6, r0
 80044a0:	b09d      	sub	sp, #116	; 0x74
 80044a2:	b118      	cbz	r0, 80044ac <_vfiprintf_r+0x18>
 80044a4:	6983      	ldr	r3, [r0, #24]
 80044a6:	b90b      	cbnz	r3, 80044ac <_vfiprintf_r+0x18>
 80044a8:	f000 fb14 	bl	8004ad4 <__sinit>
 80044ac:	4b89      	ldr	r3, [pc, #548]	; (80046d4 <_vfiprintf_r+0x240>)
 80044ae:	429d      	cmp	r5, r3
 80044b0:	d11b      	bne.n	80044ea <_vfiprintf_r+0x56>
 80044b2:	6875      	ldr	r5, [r6, #4]
 80044b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044b6:	07d9      	lsls	r1, r3, #31
 80044b8:	d405      	bmi.n	80044c6 <_vfiprintf_r+0x32>
 80044ba:	89ab      	ldrh	r3, [r5, #12]
 80044bc:	059a      	lsls	r2, r3, #22
 80044be:	d402      	bmi.n	80044c6 <_vfiprintf_r+0x32>
 80044c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044c2:	f000 fba5 	bl	8004c10 <__retarget_lock_acquire_recursive>
 80044c6:	89ab      	ldrh	r3, [r5, #12]
 80044c8:	071b      	lsls	r3, r3, #28
 80044ca:	d501      	bpl.n	80044d0 <_vfiprintf_r+0x3c>
 80044cc:	692b      	ldr	r3, [r5, #16]
 80044ce:	b9eb      	cbnz	r3, 800450c <_vfiprintf_r+0x78>
 80044d0:	4629      	mov	r1, r5
 80044d2:	4630      	mov	r0, r6
 80044d4:	f000 f96e 	bl	80047b4 <__swsetup_r>
 80044d8:	b1c0      	cbz	r0, 800450c <_vfiprintf_r+0x78>
 80044da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044dc:	07dc      	lsls	r4, r3, #31
 80044de:	d50e      	bpl.n	80044fe <_vfiprintf_r+0x6a>
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295
 80044e4:	b01d      	add	sp, #116	; 0x74
 80044e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ea:	4b7b      	ldr	r3, [pc, #492]	; (80046d8 <_vfiprintf_r+0x244>)
 80044ec:	429d      	cmp	r5, r3
 80044ee:	d101      	bne.n	80044f4 <_vfiprintf_r+0x60>
 80044f0:	68b5      	ldr	r5, [r6, #8]
 80044f2:	e7df      	b.n	80044b4 <_vfiprintf_r+0x20>
 80044f4:	4b79      	ldr	r3, [pc, #484]	; (80046dc <_vfiprintf_r+0x248>)
 80044f6:	429d      	cmp	r5, r3
 80044f8:	bf08      	it	eq
 80044fa:	68f5      	ldreq	r5, [r6, #12]
 80044fc:	e7da      	b.n	80044b4 <_vfiprintf_r+0x20>
 80044fe:	89ab      	ldrh	r3, [r5, #12]
 8004500:	0598      	lsls	r0, r3, #22
 8004502:	d4ed      	bmi.n	80044e0 <_vfiprintf_r+0x4c>
 8004504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004506:	f000 fb84 	bl	8004c12 <__retarget_lock_release_recursive>
 800450a:	e7e9      	b.n	80044e0 <_vfiprintf_r+0x4c>
 800450c:	2300      	movs	r3, #0
 800450e:	9309      	str	r3, [sp, #36]	; 0x24
 8004510:	2320      	movs	r3, #32
 8004512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004516:	2330      	movs	r3, #48	; 0x30
 8004518:	f04f 0901 	mov.w	r9, #1
 800451c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004520:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80046e0 <_vfiprintf_r+0x24c>
 8004524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004528:	4623      	mov	r3, r4
 800452a:	469a      	mov	sl, r3
 800452c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004530:	b10a      	cbz	r2, 8004536 <_vfiprintf_r+0xa2>
 8004532:	2a25      	cmp	r2, #37	; 0x25
 8004534:	d1f9      	bne.n	800452a <_vfiprintf_r+0x96>
 8004536:	ebba 0b04 	subs.w	fp, sl, r4
 800453a:	d00b      	beq.n	8004554 <_vfiprintf_r+0xc0>
 800453c:	465b      	mov	r3, fp
 800453e:	4622      	mov	r2, r4
 8004540:	4629      	mov	r1, r5
 8004542:	4630      	mov	r0, r6
 8004544:	f7ff ff93 	bl	800446e <__sfputs_r>
 8004548:	3001      	adds	r0, #1
 800454a:	f000 80aa 	beq.w	80046a2 <_vfiprintf_r+0x20e>
 800454e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004550:	445a      	add	r2, fp
 8004552:	9209      	str	r2, [sp, #36]	; 0x24
 8004554:	f89a 3000 	ldrb.w	r3, [sl]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80a2 	beq.w	80046a2 <_vfiprintf_r+0x20e>
 800455e:	2300      	movs	r3, #0
 8004560:	f04f 32ff 	mov.w	r2, #4294967295
 8004564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004568:	f10a 0a01 	add.w	sl, sl, #1
 800456c:	9304      	str	r3, [sp, #16]
 800456e:	9307      	str	r3, [sp, #28]
 8004570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004574:	931a      	str	r3, [sp, #104]	; 0x68
 8004576:	4654      	mov	r4, sl
 8004578:	2205      	movs	r2, #5
 800457a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800457e:	4858      	ldr	r0, [pc, #352]	; (80046e0 <_vfiprintf_r+0x24c>)
 8004580:	f7ff fab0 	bl	8003ae4 <memchr>
 8004584:	9a04      	ldr	r2, [sp, #16]
 8004586:	b9d8      	cbnz	r0, 80045c0 <_vfiprintf_r+0x12c>
 8004588:	06d1      	lsls	r1, r2, #27
 800458a:	bf44      	itt	mi
 800458c:	2320      	movmi	r3, #32
 800458e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004592:	0713      	lsls	r3, r2, #28
 8004594:	bf44      	itt	mi
 8004596:	232b      	movmi	r3, #43	; 0x2b
 8004598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800459c:	f89a 3000 	ldrb.w	r3, [sl]
 80045a0:	2b2a      	cmp	r3, #42	; 0x2a
 80045a2:	d015      	beq.n	80045d0 <_vfiprintf_r+0x13c>
 80045a4:	4654      	mov	r4, sl
 80045a6:	2000      	movs	r0, #0
 80045a8:	f04f 0c0a 	mov.w	ip, #10
 80045ac:	9a07      	ldr	r2, [sp, #28]
 80045ae:	4621      	mov	r1, r4
 80045b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045b4:	3b30      	subs	r3, #48	; 0x30
 80045b6:	2b09      	cmp	r3, #9
 80045b8:	d94e      	bls.n	8004658 <_vfiprintf_r+0x1c4>
 80045ba:	b1b0      	cbz	r0, 80045ea <_vfiprintf_r+0x156>
 80045bc:	9207      	str	r2, [sp, #28]
 80045be:	e014      	b.n	80045ea <_vfiprintf_r+0x156>
 80045c0:	eba0 0308 	sub.w	r3, r0, r8
 80045c4:	fa09 f303 	lsl.w	r3, r9, r3
 80045c8:	4313      	orrs	r3, r2
 80045ca:	46a2      	mov	sl, r4
 80045cc:	9304      	str	r3, [sp, #16]
 80045ce:	e7d2      	b.n	8004576 <_vfiprintf_r+0xe2>
 80045d0:	9b03      	ldr	r3, [sp, #12]
 80045d2:	1d19      	adds	r1, r3, #4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	9103      	str	r1, [sp, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bfbb      	ittet	lt
 80045dc:	425b      	neglt	r3, r3
 80045de:	f042 0202 	orrlt.w	r2, r2, #2
 80045e2:	9307      	strge	r3, [sp, #28]
 80045e4:	9307      	strlt	r3, [sp, #28]
 80045e6:	bfb8      	it	lt
 80045e8:	9204      	strlt	r2, [sp, #16]
 80045ea:	7823      	ldrb	r3, [r4, #0]
 80045ec:	2b2e      	cmp	r3, #46	; 0x2e
 80045ee:	d10c      	bne.n	800460a <_vfiprintf_r+0x176>
 80045f0:	7863      	ldrb	r3, [r4, #1]
 80045f2:	2b2a      	cmp	r3, #42	; 0x2a
 80045f4:	d135      	bne.n	8004662 <_vfiprintf_r+0x1ce>
 80045f6:	9b03      	ldr	r3, [sp, #12]
 80045f8:	3402      	adds	r4, #2
 80045fa:	1d1a      	adds	r2, r3, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	9203      	str	r2, [sp, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	bfb8      	it	lt
 8004604:	f04f 33ff 	movlt.w	r3, #4294967295
 8004608:	9305      	str	r3, [sp, #20]
 800460a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80046f0 <_vfiprintf_r+0x25c>
 800460e:	2203      	movs	r2, #3
 8004610:	4650      	mov	r0, sl
 8004612:	7821      	ldrb	r1, [r4, #0]
 8004614:	f7ff fa66 	bl	8003ae4 <memchr>
 8004618:	b140      	cbz	r0, 800462c <_vfiprintf_r+0x198>
 800461a:	2340      	movs	r3, #64	; 0x40
 800461c:	eba0 000a 	sub.w	r0, r0, sl
 8004620:	fa03 f000 	lsl.w	r0, r3, r0
 8004624:	9b04      	ldr	r3, [sp, #16]
 8004626:	3401      	adds	r4, #1
 8004628:	4303      	orrs	r3, r0
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004630:	2206      	movs	r2, #6
 8004632:	482c      	ldr	r0, [pc, #176]	; (80046e4 <_vfiprintf_r+0x250>)
 8004634:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004638:	f7ff fa54 	bl	8003ae4 <memchr>
 800463c:	2800      	cmp	r0, #0
 800463e:	d03f      	beq.n	80046c0 <_vfiprintf_r+0x22c>
 8004640:	4b29      	ldr	r3, [pc, #164]	; (80046e8 <_vfiprintf_r+0x254>)
 8004642:	bb1b      	cbnz	r3, 800468c <_vfiprintf_r+0x1f8>
 8004644:	9b03      	ldr	r3, [sp, #12]
 8004646:	3307      	adds	r3, #7
 8004648:	f023 0307 	bic.w	r3, r3, #7
 800464c:	3308      	adds	r3, #8
 800464e:	9303      	str	r3, [sp, #12]
 8004650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004652:	443b      	add	r3, r7
 8004654:	9309      	str	r3, [sp, #36]	; 0x24
 8004656:	e767      	b.n	8004528 <_vfiprintf_r+0x94>
 8004658:	460c      	mov	r4, r1
 800465a:	2001      	movs	r0, #1
 800465c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004660:	e7a5      	b.n	80045ae <_vfiprintf_r+0x11a>
 8004662:	2300      	movs	r3, #0
 8004664:	f04f 0c0a 	mov.w	ip, #10
 8004668:	4619      	mov	r1, r3
 800466a:	3401      	adds	r4, #1
 800466c:	9305      	str	r3, [sp, #20]
 800466e:	4620      	mov	r0, r4
 8004670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004674:	3a30      	subs	r2, #48	; 0x30
 8004676:	2a09      	cmp	r2, #9
 8004678:	d903      	bls.n	8004682 <_vfiprintf_r+0x1ee>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0c5      	beq.n	800460a <_vfiprintf_r+0x176>
 800467e:	9105      	str	r1, [sp, #20]
 8004680:	e7c3      	b.n	800460a <_vfiprintf_r+0x176>
 8004682:	4604      	mov	r4, r0
 8004684:	2301      	movs	r3, #1
 8004686:	fb0c 2101 	mla	r1, ip, r1, r2
 800468a:	e7f0      	b.n	800466e <_vfiprintf_r+0x1da>
 800468c:	ab03      	add	r3, sp, #12
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	462a      	mov	r2, r5
 8004692:	4630      	mov	r0, r6
 8004694:	4b15      	ldr	r3, [pc, #84]	; (80046ec <_vfiprintf_r+0x258>)
 8004696:	a904      	add	r1, sp, #16
 8004698:	f7fd ffda 	bl	8002650 <_printf_float>
 800469c:	4607      	mov	r7, r0
 800469e:	1c78      	adds	r0, r7, #1
 80046a0:	d1d6      	bne.n	8004650 <_vfiprintf_r+0x1bc>
 80046a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046a4:	07d9      	lsls	r1, r3, #31
 80046a6:	d405      	bmi.n	80046b4 <_vfiprintf_r+0x220>
 80046a8:	89ab      	ldrh	r3, [r5, #12]
 80046aa:	059a      	lsls	r2, r3, #22
 80046ac:	d402      	bmi.n	80046b4 <_vfiprintf_r+0x220>
 80046ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046b0:	f000 faaf 	bl	8004c12 <__retarget_lock_release_recursive>
 80046b4:	89ab      	ldrh	r3, [r5, #12]
 80046b6:	065b      	lsls	r3, r3, #25
 80046b8:	f53f af12 	bmi.w	80044e0 <_vfiprintf_r+0x4c>
 80046bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046be:	e711      	b.n	80044e4 <_vfiprintf_r+0x50>
 80046c0:	ab03      	add	r3, sp, #12
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	462a      	mov	r2, r5
 80046c6:	4630      	mov	r0, r6
 80046c8:	4b08      	ldr	r3, [pc, #32]	; (80046ec <_vfiprintf_r+0x258>)
 80046ca:	a904      	add	r1, sp, #16
 80046cc:	f7fe fa5c 	bl	8002b88 <_printf_i>
 80046d0:	e7e4      	b.n	800469c <_vfiprintf_r+0x208>
 80046d2:	bf00      	nop
 80046d4:	0800531c 	.word	0x0800531c
 80046d8:	0800533c 	.word	0x0800533c
 80046dc:	080052fc 	.word	0x080052fc
 80046e0:	080051ea 	.word	0x080051ea
 80046e4:	080051f4 	.word	0x080051f4
 80046e8:	08002651 	.word	0x08002651
 80046ec:	0800446f 	.word	0x0800446f
 80046f0:	080051f0 	.word	0x080051f0

080046f4 <__swbuf_r>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	460e      	mov	r6, r1
 80046f8:	4614      	mov	r4, r2
 80046fa:	4605      	mov	r5, r0
 80046fc:	b118      	cbz	r0, 8004706 <__swbuf_r+0x12>
 80046fe:	6983      	ldr	r3, [r0, #24]
 8004700:	b90b      	cbnz	r3, 8004706 <__swbuf_r+0x12>
 8004702:	f000 f9e7 	bl	8004ad4 <__sinit>
 8004706:	4b21      	ldr	r3, [pc, #132]	; (800478c <__swbuf_r+0x98>)
 8004708:	429c      	cmp	r4, r3
 800470a:	d12b      	bne.n	8004764 <__swbuf_r+0x70>
 800470c:	686c      	ldr	r4, [r5, #4]
 800470e:	69a3      	ldr	r3, [r4, #24]
 8004710:	60a3      	str	r3, [r4, #8]
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	071a      	lsls	r2, r3, #28
 8004716:	d52f      	bpl.n	8004778 <__swbuf_r+0x84>
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	b36b      	cbz	r3, 8004778 <__swbuf_r+0x84>
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	6820      	ldr	r0, [r4, #0]
 8004720:	b2f6      	uxtb	r6, r6
 8004722:	1ac0      	subs	r0, r0, r3
 8004724:	6963      	ldr	r3, [r4, #20]
 8004726:	4637      	mov	r7, r6
 8004728:	4283      	cmp	r3, r0
 800472a:	dc04      	bgt.n	8004736 <__swbuf_r+0x42>
 800472c:	4621      	mov	r1, r4
 800472e:	4628      	mov	r0, r5
 8004730:	f000 f93c 	bl	80049ac <_fflush_r>
 8004734:	bb30      	cbnz	r0, 8004784 <__swbuf_r+0x90>
 8004736:	68a3      	ldr	r3, [r4, #8]
 8004738:	3001      	adds	r0, #1
 800473a:	3b01      	subs	r3, #1
 800473c:	60a3      	str	r3, [r4, #8]
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	6022      	str	r2, [r4, #0]
 8004744:	701e      	strb	r6, [r3, #0]
 8004746:	6963      	ldr	r3, [r4, #20]
 8004748:	4283      	cmp	r3, r0
 800474a:	d004      	beq.n	8004756 <__swbuf_r+0x62>
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	07db      	lsls	r3, r3, #31
 8004750:	d506      	bpl.n	8004760 <__swbuf_r+0x6c>
 8004752:	2e0a      	cmp	r6, #10
 8004754:	d104      	bne.n	8004760 <__swbuf_r+0x6c>
 8004756:	4621      	mov	r1, r4
 8004758:	4628      	mov	r0, r5
 800475a:	f000 f927 	bl	80049ac <_fflush_r>
 800475e:	b988      	cbnz	r0, 8004784 <__swbuf_r+0x90>
 8004760:	4638      	mov	r0, r7
 8004762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <__swbuf_r+0x9c>)
 8004766:	429c      	cmp	r4, r3
 8004768:	d101      	bne.n	800476e <__swbuf_r+0x7a>
 800476a:	68ac      	ldr	r4, [r5, #8]
 800476c:	e7cf      	b.n	800470e <__swbuf_r+0x1a>
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <__swbuf_r+0xa0>)
 8004770:	429c      	cmp	r4, r3
 8004772:	bf08      	it	eq
 8004774:	68ec      	ldreq	r4, [r5, #12]
 8004776:	e7ca      	b.n	800470e <__swbuf_r+0x1a>
 8004778:	4621      	mov	r1, r4
 800477a:	4628      	mov	r0, r5
 800477c:	f000 f81a 	bl	80047b4 <__swsetup_r>
 8004780:	2800      	cmp	r0, #0
 8004782:	d0cb      	beq.n	800471c <__swbuf_r+0x28>
 8004784:	f04f 37ff 	mov.w	r7, #4294967295
 8004788:	e7ea      	b.n	8004760 <__swbuf_r+0x6c>
 800478a:	bf00      	nop
 800478c:	0800531c 	.word	0x0800531c
 8004790:	0800533c 	.word	0x0800533c
 8004794:	080052fc 	.word	0x080052fc

08004798 <__ascii_wctomb>:
 8004798:	4603      	mov	r3, r0
 800479a:	4608      	mov	r0, r1
 800479c:	b141      	cbz	r1, 80047b0 <__ascii_wctomb+0x18>
 800479e:	2aff      	cmp	r2, #255	; 0xff
 80047a0:	d904      	bls.n	80047ac <__ascii_wctomb+0x14>
 80047a2:	228a      	movs	r2, #138	; 0x8a
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	4770      	bx	lr
 80047ac:	2001      	movs	r0, #1
 80047ae:	700a      	strb	r2, [r1, #0]
 80047b0:	4770      	bx	lr
	...

080047b4 <__swsetup_r>:
 80047b4:	4b32      	ldr	r3, [pc, #200]	; (8004880 <__swsetup_r+0xcc>)
 80047b6:	b570      	push	{r4, r5, r6, lr}
 80047b8:	681d      	ldr	r5, [r3, #0]
 80047ba:	4606      	mov	r6, r0
 80047bc:	460c      	mov	r4, r1
 80047be:	b125      	cbz	r5, 80047ca <__swsetup_r+0x16>
 80047c0:	69ab      	ldr	r3, [r5, #24]
 80047c2:	b913      	cbnz	r3, 80047ca <__swsetup_r+0x16>
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 f985 	bl	8004ad4 <__sinit>
 80047ca:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <__swsetup_r+0xd0>)
 80047cc:	429c      	cmp	r4, r3
 80047ce:	d10f      	bne.n	80047f0 <__swsetup_r+0x3c>
 80047d0:	686c      	ldr	r4, [r5, #4]
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047d8:	0719      	lsls	r1, r3, #28
 80047da:	d42c      	bmi.n	8004836 <__swsetup_r+0x82>
 80047dc:	06dd      	lsls	r5, r3, #27
 80047de:	d411      	bmi.n	8004804 <__swsetup_r+0x50>
 80047e0:	2309      	movs	r3, #9
 80047e2:	6033      	str	r3, [r6, #0]
 80047e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	e03e      	b.n	800486e <__swsetup_r+0xba>
 80047f0:	4b25      	ldr	r3, [pc, #148]	; (8004888 <__swsetup_r+0xd4>)
 80047f2:	429c      	cmp	r4, r3
 80047f4:	d101      	bne.n	80047fa <__swsetup_r+0x46>
 80047f6:	68ac      	ldr	r4, [r5, #8]
 80047f8:	e7eb      	b.n	80047d2 <__swsetup_r+0x1e>
 80047fa:	4b24      	ldr	r3, [pc, #144]	; (800488c <__swsetup_r+0xd8>)
 80047fc:	429c      	cmp	r4, r3
 80047fe:	bf08      	it	eq
 8004800:	68ec      	ldreq	r4, [r5, #12]
 8004802:	e7e6      	b.n	80047d2 <__swsetup_r+0x1e>
 8004804:	0758      	lsls	r0, r3, #29
 8004806:	d512      	bpl.n	800482e <__swsetup_r+0x7a>
 8004808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800480a:	b141      	cbz	r1, 800481e <__swsetup_r+0x6a>
 800480c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004810:	4299      	cmp	r1, r3
 8004812:	d002      	beq.n	800481a <__swsetup_r+0x66>
 8004814:	4630      	mov	r0, r6
 8004816:	f7ff fd11 	bl	800423c <_free_r>
 800481a:	2300      	movs	r3, #0
 800481c:	6363      	str	r3, [r4, #52]	; 0x34
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	2300      	movs	r3, #0
 8004828:	6063      	str	r3, [r4, #4]
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	f043 0308 	orr.w	r3, r3, #8
 8004834:	81a3      	strh	r3, [r4, #12]
 8004836:	6923      	ldr	r3, [r4, #16]
 8004838:	b94b      	cbnz	r3, 800484e <__swsetup_r+0x9a>
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004844:	d003      	beq.n	800484e <__swsetup_r+0x9a>
 8004846:	4621      	mov	r1, r4
 8004848:	4630      	mov	r0, r6
 800484a:	f000 fa07 	bl	8004c5c <__smakebuf_r>
 800484e:	89a0      	ldrh	r0, [r4, #12]
 8004850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004854:	f010 0301 	ands.w	r3, r0, #1
 8004858:	d00a      	beq.n	8004870 <__swsetup_r+0xbc>
 800485a:	2300      	movs	r3, #0
 800485c:	60a3      	str	r3, [r4, #8]
 800485e:	6963      	ldr	r3, [r4, #20]
 8004860:	425b      	negs	r3, r3
 8004862:	61a3      	str	r3, [r4, #24]
 8004864:	6923      	ldr	r3, [r4, #16]
 8004866:	b943      	cbnz	r3, 800487a <__swsetup_r+0xc6>
 8004868:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800486c:	d1ba      	bne.n	80047e4 <__swsetup_r+0x30>
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	0781      	lsls	r1, r0, #30
 8004872:	bf58      	it	pl
 8004874:	6963      	ldrpl	r3, [r4, #20]
 8004876:	60a3      	str	r3, [r4, #8]
 8004878:	e7f4      	b.n	8004864 <__swsetup_r+0xb0>
 800487a:	2000      	movs	r0, #0
 800487c:	e7f7      	b.n	800486e <__swsetup_r+0xba>
 800487e:	bf00      	nop
 8004880:	20000000 	.word	0x20000000
 8004884:	0800531c 	.word	0x0800531c
 8004888:	0800533c 	.word	0x0800533c
 800488c:	080052fc 	.word	0x080052fc

08004890 <abort>:
 8004890:	2006      	movs	r0, #6
 8004892:	b508      	push	{r3, lr}
 8004894:	f000 fa4a 	bl	8004d2c <raise>
 8004898:	2001      	movs	r0, #1
 800489a:	f000 fb5d 	bl	8004f58 <_exit>
	...

080048a0 <__sflush_r>:
 80048a0:	898a      	ldrh	r2, [r1, #12]
 80048a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a6:	4605      	mov	r5, r0
 80048a8:	0710      	lsls	r0, r2, #28
 80048aa:	460c      	mov	r4, r1
 80048ac:	d458      	bmi.n	8004960 <__sflush_r+0xc0>
 80048ae:	684b      	ldr	r3, [r1, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	dc05      	bgt.n	80048c0 <__sflush_r+0x20>
 80048b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	dc02      	bgt.n	80048c0 <__sflush_r+0x20>
 80048ba:	2000      	movs	r0, #0
 80048bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	d0f9      	beq.n	80048ba <__sflush_r+0x1a>
 80048c6:	2300      	movs	r3, #0
 80048c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048cc:	682f      	ldr	r7, [r5, #0]
 80048ce:	602b      	str	r3, [r5, #0]
 80048d0:	d032      	beq.n	8004938 <__sflush_r+0x98>
 80048d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	075a      	lsls	r2, r3, #29
 80048d8:	d505      	bpl.n	80048e6 <__sflush_r+0x46>
 80048da:	6863      	ldr	r3, [r4, #4]
 80048dc:	1ac0      	subs	r0, r0, r3
 80048de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048e0:	b10b      	cbz	r3, 80048e6 <__sflush_r+0x46>
 80048e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048e4:	1ac0      	subs	r0, r0, r3
 80048e6:	2300      	movs	r3, #0
 80048e8:	4602      	mov	r2, r0
 80048ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ec:	4628      	mov	r0, r5
 80048ee:	6a21      	ldr	r1, [r4, #32]
 80048f0:	47b0      	blx	r6
 80048f2:	1c43      	adds	r3, r0, #1
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	d106      	bne.n	8004906 <__sflush_r+0x66>
 80048f8:	6829      	ldr	r1, [r5, #0]
 80048fa:	291d      	cmp	r1, #29
 80048fc:	d82c      	bhi.n	8004958 <__sflush_r+0xb8>
 80048fe:	4a2a      	ldr	r2, [pc, #168]	; (80049a8 <__sflush_r+0x108>)
 8004900:	40ca      	lsrs	r2, r1
 8004902:	07d6      	lsls	r6, r2, #31
 8004904:	d528      	bpl.n	8004958 <__sflush_r+0xb8>
 8004906:	2200      	movs	r2, #0
 8004908:	6062      	str	r2, [r4, #4]
 800490a:	6922      	ldr	r2, [r4, #16]
 800490c:	04d9      	lsls	r1, r3, #19
 800490e:	6022      	str	r2, [r4, #0]
 8004910:	d504      	bpl.n	800491c <__sflush_r+0x7c>
 8004912:	1c42      	adds	r2, r0, #1
 8004914:	d101      	bne.n	800491a <__sflush_r+0x7a>
 8004916:	682b      	ldr	r3, [r5, #0]
 8004918:	b903      	cbnz	r3, 800491c <__sflush_r+0x7c>
 800491a:	6560      	str	r0, [r4, #84]	; 0x54
 800491c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800491e:	602f      	str	r7, [r5, #0]
 8004920:	2900      	cmp	r1, #0
 8004922:	d0ca      	beq.n	80048ba <__sflush_r+0x1a>
 8004924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004928:	4299      	cmp	r1, r3
 800492a:	d002      	beq.n	8004932 <__sflush_r+0x92>
 800492c:	4628      	mov	r0, r5
 800492e:	f7ff fc85 	bl	800423c <_free_r>
 8004932:	2000      	movs	r0, #0
 8004934:	6360      	str	r0, [r4, #52]	; 0x34
 8004936:	e7c1      	b.n	80048bc <__sflush_r+0x1c>
 8004938:	6a21      	ldr	r1, [r4, #32]
 800493a:	2301      	movs	r3, #1
 800493c:	4628      	mov	r0, r5
 800493e:	47b0      	blx	r6
 8004940:	1c41      	adds	r1, r0, #1
 8004942:	d1c7      	bne.n	80048d4 <__sflush_r+0x34>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0c4      	beq.n	80048d4 <__sflush_r+0x34>
 800494a:	2b1d      	cmp	r3, #29
 800494c:	d001      	beq.n	8004952 <__sflush_r+0xb2>
 800494e:	2b16      	cmp	r3, #22
 8004950:	d101      	bne.n	8004956 <__sflush_r+0xb6>
 8004952:	602f      	str	r7, [r5, #0]
 8004954:	e7b1      	b.n	80048ba <__sflush_r+0x1a>
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800495c:	81a3      	strh	r3, [r4, #12]
 800495e:	e7ad      	b.n	80048bc <__sflush_r+0x1c>
 8004960:	690f      	ldr	r7, [r1, #16]
 8004962:	2f00      	cmp	r7, #0
 8004964:	d0a9      	beq.n	80048ba <__sflush_r+0x1a>
 8004966:	0793      	lsls	r3, r2, #30
 8004968:	bf18      	it	ne
 800496a:	2300      	movne	r3, #0
 800496c:	680e      	ldr	r6, [r1, #0]
 800496e:	bf08      	it	eq
 8004970:	694b      	ldreq	r3, [r1, #20]
 8004972:	eba6 0807 	sub.w	r8, r6, r7
 8004976:	600f      	str	r7, [r1, #0]
 8004978:	608b      	str	r3, [r1, #8]
 800497a:	f1b8 0f00 	cmp.w	r8, #0
 800497e:	dd9c      	ble.n	80048ba <__sflush_r+0x1a>
 8004980:	4643      	mov	r3, r8
 8004982:	463a      	mov	r2, r7
 8004984:	4628      	mov	r0, r5
 8004986:	6a21      	ldr	r1, [r4, #32]
 8004988:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800498a:	47b0      	blx	r6
 800498c:	2800      	cmp	r0, #0
 800498e:	dc06      	bgt.n	800499e <__sflush_r+0xfe>
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	f04f 30ff 	mov.w	r0, #4294967295
 8004996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800499a:	81a3      	strh	r3, [r4, #12]
 800499c:	e78e      	b.n	80048bc <__sflush_r+0x1c>
 800499e:	4407      	add	r7, r0
 80049a0:	eba8 0800 	sub.w	r8, r8, r0
 80049a4:	e7e9      	b.n	800497a <__sflush_r+0xda>
 80049a6:	bf00      	nop
 80049a8:	20400001 	.word	0x20400001

080049ac <_fflush_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	690b      	ldr	r3, [r1, #16]
 80049b0:	4605      	mov	r5, r0
 80049b2:	460c      	mov	r4, r1
 80049b4:	b913      	cbnz	r3, 80049bc <_fflush_r+0x10>
 80049b6:	2500      	movs	r5, #0
 80049b8:	4628      	mov	r0, r5
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	b118      	cbz	r0, 80049c6 <_fflush_r+0x1a>
 80049be:	6983      	ldr	r3, [r0, #24]
 80049c0:	b90b      	cbnz	r3, 80049c6 <_fflush_r+0x1a>
 80049c2:	f000 f887 	bl	8004ad4 <__sinit>
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <_fflush_r+0x6c>)
 80049c8:	429c      	cmp	r4, r3
 80049ca:	d11b      	bne.n	8004a04 <_fflush_r+0x58>
 80049cc:	686c      	ldr	r4, [r5, #4]
 80049ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0ef      	beq.n	80049b6 <_fflush_r+0xa>
 80049d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049d8:	07d0      	lsls	r0, r2, #31
 80049da:	d404      	bmi.n	80049e6 <_fflush_r+0x3a>
 80049dc:	0599      	lsls	r1, r3, #22
 80049de:	d402      	bmi.n	80049e6 <_fflush_r+0x3a>
 80049e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049e2:	f000 f915 	bl	8004c10 <__retarget_lock_acquire_recursive>
 80049e6:	4628      	mov	r0, r5
 80049e8:	4621      	mov	r1, r4
 80049ea:	f7ff ff59 	bl	80048a0 <__sflush_r>
 80049ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049f0:	4605      	mov	r5, r0
 80049f2:	07da      	lsls	r2, r3, #31
 80049f4:	d4e0      	bmi.n	80049b8 <_fflush_r+0xc>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	059b      	lsls	r3, r3, #22
 80049fa:	d4dd      	bmi.n	80049b8 <_fflush_r+0xc>
 80049fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049fe:	f000 f908 	bl	8004c12 <__retarget_lock_release_recursive>
 8004a02:	e7d9      	b.n	80049b8 <_fflush_r+0xc>
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <_fflush_r+0x70>)
 8004a06:	429c      	cmp	r4, r3
 8004a08:	d101      	bne.n	8004a0e <_fflush_r+0x62>
 8004a0a:	68ac      	ldr	r4, [r5, #8]
 8004a0c:	e7df      	b.n	80049ce <_fflush_r+0x22>
 8004a0e:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <_fflush_r+0x74>)
 8004a10:	429c      	cmp	r4, r3
 8004a12:	bf08      	it	eq
 8004a14:	68ec      	ldreq	r4, [r5, #12]
 8004a16:	e7da      	b.n	80049ce <_fflush_r+0x22>
 8004a18:	0800531c 	.word	0x0800531c
 8004a1c:	0800533c 	.word	0x0800533c
 8004a20:	080052fc 	.word	0x080052fc

08004a24 <std>:
 8004a24:	2300      	movs	r3, #0
 8004a26:	b510      	push	{r4, lr}
 8004a28:	4604      	mov	r4, r0
 8004a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a32:	6083      	str	r3, [r0, #8]
 8004a34:	8181      	strh	r1, [r0, #12]
 8004a36:	6643      	str	r3, [r0, #100]	; 0x64
 8004a38:	81c2      	strh	r2, [r0, #14]
 8004a3a:	6183      	str	r3, [r0, #24]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	2208      	movs	r2, #8
 8004a40:	305c      	adds	r0, #92	; 0x5c
 8004a42:	f7fd fd5f 	bl	8002504 <memset>
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <std+0x38>)
 8004a48:	6224      	str	r4, [r4, #32]
 8004a4a:	6263      	str	r3, [r4, #36]	; 0x24
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <std+0x3c>)
 8004a4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <std+0x40>)
 8004a52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a54:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <std+0x44>)
 8004a56:	6323      	str	r3, [r4, #48]	; 0x30
 8004a58:	bd10      	pop	{r4, pc}
 8004a5a:	bf00      	nop
 8004a5c:	08004d65 	.word	0x08004d65
 8004a60:	08004d87 	.word	0x08004d87
 8004a64:	08004dbf 	.word	0x08004dbf
 8004a68:	08004de3 	.word	0x08004de3

08004a6c <_cleanup_r>:
 8004a6c:	4901      	ldr	r1, [pc, #4]	; (8004a74 <_cleanup_r+0x8>)
 8004a6e:	f000 b8af 	b.w	8004bd0 <_fwalk_reent>
 8004a72:	bf00      	nop
 8004a74:	080049ad 	.word	0x080049ad

08004a78 <__sfmoreglue>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	2568      	movs	r5, #104	; 0x68
 8004a7c:	1e4a      	subs	r2, r1, #1
 8004a7e:	4355      	muls	r5, r2
 8004a80:	460e      	mov	r6, r1
 8004a82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a86:	f7ff fc25 	bl	80042d4 <_malloc_r>
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	b140      	cbz	r0, 8004aa0 <__sfmoreglue+0x28>
 8004a8e:	2100      	movs	r1, #0
 8004a90:	e9c0 1600 	strd	r1, r6, [r0]
 8004a94:	300c      	adds	r0, #12
 8004a96:	60a0      	str	r0, [r4, #8]
 8004a98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a9c:	f7fd fd32 	bl	8002504 <memset>
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	bd70      	pop	{r4, r5, r6, pc}

08004aa4 <__sfp_lock_acquire>:
 8004aa4:	4801      	ldr	r0, [pc, #4]	; (8004aac <__sfp_lock_acquire+0x8>)
 8004aa6:	f000 b8b3 	b.w	8004c10 <__retarget_lock_acquire_recursive>
 8004aaa:	bf00      	nop
 8004aac:	200002b0 	.word	0x200002b0

08004ab0 <__sfp_lock_release>:
 8004ab0:	4801      	ldr	r0, [pc, #4]	; (8004ab8 <__sfp_lock_release+0x8>)
 8004ab2:	f000 b8ae 	b.w	8004c12 <__retarget_lock_release_recursive>
 8004ab6:	bf00      	nop
 8004ab8:	200002b0 	.word	0x200002b0

08004abc <__sinit_lock_acquire>:
 8004abc:	4801      	ldr	r0, [pc, #4]	; (8004ac4 <__sinit_lock_acquire+0x8>)
 8004abe:	f000 b8a7 	b.w	8004c10 <__retarget_lock_acquire_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	200002ab 	.word	0x200002ab

08004ac8 <__sinit_lock_release>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	; (8004ad0 <__sinit_lock_release+0x8>)
 8004aca:	f000 b8a2 	b.w	8004c12 <__retarget_lock_release_recursive>
 8004ace:	bf00      	nop
 8004ad0:	200002ab 	.word	0x200002ab

08004ad4 <__sinit>:
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	f7ff fff0 	bl	8004abc <__sinit_lock_acquire>
 8004adc:	69a3      	ldr	r3, [r4, #24]
 8004ade:	b11b      	cbz	r3, 8004ae8 <__sinit+0x14>
 8004ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ae4:	f7ff bff0 	b.w	8004ac8 <__sinit_lock_release>
 8004ae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004aec:	6523      	str	r3, [r4, #80]	; 0x50
 8004aee:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <__sinit+0x68>)
 8004af0:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <__sinit+0x6c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004af6:	42a3      	cmp	r3, r4
 8004af8:	bf08      	it	eq
 8004afa:	2301      	moveq	r3, #1
 8004afc:	4620      	mov	r0, r4
 8004afe:	bf08      	it	eq
 8004b00:	61a3      	streq	r3, [r4, #24]
 8004b02:	f000 f81f 	bl	8004b44 <__sfp>
 8004b06:	6060      	str	r0, [r4, #4]
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f000 f81b 	bl	8004b44 <__sfp>
 8004b0e:	60a0      	str	r0, [r4, #8]
 8004b10:	4620      	mov	r0, r4
 8004b12:	f000 f817 	bl	8004b44 <__sfp>
 8004b16:	2200      	movs	r2, #0
 8004b18:	2104      	movs	r1, #4
 8004b1a:	60e0      	str	r0, [r4, #12]
 8004b1c:	6860      	ldr	r0, [r4, #4]
 8004b1e:	f7ff ff81 	bl	8004a24 <std>
 8004b22:	2201      	movs	r2, #1
 8004b24:	2109      	movs	r1, #9
 8004b26:	68a0      	ldr	r0, [r4, #8]
 8004b28:	f7ff ff7c 	bl	8004a24 <std>
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	2112      	movs	r1, #18
 8004b30:	68e0      	ldr	r0, [r4, #12]
 8004b32:	f7ff ff77 	bl	8004a24 <std>
 8004b36:	2301      	movs	r3, #1
 8004b38:	61a3      	str	r3, [r4, #24]
 8004b3a:	e7d1      	b.n	8004ae0 <__sinit+0xc>
 8004b3c:	08004f78 	.word	0x08004f78
 8004b40:	08004a6d 	.word	0x08004a6d

08004b44 <__sfp>:
 8004b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b46:	4607      	mov	r7, r0
 8004b48:	f7ff ffac 	bl	8004aa4 <__sfp_lock_acquire>
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <__sfp+0x84>)
 8004b4e:	681e      	ldr	r6, [r3, #0]
 8004b50:	69b3      	ldr	r3, [r6, #24]
 8004b52:	b913      	cbnz	r3, 8004b5a <__sfp+0x16>
 8004b54:	4630      	mov	r0, r6
 8004b56:	f7ff ffbd 	bl	8004ad4 <__sinit>
 8004b5a:	3648      	adds	r6, #72	; 0x48
 8004b5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	d503      	bpl.n	8004b6c <__sfp+0x28>
 8004b64:	6833      	ldr	r3, [r6, #0]
 8004b66:	b30b      	cbz	r3, 8004bac <__sfp+0x68>
 8004b68:	6836      	ldr	r6, [r6, #0]
 8004b6a:	e7f7      	b.n	8004b5c <__sfp+0x18>
 8004b6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b70:	b9d5      	cbnz	r5, 8004ba8 <__sfp+0x64>
 8004b72:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <__sfp+0x88>)
 8004b74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b78:	60e3      	str	r3, [r4, #12]
 8004b7a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b7c:	f000 f847 	bl	8004c0e <__retarget_lock_init_recursive>
 8004b80:	f7ff ff96 	bl	8004ab0 <__sfp_lock_release>
 8004b84:	2208      	movs	r2, #8
 8004b86:	4629      	mov	r1, r5
 8004b88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b90:	6025      	str	r5, [r4, #0]
 8004b92:	61a5      	str	r5, [r4, #24]
 8004b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b98:	f7fd fcb4 	bl	8002504 <memset>
 8004b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba8:	3468      	adds	r4, #104	; 0x68
 8004baa:	e7d9      	b.n	8004b60 <__sfp+0x1c>
 8004bac:	2104      	movs	r1, #4
 8004bae:	4638      	mov	r0, r7
 8004bb0:	f7ff ff62 	bl	8004a78 <__sfmoreglue>
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	6030      	str	r0, [r6, #0]
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d1d5      	bne.n	8004b68 <__sfp+0x24>
 8004bbc:	f7ff ff78 	bl	8004ab0 <__sfp_lock_release>
 8004bc0:	230c      	movs	r3, #12
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	e7ee      	b.n	8004ba4 <__sfp+0x60>
 8004bc6:	bf00      	nop
 8004bc8:	08004f78 	.word	0x08004f78
 8004bcc:	ffff0001 	.word	0xffff0001

08004bd0 <_fwalk_reent>:
 8004bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	4688      	mov	r8, r1
 8004bd8:	2700      	movs	r7, #0
 8004bda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004be2:	f1b9 0901 	subs.w	r9, r9, #1
 8004be6:	d505      	bpl.n	8004bf4 <_fwalk_reent+0x24>
 8004be8:	6824      	ldr	r4, [r4, #0]
 8004bea:	2c00      	cmp	r4, #0
 8004bec:	d1f7      	bne.n	8004bde <_fwalk_reent+0xe>
 8004bee:	4638      	mov	r0, r7
 8004bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bf4:	89ab      	ldrh	r3, [r5, #12]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d907      	bls.n	8004c0a <_fwalk_reent+0x3a>
 8004bfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	d003      	beq.n	8004c0a <_fwalk_reent+0x3a>
 8004c02:	4629      	mov	r1, r5
 8004c04:	4630      	mov	r0, r6
 8004c06:	47c0      	blx	r8
 8004c08:	4307      	orrs	r7, r0
 8004c0a:	3568      	adds	r5, #104	; 0x68
 8004c0c:	e7e9      	b.n	8004be2 <_fwalk_reent+0x12>

08004c0e <__retarget_lock_init_recursive>:
 8004c0e:	4770      	bx	lr

08004c10 <__retarget_lock_acquire_recursive>:
 8004c10:	4770      	bx	lr

08004c12 <__retarget_lock_release_recursive>:
 8004c12:	4770      	bx	lr

08004c14 <__swhatbuf_r>:
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	460e      	mov	r6, r1
 8004c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1c:	4614      	mov	r4, r2
 8004c1e:	2900      	cmp	r1, #0
 8004c20:	461d      	mov	r5, r3
 8004c22:	b096      	sub	sp, #88	; 0x58
 8004c24:	da07      	bge.n	8004c36 <__swhatbuf_r+0x22>
 8004c26:	2300      	movs	r3, #0
 8004c28:	602b      	str	r3, [r5, #0]
 8004c2a:	89b3      	ldrh	r3, [r6, #12]
 8004c2c:	061a      	lsls	r2, r3, #24
 8004c2e:	d410      	bmi.n	8004c52 <__swhatbuf_r+0x3e>
 8004c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c34:	e00e      	b.n	8004c54 <__swhatbuf_r+0x40>
 8004c36:	466a      	mov	r2, sp
 8004c38:	f000 f8fa 	bl	8004e30 <_fstat_r>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	dbf2      	blt.n	8004c26 <__swhatbuf_r+0x12>
 8004c40:	9a01      	ldr	r2, [sp, #4]
 8004c42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c4a:	425a      	negs	r2, r3
 8004c4c:	415a      	adcs	r2, r3
 8004c4e:	602a      	str	r2, [r5, #0]
 8004c50:	e7ee      	b.n	8004c30 <__swhatbuf_r+0x1c>
 8004c52:	2340      	movs	r3, #64	; 0x40
 8004c54:	2000      	movs	r0, #0
 8004c56:	6023      	str	r3, [r4, #0]
 8004c58:	b016      	add	sp, #88	; 0x58
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}

08004c5c <__smakebuf_r>:
 8004c5c:	898b      	ldrh	r3, [r1, #12]
 8004c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c60:	079d      	lsls	r5, r3, #30
 8004c62:	4606      	mov	r6, r0
 8004c64:	460c      	mov	r4, r1
 8004c66:	d507      	bpl.n	8004c78 <__smakebuf_r+0x1c>
 8004c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	6123      	str	r3, [r4, #16]
 8004c70:	2301      	movs	r3, #1
 8004c72:	6163      	str	r3, [r4, #20]
 8004c74:	b002      	add	sp, #8
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	466a      	mov	r2, sp
 8004c7a:	ab01      	add	r3, sp, #4
 8004c7c:	f7ff ffca 	bl	8004c14 <__swhatbuf_r>
 8004c80:	9900      	ldr	r1, [sp, #0]
 8004c82:	4605      	mov	r5, r0
 8004c84:	4630      	mov	r0, r6
 8004c86:	f7ff fb25 	bl	80042d4 <_malloc_r>
 8004c8a:	b948      	cbnz	r0, 8004ca0 <__smakebuf_r+0x44>
 8004c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c90:	059a      	lsls	r2, r3, #22
 8004c92:	d4ef      	bmi.n	8004c74 <__smakebuf_r+0x18>
 8004c94:	f023 0303 	bic.w	r3, r3, #3
 8004c98:	f043 0302 	orr.w	r3, r3, #2
 8004c9c:	81a3      	strh	r3, [r4, #12]
 8004c9e:	e7e3      	b.n	8004c68 <__smakebuf_r+0xc>
 8004ca0:	4b0d      	ldr	r3, [pc, #52]	; (8004cd8 <__smakebuf_r+0x7c>)
 8004ca2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	6020      	str	r0, [r4, #0]
 8004ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cac:	81a3      	strh	r3, [r4, #12]
 8004cae:	9b00      	ldr	r3, [sp, #0]
 8004cb0:	6120      	str	r0, [r4, #16]
 8004cb2:	6163      	str	r3, [r4, #20]
 8004cb4:	9b01      	ldr	r3, [sp, #4]
 8004cb6:	b15b      	cbz	r3, 8004cd0 <__smakebuf_r+0x74>
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cbe:	f000 f8c9 	bl	8004e54 <_isatty_r>
 8004cc2:	b128      	cbz	r0, 8004cd0 <__smakebuf_r+0x74>
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	f023 0303 	bic.w	r3, r3, #3
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	81a3      	strh	r3, [r4, #12]
 8004cd0:	89a0      	ldrh	r0, [r4, #12]
 8004cd2:	4305      	orrs	r5, r0
 8004cd4:	81a5      	strh	r5, [r4, #12]
 8004cd6:	e7cd      	b.n	8004c74 <__smakebuf_r+0x18>
 8004cd8:	08004a6d 	.word	0x08004a6d

08004cdc <_raise_r>:
 8004cdc:	291f      	cmp	r1, #31
 8004cde:	b538      	push	{r3, r4, r5, lr}
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	460d      	mov	r5, r1
 8004ce4:	d904      	bls.n	8004cf0 <_raise_r+0x14>
 8004ce6:	2316      	movs	r3, #22
 8004ce8:	6003      	str	r3, [r0, #0]
 8004cea:	f04f 30ff 	mov.w	r0, #4294967295
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004cf2:	b112      	cbz	r2, 8004cfa <_raise_r+0x1e>
 8004cf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004cf8:	b94b      	cbnz	r3, 8004d0e <_raise_r+0x32>
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f000 f830 	bl	8004d60 <_getpid_r>
 8004d00:	462a      	mov	r2, r5
 8004d02:	4601      	mov	r1, r0
 8004d04:	4620      	mov	r0, r4
 8004d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d0a:	f000 b817 	b.w	8004d3c <_kill_r>
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d00a      	beq.n	8004d28 <_raise_r+0x4c>
 8004d12:	1c59      	adds	r1, r3, #1
 8004d14:	d103      	bne.n	8004d1e <_raise_r+0x42>
 8004d16:	2316      	movs	r3, #22
 8004d18:	6003      	str	r3, [r0, #0]
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	e7e7      	b.n	8004cee <_raise_r+0x12>
 8004d1e:	2400      	movs	r4, #0
 8004d20:	4628      	mov	r0, r5
 8004d22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004d26:	4798      	blx	r3
 8004d28:	2000      	movs	r0, #0
 8004d2a:	e7e0      	b.n	8004cee <_raise_r+0x12>

08004d2c <raise>:
 8004d2c:	4b02      	ldr	r3, [pc, #8]	; (8004d38 <raise+0xc>)
 8004d2e:	4601      	mov	r1, r0
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	f7ff bfd3 	b.w	8004cdc <_raise_r>
 8004d36:	bf00      	nop
 8004d38:	20000000 	.word	0x20000000

08004d3c <_kill_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	2300      	movs	r3, #0
 8004d40:	4d06      	ldr	r5, [pc, #24]	; (8004d5c <_kill_r+0x20>)
 8004d42:	4604      	mov	r4, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	f000 f8d7 	bl	8004efc <_kill>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	d102      	bne.n	8004d58 <_kill_r+0x1c>
 8004d52:	682b      	ldr	r3, [r5, #0]
 8004d54:	b103      	cbz	r3, 8004d58 <_kill_r+0x1c>
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	bd38      	pop	{r3, r4, r5, pc}
 8004d5a:	bf00      	nop
 8004d5c:	200002a4 	.word	0x200002a4

08004d60 <_getpid_r>:
 8004d60:	f000 b8bc 	b.w	8004edc <_getpid>

08004d64 <__sread>:
 8004d64:	b510      	push	{r4, lr}
 8004d66:	460c      	mov	r4, r1
 8004d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6c:	f000 f894 	bl	8004e98 <_read_r>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	bfab      	itete	ge
 8004d74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d76:	89a3      	ldrhlt	r3, [r4, #12]
 8004d78:	181b      	addge	r3, r3, r0
 8004d7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d7e:	bfac      	ite	ge
 8004d80:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d82:	81a3      	strhlt	r3, [r4, #12]
 8004d84:	bd10      	pop	{r4, pc}

08004d86 <__swrite>:
 8004d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8a:	461f      	mov	r7, r3
 8004d8c:	898b      	ldrh	r3, [r1, #12]
 8004d8e:	4605      	mov	r5, r0
 8004d90:	05db      	lsls	r3, r3, #23
 8004d92:	460c      	mov	r4, r1
 8004d94:	4616      	mov	r6, r2
 8004d96:	d505      	bpl.n	8004da4 <__swrite+0x1e>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	f000 f868 	bl	8004e74 <_lseek_r>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	4632      	mov	r2, r6
 8004da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	4628      	mov	r0, r5
 8004db0:	463b      	mov	r3, r7
 8004db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dba:	f000 b817 	b.w	8004dec <_write_r>

08004dbe <__sseek>:
 8004dbe:	b510      	push	{r4, lr}
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc6:	f000 f855 	bl	8004e74 <_lseek_r>
 8004dca:	1c43      	adds	r3, r0, #1
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	bf15      	itete	ne
 8004dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dda:	81a3      	strheq	r3, [r4, #12]
 8004ddc:	bf18      	it	ne
 8004dde:	81a3      	strhne	r3, [r4, #12]
 8004de0:	bd10      	pop	{r4, pc}

08004de2 <__sclose>:
 8004de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de6:	f000 b813 	b.w	8004e10 <_close_r>
	...

08004dec <_write_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4604      	mov	r4, r0
 8004df0:	4608      	mov	r0, r1
 8004df2:	4611      	mov	r1, r2
 8004df4:	2200      	movs	r2, #0
 8004df6:	4d05      	ldr	r5, [pc, #20]	; (8004e0c <_write_r+0x20>)
 8004df8:	602a      	str	r2, [r5, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f000 f8a4 	bl	8004f48 <_write>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d102      	bne.n	8004e0a <_write_r+0x1e>
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	b103      	cbz	r3, 8004e0a <_write_r+0x1e>
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	200002a4 	.word	0x200002a4

08004e10 <_close_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	2300      	movs	r3, #0
 8004e14:	4d05      	ldr	r5, [pc, #20]	; (8004e2c <_close_r+0x1c>)
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	f000 f84e 	bl	8004ebc <_close>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_close_r+0x1a>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_close_r+0x1a>
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	200002a4 	.word	0x200002a4

08004e30 <_fstat_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	2300      	movs	r3, #0
 8004e34:	4d06      	ldr	r5, [pc, #24]	; (8004e50 <_fstat_r+0x20>)
 8004e36:	4604      	mov	r4, r0
 8004e38:	4608      	mov	r0, r1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	602b      	str	r3, [r5, #0]
 8004e3e:	f000 f845 	bl	8004ecc <_fstat>
 8004e42:	1c43      	adds	r3, r0, #1
 8004e44:	d102      	bne.n	8004e4c <_fstat_r+0x1c>
 8004e46:	682b      	ldr	r3, [r5, #0]
 8004e48:	b103      	cbz	r3, 8004e4c <_fstat_r+0x1c>
 8004e4a:	6023      	str	r3, [r4, #0]
 8004e4c:	bd38      	pop	{r3, r4, r5, pc}
 8004e4e:	bf00      	nop
 8004e50:	200002a4 	.word	0x200002a4

08004e54 <_isatty_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	2300      	movs	r3, #0
 8004e58:	4d05      	ldr	r5, [pc, #20]	; (8004e70 <_isatty_r+0x1c>)
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	602b      	str	r3, [r5, #0]
 8004e60:	f000 f844 	bl	8004eec <_isatty>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d102      	bne.n	8004e6e <_isatty_r+0x1a>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	b103      	cbz	r3, 8004e6e <_isatty_r+0x1a>
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
 8004e70:	200002a4 	.word	0x200002a4

08004e74 <_lseek_r>:
 8004e74:	b538      	push	{r3, r4, r5, lr}
 8004e76:	4604      	mov	r4, r0
 8004e78:	4608      	mov	r0, r1
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	4d05      	ldr	r5, [pc, #20]	; (8004e94 <_lseek_r+0x20>)
 8004e80:	602a      	str	r2, [r5, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f000 f842 	bl	8004f0c <_lseek>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_lseek_r+0x1e>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_lseek_r+0x1e>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	200002a4 	.word	0x200002a4

08004e98 <_read_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	4d05      	ldr	r5, [pc, #20]	; (8004eb8 <_read_r+0x20>)
 8004ea4:	602a      	str	r2, [r5, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 f838 	bl	8004f1c <_read>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d102      	bne.n	8004eb6 <_read_r+0x1e>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	b103      	cbz	r3, 8004eb6 <_read_r+0x1e>
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	200002a4 	.word	0x200002a4

08004ebc <_close>:
 8004ebc:	2258      	movs	r2, #88	; 0x58
 8004ebe:	4b02      	ldr	r3, [pc, #8]	; (8004ec8 <_close+0xc>)
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	4770      	bx	lr
 8004ec8:	200002a4 	.word	0x200002a4

08004ecc <_fstat>:
 8004ecc:	2258      	movs	r2, #88	; 0x58
 8004ece:	4b02      	ldr	r3, [pc, #8]	; (8004ed8 <_fstat+0xc>)
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	4770      	bx	lr
 8004ed8:	200002a4 	.word	0x200002a4

08004edc <_getpid>:
 8004edc:	2258      	movs	r2, #88	; 0x58
 8004ede:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <_getpid+0xc>)
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	4770      	bx	lr
 8004ee8:	200002a4 	.word	0x200002a4

08004eec <_isatty>:
 8004eec:	2258      	movs	r2, #88	; 0x58
 8004eee:	4b02      	ldr	r3, [pc, #8]	; (8004ef8 <_isatty+0xc>)
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	200002a4 	.word	0x200002a4

08004efc <_kill>:
 8004efc:	2258      	movs	r2, #88	; 0x58
 8004efe:	4b02      	ldr	r3, [pc, #8]	; (8004f08 <_kill+0xc>)
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	4770      	bx	lr
 8004f08:	200002a4 	.word	0x200002a4

08004f0c <_lseek>:
 8004f0c:	2258      	movs	r2, #88	; 0x58
 8004f0e:	4b02      	ldr	r3, [pc, #8]	; (8004f18 <_lseek+0xc>)
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	4770      	bx	lr
 8004f18:	200002a4 	.word	0x200002a4

08004f1c <_read>:
 8004f1c:	2258      	movs	r2, #88	; 0x58
 8004f1e:	4b02      	ldr	r3, [pc, #8]	; (8004f28 <_read+0xc>)
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	4770      	bx	lr
 8004f28:	200002a4 	.word	0x200002a4

08004f2c <_sbrk>:
 8004f2c:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <_sbrk+0x14>)
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6819      	ldr	r1, [r3, #0]
 8004f32:	b909      	cbnz	r1, 8004f38 <_sbrk+0xc>
 8004f34:	4903      	ldr	r1, [pc, #12]	; (8004f44 <_sbrk+0x18>)
 8004f36:	6019      	str	r1, [r3, #0]
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	4402      	add	r2, r0
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	4770      	bx	lr
 8004f40:	20000218 	.word	0x20000218
 8004f44:	200002b8 	.word	0x200002b8

08004f48 <_write>:
 8004f48:	2258      	movs	r2, #88	; 0x58
 8004f4a:	4b02      	ldr	r3, [pc, #8]	; (8004f54 <_write+0xc>)
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	4770      	bx	lr
 8004f54:	200002a4 	.word	0x200002a4

08004f58 <_exit>:
 8004f58:	e7fe      	b.n	8004f58 <_exit>
	...

08004f5c <_init>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr

08004f68 <_fini>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	bf00      	nop
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr
