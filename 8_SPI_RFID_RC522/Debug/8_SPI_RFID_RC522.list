
8_SPI_RFID_RC522.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  080045c0  080045c0  000145c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a60  08004a60  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08004a60  08004a60  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a60  08004a60  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08004a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200001d0  08004c38  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08004c38  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006323  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000116b  00000000  00000000  0002651c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000290  00000000  00000000  00027688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000208  00000000  00000000  00027918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000125c9  00000000  00000000  00027b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004e57  00000000  00000000  0003a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059e04  00000000  00000000  0003ef40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00098d44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019dc  00000000  00000000  00098d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  0009a774  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  0009a828  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	080045a8 	.word	0x080045a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	080045a8 	.word	0x080045a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <rc522_init>:

/**
 * @brief initialize function
 */
void rc522_init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  rc522_reset();
 8000a8c:	f000 f8a0 	bl	8000bd0 <rc522_reset>

  rc522_regWrite8(MFRC522_REG_T_MODE, 0x80);
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	202a      	movs	r0, #42	; 0x2a
 8000a94:	f000 f842 	bl	8000b1c <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_PRESCALER, 0xA9);
 8000a98:	21a9      	movs	r1, #169	; 0xa9
 8000a9a:	202b      	movs	r0, #43	; 0x2b
 8000a9c:	f000 f83e 	bl	8000b1c <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_L, 0xE8);
 8000aa0:	21e8      	movs	r1, #232	; 0xe8
 8000aa2:	202d      	movs	r0, #45	; 0x2d
 8000aa4:	f000 f83a 	bl	8000b1c <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_H, 0x03);
 8000aa8:	2103      	movs	r1, #3
 8000aaa:	202c      	movs	r0, #44	; 0x2c
 8000aac:	f000 f836 	bl	8000b1c <rc522_regWrite8>

  /* 48dB gain */
//  rc522_regWrite8(MFRC522_REG_RF_CFG, 0x70);

  rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	2015      	movs	r0, #21
 8000ab4:	f000 f832 	bl	8000b1c <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_MODE, 0x3D);
 8000ab8:	213d      	movs	r1, #61	; 0x3d
 8000aba:	2011      	movs	r0, #17
 8000abc:	f000 f82e 	bl	8000b1c <rc522_regWrite8>

  rc522_antennaON();   //Open the antenna
 8000ac0:	f000 f88e 	bl	8000be0 <rc522_antennaON>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <rc522_regRead8>:

/**
 * @brief read register
 */
uint8_t rc522_regRead8(uint8_t reg)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  spi_RFID_CS_write(0);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 fe76 	bl	80017c4 <spi_RFID_CS_write>
  reg = ((reg << 1) & 0x7E) | 0x80;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ae8:	b25b      	sxtb	r3, r3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	71fb      	strb	r3, [r7, #7]
  spi_transmit(&reg, 1, 100);
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	2264      	movs	r2, #100	; 0x64
 8000af2:	2101      	movs	r1, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fd89 	bl	800160c <spi_transmit>
  uint8_t dataRd=0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]
  spi_receive(&dataRd, 1, 100);
 8000afe:	f107 030f 	add.w	r3, r7, #15
 8000b02:	2264      	movs	r2, #100	; 0x64
 8000b04:	2101      	movs	r1, #1
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fdd0 	bl	80016ac <spi_receive>
  spi_RFID_CS_write(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 fe59 	bl	80017c4 <spi_RFID_CS_write>
  return dataRd;
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <rc522_regWrite8>:

/**
 * @brief write register
 */
void rc522_regWrite8(uint8_t reg, uint8_t data8)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
  spi_RFID_CS_write(0);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f000 fe49 	bl	80017c4 <spi_RFID_CS_write>
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	733b      	strb	r3, [r7, #12]
 8000b40:	79bb      	ldrb	r3, [r7, #6]
 8000b42:	737b      	strb	r3, [r7, #13]
  spi_transmit(txData, 2, 100);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2264      	movs	r2, #100	; 0x64
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fd5d 	bl	800160c <spi_transmit>
  spi_RFID_CS_write(1);
 8000b52:	2001      	movs	r0, #1
 8000b54:	f000 fe36 	bl	80017c4 <spi_RFID_CS_write>
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <rc522_setBit>:

/**
 * @brief set bit
 */
void rc522_setBit(uint8_t reg, uint8_t mask)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	460a      	mov	r2, r1
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ffa8 	bl	8000ac8 <rc522_regRead8>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	79bb      	ldrb	r3, [r7, #6]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ffc8 	bl	8000b1c <rc522_regWrite8>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <rc522_clearBit>:

/**
 * @brief clear bit
 */
void rc522_clearBit(uint8_t reg, uint8_t mask)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff8e 	bl	8000ac8 <rc522_regRead8>
 8000bac:	4603      	mov	r3, r0
 8000bae:	b25a      	sxtb	r2, r3
 8000bb0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ffaa 	bl	8000b1c <rc522_regWrite8>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <rc522_reset>:

/**
 * @brief reset function
 */
void rc522_reset(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  rc522_regWrite8(0x01, 0x0F);
 8000bd4:	210f      	movs	r1, #15
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff ffa0 	bl	8000b1c <rc522_regWrite8>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <rc522_antennaON>:

/**
 * @brief Antenna ON
 */
void rc522_antennaON(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  uint8_t temp;

  temp = rc522_regRead8(MFRC522_REG_TX_CONTROL);
 8000be6:	2014      	movs	r0, #20
 8000be8:	f7ff ff6e 	bl	8000ac8 <rc522_regRead8>
 8000bec:	4603      	mov	r3, r0
 8000bee:	71fb      	strb	r3, [r7, #7]
  if (!(temp & 0x03)) {
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <rc522_antennaON+0x22>
    rc522_setBit(MFRC522_REG_TX_CONTROL, 0x03);
 8000bfa:	2103      	movs	r1, #3
 8000bfc:	2014      	movs	r0, #20
 8000bfe:	f7ff ffaf 	bl	8000b60 <rc522_setBit>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <rc522_checkCard>:

/**
 * @brief Check card
 */
bool rc522_checkCard(uint8_t *id)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  bool status=false;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
  //Find cards, return card type
    status = rc522_request(PICC_REQIDL, id);
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	2026      	movs	r0, #38	; 0x26
 8000c1a:	f000 f811 	bl	8000c40 <rc522_request>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	73fb      	strb	r3, [r7, #15]
    if (status == true) {
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <rc522_checkCard+0x28>
      //Card detected
      //Anti-collision, return card serial number 4 bytes
      status = rc522_antiColl(id);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 f91d 	bl	8000e68 <rc522_antiColl>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]
    }
    rc522_halt();      //Command card into hibernation
 8000c32:	f000 f956 	bl	8000ee2 <rc522_halt>

    return status;
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  bool status=false;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]
  uint16_t backBits;
  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
 8000c50:	2107      	movs	r1, #7
 8000c52:	200d      	movs	r0, #13
 8000c54:	f7ff ff62 	bl	8000b1c <rc522_regWrite8>
  tagType[0] = reqMode;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2201      	movs	r2, #1
 8000c68:	6839      	ldr	r1, [r7, #0]
 8000c6a:	200c      	movs	r0, #12
 8000c6c:	f000 f812 	bl	8000c94 <rc522_toCard>
 8000c70:	4603      	mov	r3, r0
 8000c72:	73fb      	strb	r3, [r7, #15]
  if ((status != true) || (backBits != 0x10)) {
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	f083 0301 	eor.w	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <rc522_request+0x46>
 8000c80:	89bb      	ldrh	r3, [r7, #12]
 8000c82:	2b10      	cmp	r3, #16
 8000c84:	d001      	beq.n	8000c8a <rc522_request+0x4a>
    status = false;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <rc522_toCard>:
    uint8_t command,
    uint8_t* sendData,
    uint8_t sendLen,
    uint8_t* backData,
    uint16_t* backLen)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	73bb      	strb	r3, [r7, #14]
  bool status = false;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	77fb      	strb	r3, [r7, #31]
  uint8_t irqEn = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	77bb      	strb	r3, [r7, #30]
  uint8_t waitIRq = 0x00;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	777b      	strb	r3, [r7, #29]
  uint8_t lastBits;
  uint8_t n;
  uint16_t i;

  switch (command) {
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	2b0c      	cmp	r3, #12
 8000cb6:	d006      	beq.n	8000cc6 <rc522_toCard+0x32>
 8000cb8:	2b0e      	cmp	r3, #14
 8000cba:	d109      	bne.n	8000cd0 <rc522_toCard+0x3c>
    case PCD_AUTHENT: {
      irqEn = 0x12;
 8000cbc:	2312      	movs	r3, #18
 8000cbe:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x10;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	777b      	strb	r3, [r7, #29]
      break;
 8000cc4:	e005      	b.n	8000cd2 <rc522_toCard+0x3e>
    }
    case PCD_TRANSCEIVE: {
      irqEn = 0x77;
 8000cc6:	2377      	movs	r3, #119	; 0x77
 8000cc8:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x30;
 8000cca:	2330      	movs	r3, #48	; 0x30
 8000ccc:	777b      	strb	r3, [r7, #29]
      break;
 8000cce:	e000      	b.n	8000cd2 <rc522_toCard+0x3e>
    }
    default:
      break;
 8000cd0:	bf00      	nop
  }

  rc522_regWrite8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000cd2:	7fbb      	ldrb	r3, [r7, #30]
 8000cd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	4619      	mov	r1, r3
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f7ff ff1d 	bl	8000b1c <rc522_regWrite8>
  rc522_clearBit(MFRC522_REG_COMM_IRQ, 0x80);
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f7ff ff55 	bl	8000b94 <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	200a      	movs	r0, #10
 8000cee:	f7ff ff37 	bl	8000b60 <rc522_setBit>

  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff ff11 	bl	8000b1c <rc522_regWrite8>

  //Writing data to the FIFO
  for (i = 0; i < sendLen; i++) {
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	837b      	strh	r3, [r7, #26]
 8000cfe:	e00a      	b.n	8000d16 <rc522_toCard+0x82>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000d00:	8b7b      	ldrh	r3, [r7, #26]
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2009      	movs	r0, #9
 8000d0c:	f7ff ff06 	bl	8000b1c <rc522_regWrite8>
  for (i = 0; i < sendLen; i++) {
 8000d10:	8b7b      	ldrh	r3, [r7, #26]
 8000d12:	3301      	adds	r3, #1
 8000d14:	837b      	strh	r3, [r7, #26]
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	8b7a      	ldrh	r2, [r7, #26]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d3ef      	bcc.n	8000d00 <rc522_toCard+0x6c>
  }

  //Execute the command
  rc522_regWrite8(MFRC522_REG_COMMAND, command);
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	4619      	mov	r1, r3
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fef9 	bl	8000b1c <rc522_regWrite8>
  if (command == PCD_TRANSCEIVE) {
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2b0c      	cmp	r3, #12
 8000d2e:	d103      	bne.n	8000d38 <rc522_toCard+0xa4>
    rc522_setBit(MFRC522_REG_BIT_FRAMING, 0x80);   //StartSend=1,transmission of data starts
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	200d      	movs	r0, #13
 8000d34:	f7ff ff14 	bl	8000b60 <rc522_setBit>
  }

  //Waiting to receive data to complete
  i = 100;  //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000d38:	2364      	movs	r3, #100	; 0x64
 8000d3a:	837b      	strh	r3, [r7, #26]
  do {
    //CommIrqReg[7..0]
    //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
 8000d3c:	2004      	movs	r0, #4
 8000d3e:	f7ff fec3 	bl	8000ac8 <rc522_regRead8>
 8000d42:	4603      	mov	r3, r0
 8000d44:	773b      	strb	r3, [r7, #28]
    i--;
 8000d46:	8b7b      	ldrh	r3, [r7, #26]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	837b      	strh	r3, [r7, #26]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000d4c:	8b7b      	ldrh	r3, [r7, #26]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00a      	beq.n	8000d68 <rc522_toCard+0xd4>
 8000d52:	7f3b      	ldrb	r3, [r7, #28]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d105      	bne.n	8000d68 <rc522_toCard+0xd4>
 8000d5c:	7f3a      	ldrb	r2, [r7, #28]
 8000d5e:	7f7b      	ldrb	r3, [r7, #29]
 8000d60:	4013      	ands	r3, r2
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0e9      	beq.n	8000d3c <rc522_toCard+0xa8>

  rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	200d      	movs	r0, #13
 8000d6c:	f7ff ff12 	bl	8000b94 <rc522_clearBit>

  if (i != 0)  {
 8000d70:	8b7b      	ldrh	r3, [r7, #26]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d06d      	beq.n	8000e52 <rc522_toCard+0x1be>
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 8000d76:	2006      	movs	r0, #6
 8000d78:	f7ff fea6 	bl	8000ac8 <rc522_regRead8>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f003 031b 	and.w	r3, r3, #27
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d160      	bne.n	8000e48 <rc522_toCard+0x1b4>
      status = true;
 8000d86:	2301      	movs	r3, #1
 8000d88:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01) {
 8000d8a:	7f3a      	ldrb	r2, [r7, #28]
 8000d8c:	7fbb      	ldrb	r3, [r7, #30]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <rc522_toCard+0x10a>
        status = false;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE) {
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	2b0c      	cmp	r3, #12
 8000da2:	d156      	bne.n	8000e52 <rc522_toCard+0x1be>
        n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
 8000da4:	200a      	movs	r0, #10
 8000da6:	f7ff fe8f 	bl	8000ac8 <rc522_regRead8>
 8000daa:	4603      	mov	r3, r0
 8000dac:	773b      	strb	r3, [r7, #28]
        uint8_t l = n;
 8000dae:	7f3b      	ldrb	r3, [r7, #28]
 8000db0:	767b      	strb	r3, [r7, #25]
        lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
 8000db2:	200c      	movs	r0, #12
 8000db4:	f7ff fe88 	bl	8000ac8 <rc522_regRead8>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	763b      	strb	r3, [r7, #24]
        if (lastBits) {
 8000dc0:	7e3b      	ldrb	r3, [r7, #24]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00b      	beq.n	8000dde <rc522_toCard+0x14a>
          *backLen = (n - 1) * 8 + lastBits;
 8000dc6:	7f3b      	ldrb	r3, [r7, #28]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	7e3b      	ldrb	r3, [r7, #24]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dda:	801a      	strh	r2, [r3, #0]
 8000ddc:	e005      	b.n	8000dea <rc522_toCard+0x156>
        } else {
          *backLen = n * 8;
 8000dde:	7f3b      	ldrb	r3, [r7, #28]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de8:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0) {
 8000dea:	7f3b      	ldrb	r3, [r7, #28]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <rc522_toCard+0x160>
          n = 1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	773b      	strb	r3, [r7, #28]
        }
        if (n > MFRC522_MAX_LEN) {
 8000df4:	7f3b      	ldrb	r3, [r7, #28]
 8000df6:	2b10      	cmp	r3, #16
 8000df8:	d901      	bls.n	8000dfe <rc522_toCard+0x16a>
          n = MFRC522_MAX_LEN;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	773b      	strb	r3, [r7, #28]
        }

        //Reading the received data in FIFO
        for (i = 0; i < n; i++) {
 8000dfe:	2300      	movs	r3, #0
 8000e00:	837b      	strh	r3, [r7, #26]
 8000e02:	e014      	b.n	8000e2e <rc522_toCard+0x19a>
          uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
 8000e04:	2009      	movs	r0, #9
 8000e06:	f7ff fe5f 	bl	8000ac8 <rc522_regRead8>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	75fb      	strb	r3, [r7, #23]
          if (l == 4)
 8000e0e:	7e7b      	ldrb	r3, [r7, #25]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d104      	bne.n	8000e1e <rc522_toCard+0x18a>
            printf("%02x ", d);
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	4619      	mov	r1, r3
 8000e18:	4810      	ldr	r0, [pc, #64]	; (8000e5c <rc522_toCard+0x1c8>)
 8000e1a:	f001 fb25 	bl	8002468 <iprintf>
          backData[i] = d;
 8000e1e:	8b7b      	ldrh	r3, [r7, #26]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	4413      	add	r3, r2
 8000e24:	7dfa      	ldrb	r2, [r7, #23]
 8000e26:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < n; i++) {
 8000e28:	8b7b      	ldrh	r3, [r7, #26]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	837b      	strh	r3, [r7, #26]
 8000e2e:	7f3b      	ldrb	r3, [r7, #28]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	8b7a      	ldrh	r2, [r7, #26]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d3e5      	bcc.n	8000e04 <rc522_toCard+0x170>
        }
        if (l==4)
 8000e38:	7e7b      	ldrb	r3, [r7, #25]
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	d102      	bne.n	8000e44 <rc522_toCard+0x1b0>
          printf("\r\n");
 8000e3e:	4808      	ldr	r0, [pc, #32]	; (8000e60 <rc522_toCard+0x1cc>)
 8000e40:	f001 fb98 	bl	8002574 <puts>
        return status;
 8000e44:	7ffb      	ldrb	r3, [r7, #31]
 8000e46:	e005      	b.n	8000e54 <rc522_toCard+0x1c0>
      }
    } else {
      printf("error\r\n");
 8000e48:	4806      	ldr	r0, [pc, #24]	; (8000e64 <rc522_toCard+0x1d0>)
 8000e4a:	f001 fb93 	bl	8002574 <puts>
      status = false;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8000e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	080045c0 	.word	0x080045c0
 8000e60:	080045c8 	.word	0x080045c8
 8000e64:	080045cc 	.word	0x080045cc

08000e68 <rc522_antiColl>:

bool rc522_antiColl(uint8_t* serNum)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	6078      	str	r0, [r7, #4]
  bool status;
  uint8_t i;
  uint8_t serNumCheck = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	737b      	strb	r3, [r7, #13]
  uint16_t unLen;
  //for (i = 0; i < 4; i++)
//    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);


  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00);    //TxLastBists = BitFramingReg[2..0]
 8000e74:	2100      	movs	r1, #0
 8000e76:	200d      	movs	r0, #13
 8000e78:	f7ff fe50 	bl	8000b1c <rc522_regWrite8>

  serNum[0] = PICC_ANTICOLL;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2293      	movs	r2, #147	; 0x93
 8000e80:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3301      	adds	r3, #1
 8000e86:	2220      	movs	r2, #32
 8000e88:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000e8a:	f107 030a 	add.w	r3, r7, #10
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2202      	movs	r2, #2
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	200c      	movs	r0, #12
 8000e98:	f7ff fefc 	bl	8000c94 <rc522_toCard>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	73fb      	strb	r3, [r7, #15]

  //for (i = 0; i < 4; i++)
//      printf("Anticoll ToCard %d: 0x%02x\r\n", i, serNum[i]);

  if (status == true) {
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d018      	beq.n	8000ed8 <rc522_antiColl+0x70>
    //Check card serial number
    for (i = 0; i < 4; i++) {
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73bb      	strb	r3, [r7, #14]
 8000eaa:	e009      	b.n	8000ec0 <rc522_antiColl+0x58>
      serNumCheck ^= serNum[i];
 8000eac:	7bbb      	ldrb	r3, [r7, #14]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	781a      	ldrb	r2, [r3, #0]
 8000eb4:	7b7b      	ldrb	r3, [r7, #13]
 8000eb6:	4053      	eors	r3, r2
 8000eb8:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 4; i++) {
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	73bb      	strb	r3, [r7, #14]
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d9f2      	bls.n	8000eac <rc522_antiColl+0x44>
    }
    if (serNumCheck != serNum[i]) {
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	7b7a      	ldrb	r2, [r7, #13]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d001      	beq.n	8000ed8 <rc522_antiColl+0x70>
      status = false;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <rc522_halt>:

void rc522_halt(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af02      	add	r7, sp, #8
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
 8000ee8:	2350      	movs	r3, #80	; 0x50
 8000eea:	703b      	strb	r3, [r7, #0]
  buff[1] = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	707b      	strb	r3, [r7, #1]
  rc522_calculateCRC(buff, 2, &buff[2]);
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	1c9a      	adds	r2, r3, #2
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f80d 	bl	8000f18 <rc522_calculateCRC>

  rc522_toCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000efe:	463a      	mov	r2, r7
 8000f00:	4639      	mov	r1, r7
 8000f02:	1dbb      	adds	r3, r7, #6
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	4613      	mov	r3, r2
 8000f08:	2204      	movs	r2, #4
 8000f0a:	200c      	movs	r0, #12
 8000f0c:	f7ff fec2 	bl	8000c94 <rc522_toCard>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <rc522_calculateCRC>:

void rc522_calculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	460b      	mov	r3, r1
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	72fb      	strb	r3, [r7, #11]
  uint8_t i, n;

  rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
 8000f26:	2104      	movs	r1, #4
 8000f28:	2005      	movs	r0, #5
 8000f2a:	f7ff fe33 	bl	8000b94 <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	200a      	movs	r0, #10
 8000f32:	f7ff fe15 	bl	8000b60 <rc522_setBit>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < len; i++) {
 8000f36:	2300      	movs	r3, #0
 8000f38:	75fb      	strb	r3, [r7, #23]
 8000f3a:	e00a      	b.n	8000f52 <rc522_calculateCRC+0x3a>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	4413      	add	r3, r2
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	2009      	movs	r0, #9
 8000f48:	f7ff fde8 	bl	8000b1c <rc522_regWrite8>
  for (i = 0; i < len; i++) {
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	75fb      	strb	r3, [r7, #23]
 8000f52:	7dfa      	ldrb	r2, [r7, #23]
 8000f54:	7afb      	ldrb	r3, [r7, #11]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3f0      	bcc.n	8000f3c <rc522_calculateCRC+0x24>
  }
  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f7ff fddd 	bl	8000b1c <rc522_regWrite8>

  //Wait CRC calculation is complete
  i = 0xFF;
 8000f62:	23ff      	movs	r3, #255	; 0xff
 8000f64:	75fb      	strb	r3, [r7, #23]
  do {
    n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 8000f66:	2005      	movs	r0, #5
 8000f68:	f7ff fdae 	bl	8000ac8 <rc522_regRead8>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	75bb      	strb	r3, [r7, #22]
    i--;
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	75fb      	strb	r3, [r7, #23]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d004      	beq.n	8000f86 <rc522_calculateCRC+0x6e>
 8000f7c:	7dbb      	ldrb	r3, [r7, #22]
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0ef      	beq.n	8000f66 <rc522_calculateCRC+0x4e>

  //Read CRC calculation result
  pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 8000f86:	2022      	movs	r0, #34	; 0x22
 8000f88:	f7ff fd9e 	bl	8000ac8 <rc522_regRead8>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	701a      	strb	r2, [r3, #0]
  pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	1c5c      	adds	r4, r3, #1
 8000f98:	2021      	movs	r0, #33	; 0x21
 8000f9a:	f7ff fd95 	bl	8000ac8 <rc522_regRead8>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	7023      	strb	r3, [r4, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	371c      	adds	r7, #28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}

08000faa <rc522_compareIds>:

/**
 * @brief compare IDs
 */
bool rc522_compareIds(uint8_t *idCurrent, uint8_t *idReference)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b085      	sub	sp, #20
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for(i=0; i<4;i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e00e      	b.n	8000fd8 <rc522_compareIds+0x2e>
  {
    if(idCurrent[i] != idReference[i])
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	6839      	ldr	r1, [r7, #0]
 8000fc6:	440b      	add	r3, r1
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d001      	beq.n	8000fd2 <rc522_compareIds+0x28>
    {
      return false;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e006      	b.n	8000fe0 <rc522_compareIds+0x36>
  for(i=0; i<4;i++)
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d9ed      	bls.n	8000fba <rc522_compareIds+0x10>
    }
  }
  return true;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
	...

08000fec <main>:
 */

#include "main.h"

int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
  // Configure 72MHz clock
  rcc_HSE_config();
 8000ff2:	f000 f991 	bl	8001318 <rcc_HSE_config>
  rcc_SysTick_config();
 8000ff6:	f000 fa15 	bl	8001424 <rcc_SysTick_config>
  // UART configuration
  uart_UART1_GPIO_config();
 8000ffa:	f000 fbff 	bl	80017fc <uart_UART1_GPIO_config>
  uart_UART1_config();
 8000ffe:	f000 fc33 	bl	8001868 <uart_UART1_config>
  // LED configuration
  gpio_LED_config();
 8001002:	f000 f89f 	bl	8001144 <gpio_LED_config>
  // Button configuration
  gpio_PB_config();
 8001006:	f000 f8d5 	bl	80011b4 <gpio_PB_config>
  // Slide switch configuration
  gpio_SW_config();
 800100a:	f000 f8fb 	bl	8001204 <gpio_SW_config>
  gpio_LED_write(0);
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f8b4 	bl	800117c <gpio_LED_write>
  // SPI configuration
  spi_RFID_CS_config();
 8001014:	f000 fbae 	bl	8001774 <spi_RFID_CS_config>
  spi_GPIO_config();
 8001018:	f000 fa64 	bl	80014e4 <spi_GPIO_config>
  spi_config();
 800101c:	f000 faa4 	bl	8001568 <spi_config>
//  {
//    printf("Register[0x%02X] = 0x%02X\n", i, rc522_regRead8(i));
//    rcc_msDelay(50);
//  }
  // RFID module
  rc522_init();
 8001020:	f7ff fd32 	bl	8000a88 <rc522_init>
  uint8_t myID[5] = {0xD3, 0x18, 0xE3, 0x9A, 0xB2};
 8001024:	4a25      	ldr	r2, [pc, #148]	; (80010bc <main+0xd0>)
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102e:	6018      	str	r0, [r3, #0]
 8001030:	3304      	adds	r3, #4
 8001032:	7019      	strb	r1, [r3, #0]
  uint8_t cardID[5];

  // Simple RFID card reader
  printf("Place your card...\n");
 8001034:	4822      	ldr	r0, [pc, #136]	; (80010c0 <main+0xd4>)
 8001036:	f001 fa9d 	bl	8002574 <puts>

  while(1)
  {
    if(rc522_checkCard(cardID))
 800103a:	463b      	mov	r3, r7
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fde4 	bl	8000c0a <rc522_checkCard>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d034      	beq.n	80010b2 <main+0xc6>
    {
      gpio_LED_write(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f000 f897 	bl	800117c <gpio_LED_write>
      printf("Card is detected with ID:\n");
 800104e:	481d      	ldr	r0, [pc, #116]	; (80010c4 <main+0xd8>)
 8001050:	f001 fa90 	bl	8002574 <puts>
      for(uint8_t i = 0; i < 5; i++)
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e00d      	b.n	8001076 <main+0x8a>
      {
        printf("ID[%u] = 0x%02X\n", i, cardID[i]);
 800105a:	7bf9      	ldrb	r1, [r7, #15]
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	f107 0210 	add.w	r2, r7, #16
 8001062:	4413      	add	r3, r2
 8001064:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001068:	461a      	mov	r2, r3
 800106a:	4817      	ldr	r0, [pc, #92]	; (80010c8 <main+0xdc>)
 800106c:	f001 f9fc 	bl	8002468 <iprintf>
      for(uint8_t i = 0; i < 5; i++)
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	3301      	adds	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	2b04      	cmp	r3, #4
 800107a:	d9ee      	bls.n	800105a <main+0x6e>
      }
      if(rc522_compareIds(cardID, myID))
 800107c:	f107 0208 	add.w	r2, r7, #8
 8001080:	463b      	mov	r3, r7
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff90 	bl	8000faa <rc522_compareIds>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <main+0xac>
      {
        printf("Success, access granted!\n");
 8001090:	480e      	ldr	r0, [pc, #56]	; (80010cc <main+0xe0>)
 8001092:	f001 fa6f 	bl	8002574 <puts>
 8001096:	e002      	b.n	800109e <main+0xb2>
      }
      else
      {
        printf("Failed, access denied.\n");
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <main+0xe4>)
 800109a:	f001 fa6b 	bl	8002574 <puts>
      }
      printf("*************************************");
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <main+0xe8>)
 80010a0:	f001 f9e2 	bl	8002468 <iprintf>
      rcc_msDelay(2000);
 80010a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010a8:	f000 f9fc 	bl	80014a4 <rcc_msDelay>
      gpio_LED_write(0);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f000 f865 	bl	800117c <gpio_LED_write>
    }
    rcc_msDelay(2000);
 80010b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010b6:	f000 f9f5 	bl	80014a4 <rcc_msDelay>
    if(rc522_checkCard(cardID))
 80010ba:	e7be      	b.n	800103a <main+0x4e>
 80010bc:	08004674 	.word	0x08004674
 80010c0:	080045d4 	.word	0x080045d4
 80010c4:	080045e8 	.word	0x080045e8
 80010c8:	08004604 	.word	0x08004604
 80010cc:	08004618 	.word	0x08004618
 80010d0:	08004634 	.word	0x08004634
 80010d4:	0800464c 	.word	0x0800464c

080010d8 <__io_putchar>:

int __io_putchar(int ch);
int _write(int file, char *ptr, int len);

int __io_putchar(int ch)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint8_t c[1];
  c[0] = ch & 0x00FF;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	733b      	strb	r3, [r7, #12]
  uart_UART1_transmit(&c[0], 1, 100);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2264      	movs	r2, #100	; 0x64
 80010ec:	2101      	movs	r1, #1
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fc16 	bl	8001920 <uart_UART1_transmit>
  return ch;
 80010f4:	687b      	ldr	r3, [r7, #4]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_write>:

int _write(int file, char *ptr, int len)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
  for(int DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e009      	b.n	8001124 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ffdd 	bl	80010d8 <__io_putchar>
  for(int DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf1      	blt.n	8001110 <_write+0x12>
  }
  return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
	...

08001144 <gpio_LED_config>:

/**
 * @brief LED GPIO configuration (PC13)
 */
void gpio_LED_config()
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  // Enable clock for portC in APB2
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <gpio_LED_config+0x30>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a09      	ldr	r2, [pc, #36]	; (8001174 <gpio_LED_config+0x30>)
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	6193      	str	r3, [r2, #24]
  // 50MHz output mode
  GPIOC->CRH |= (GPIO_CRH_MODE13);
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <gpio_LED_config+0x34>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <gpio_LED_config+0x34>)
 800115a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800115e:	6053      	str	r3, [r2, #4]
  // Output push-pull
  GPIOC->CRH &= ~(GPIO_CRH_CNF13);
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <gpio_LED_config+0x34>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <gpio_LED_config+0x34>)
 8001166:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800116a:	6053      	str	r3, [r2, #4]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000
 8001178:	40011000 	.word	0x40011000

0800117c <gpio_LED_write>:

/**
 * @brief Write/Toggle LED functions
 */
void gpio_LED_write(bool state)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  // LED on
  if(state)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <gpio_LED_write+0x1e>
  {
    GPIOC->ODR &= ~GPIO_ODR_ODR13;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <gpio_LED_write+0x34>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <gpio_LED_write+0x34>)
 8001192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001196:	60d3      	str	r3, [r2, #12]
  // LED off
  else
  {
    GPIOC->ODR |= GPIO_ODR_ODR13;
  }
}
 8001198:	e005      	b.n	80011a6 <gpio_LED_write+0x2a>
    GPIOC->ODR |= GPIO_ODR_ODR13;
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <gpio_LED_write+0x34>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <gpio_LED_write+0x34>)
 80011a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011a4:	60d3      	str	r3, [r2, #12]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	40011000 	.word	0x40011000

080011b4 <gpio_PB_config>:

/**
 * @brief Button configuration (PA0)
 */
void gpio_PB_config()
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  // Enable clock for portA in APB2
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <gpio_PB_config+0x48>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <gpio_PB_config+0x48>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6193      	str	r3, [r2, #24]
  // Input mode
  GPIOA->CRL &= ~(GPIO_CRL_MODE0);
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <gpio_PB_config+0x4c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <gpio_PB_config+0x4c>)
 80011ca:	f023 0303 	bic.w	r3, r3, #3
 80011ce:	6013      	str	r3, [r2, #0]
  // Input with pull-up/pull-down
  GPIOA->CRL &= ~(GPIO_CRL_CNF0);
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <gpio_PB_config+0x4c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <gpio_PB_config+0x4c>)
 80011d6:	f023 030c 	bic.w	r3, r3, #12
 80011da:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= GPIO_CRL_CNF0_1;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <gpio_PB_config+0x4c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <gpio_PB_config+0x4c>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	6013      	str	r3, [r2, #0]
  // Input pull-up
  GPIOA->ODR |= GPIO_ODR_ODR0;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <gpio_PB_config+0x4c>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <gpio_PB_config+0x4c>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010800 	.word	0x40010800

08001204 <gpio_SW_config>:

/**
 * @brief Slide switchs configuration (PA8, PA15)
 */
void gpio_SW_config()
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  // Enable clock for portA in APB2
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001208:	4b1c      	ldr	r3, [pc, #112]	; (800127c <gpio_SW_config+0x78>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <gpio_SW_config+0x78>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6193      	str	r3, [r2, #24]
  // Remap
  RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <gpio_SW_config+0x78>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <gpio_SW_config+0x78>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6193      	str	r3, [r2, #24]
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <gpio_SW_config+0x78>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	4a15      	ldr	r2, [pc, #84]	; (800127c <gpio_SW_config+0x78>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122a:	61d3      	str	r3, [r2, #28]
  AFIO->MAPR &= ~(AFIO_MAPR_SWJ_CFG);
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <gpio_SW_config+0x7c>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <gpio_SW_config+0x7c>)
 8001232:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001236:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_1;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <gpio_SW_config+0x7c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a10      	ldr	r2, [pc, #64]	; (8001280 <gpio_SW_config+0x7c>)
 800123e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001242:	6053      	str	r3, [r2, #4]
  // Input mode
  GPIOA->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_MODE15);
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <gpio_SW_config+0x80>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <gpio_SW_config+0x80>)
 800124a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800124e:	f023 0303 	bic.w	r3, r3, #3
 8001252:	6053      	str	r3, [r2, #4]
  // Input - floating mode
  GPIOA->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_CNF15);
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <gpio_SW_config+0x80>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <gpio_SW_config+0x80>)
 800125a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800125e:	f023 030c 	bic.w	r3, r3, #12
 8001262:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |= (GPIO_CRH_CNF8_0 | GPIO_CRH_CNF15_0);
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <gpio_SW_config+0x80>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <gpio_SW_config+0x80>)
 800126a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6053      	str	r3, [r2, #4]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000
 8001284:	40010800 	.word	0x40010800

08001288 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0c      	blt.n	80012b4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <__NVIC_ClearPendingIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	3360      	adds	r3, #96	; 0x60
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <rcc_HSE_config>:

/**
 * @brief HSE configuration
 */
void rcc_HSE_config()
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
   */

  /* PLL Configuration */
  // Clear bitfields [21:18]
  //RCC->CFGR &= ~(0xFUL << 18U);     // same effects
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL);   //
 800131c:	4b3f      	ldr	r3, [pc, #252]	; (800141c <rcc_HSE_config+0x104>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a3e      	ldr	r2, [pc, #248]	; (800141c <rcc_HSE_config+0x104>)
 8001322:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001326:	6053      	str	r3, [r2, #4]
  // PLL_M = 9
  RCC->CFGR |= (7UL << 18U);
 8001328:	4b3c      	ldr	r3, [pc, #240]	; (800141c <rcc_HSE_config+0x104>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	4a3b      	ldr	r2, [pc, #236]	; (800141c <rcc_HSE_config+0x104>)
 800132e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001332:	6053      	str	r3, [r2, #4]
  // USB Divider
  //RCC->CFGR &= ~(1UL << 22U);       // same effects
  RCC->CFGR &= ~(RCC_CFGR_USBPRE);    //
 8001334:	4b39      	ldr	r3, [pc, #228]	; (800141c <rcc_HSE_config+0x104>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a38      	ldr	r2, [pc, #224]	; (800141c <rcc_HSE_config+0x104>)
 800133a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800133e:	6053      	str	r3, [r2, #4]

  /* HSE Oscillator */
  // Enable HSE Oscillator
  RCC->CR |= RCC_CR_HSEON;
 8001340:	4b36      	ldr	r3, [pc, #216]	; (800141c <rcc_HSE_config+0x104>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a35      	ldr	r2, [pc, #212]	; (800141c <rcc_HSE_config+0x104>)
 8001346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]
  // Wait for it to stabilize
  while((RCC->CR & RCC_CR_HSERDY) == 0);
 800134c:	bf00      	nop
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <rcc_HSE_config+0x104>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f9      	beq.n	800134e <rcc_HSE_config+0x36>
  // Select HSE as PLL source
  RCC->CFGR |= RCC_CFGR_PLLSRC;
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <rcc_HSE_config+0x104>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a2f      	ldr	r2, [pc, #188]	; (800141c <rcc_HSE_config+0x104>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6053      	str	r3, [r2, #4]
  // Enable PLL
  RCC->CR |= RCC_CR_PLLON;
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <rcc_HSE_config+0x104>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a2c      	ldr	r2, [pc, #176]	; (800141c <rcc_HSE_config+0x104>)
 800136c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001370:	6013      	str	r3, [r2, #0]
  // Wait for PLL ready
  while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8001372:	bf00      	nop
 8001374:	4b29      	ldr	r3, [pc, #164]	; (800141c <rcc_HSE_config+0x104>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f9      	beq.n	8001374 <rcc_HSE_config+0x5c>

  // Flash prefetch and wait state
  // Clear latency fields
  FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <rcc_HSE_config+0x108>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a26      	ldr	r2, [pc, #152]	; (8001420 <rcc_HSE_config+0x108>)
 8001386:	f023 0307 	bic.w	r3, r3, #7
 800138a:	6013      	str	r3, [r2, #0]
  // 2 wait state for 72MHz
  FLASH->ACR |= FLASH_ACR_LATENCY_1;
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <rcc_HSE_config+0x108>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a23      	ldr	r2, [pc, #140]	; (8001420 <rcc_HSE_config+0x108>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	6013      	str	r3, [r2, #0]
  // Enable prefetch buffer
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <rcc_HSE_config+0x108>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a20      	ldr	r2, [pc, #128]	; (8001420 <rcc_HSE_config+0x108>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]

  // Select system clock
  // Clear SW bits
  RCC->CFGR &= ~(RCC_CFGR_SW);
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <rcc_HSE_config+0x104>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a1c      	ldr	r2, [pc, #112]	; (800141c <rcc_HSE_config+0x104>)
 80013aa:	f023 0303 	bic.w	r3, r3, #3
 80013ae:	6053      	str	r3, [r2, #4]
  // PLL selected as system clock
  RCC->CFGR |= RCC_CFGR_SW_1;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <rcc_HSE_config+0x104>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a19      	ldr	r2, [pc, #100]	; (800141c <rcc_HSE_config+0x104>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	6053      	str	r3, [r2, #4]
  // Wait for PLL to be the active clock source
  while((RCC->CFGR & RCC_CFGR_SWS_1) == 0);
 80013bc:	bf00      	nop
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <rcc_HSE_config+0x104>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f9      	beq.n	80013be <rcc_HSE_config+0xa6>

  // Peripherals clock setup
  // AHB Prescaler
  RCC->CFGR &= ~(RCC_CFGR_HPRE);
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <rcc_HSE_config+0x104>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <rcc_HSE_config+0x104>)
 80013d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013d4:	6053      	str	r3, [r2, #4]
  // APB1 Prescaler
  RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <rcc_HSE_config+0x104>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <rcc_HSE_config+0x104>)
 80013dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013e0:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PPRE1_2;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <rcc_HSE_config+0x104>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4a0d      	ldr	r2, [pc, #52]	; (800141c <rcc_HSE_config+0x104>)
 80013e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ec:	6053      	str	r3, [r2, #4]
  // APB2 Prescaler
  RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <rcc_HSE_config+0x104>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <rcc_HSE_config+0x104>)
 80013f4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013f8:	6053      	str	r3, [r2, #4]
  // ADC Prescaler
  RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <rcc_HSE_config+0x104>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4a07      	ldr	r2, [pc, #28]	; (800141c <rcc_HSE_config+0x104>)
 8001400:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001404:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <rcc_HSE_config+0x104>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <rcc_HSE_config+0x104>)
 800140c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001410:	6053      	str	r3, [r2, #4]
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	40022000 	.word	0x40022000

08001424 <rcc_SysTick_config>:

/**
 * @brief Systick configuration
 */
void rcc_SysTick_config()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  // Reset CTRL register
  SysTick->CTRL = 0;
 8001428:	4b10      	ldr	r3, [pc, #64]	; (800146c <rcc_SysTick_config+0x48>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
  // Set the Reload value
  SysTick->LOAD = 71999;
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <rcc_SysTick_config+0x48>)
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <rcc_SysTick_config+0x4c>)
 8001432:	605a      	str	r2, [r3, #4]
  // It has always enabled
  // Set priority to SysTick Interrupt (NVIC)
  NVIC_SetPriority(SysTick_IRQn, 0);
 8001434:	2100      	movs	r1, #0
 8001436:	f04f 30ff 	mov.w	r0, #4294967295
 800143a:	f7ff ff43 	bl	80012c4 <__NVIC_SetPriority>
  // Reset SysTick value to 0
  SysTick->VAL = 0;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <rcc_SysTick_config+0x48>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  // Enable SysTick from CTRL register
  SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <rcc_SysTick_config+0x48>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a08      	ldr	r2, [pc, #32]	; (800146c <rcc_SysTick_config+0x48>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <rcc_SysTick_config+0x48>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a05      	ldr	r2, [pc, #20]	; (800146c <rcc_SysTick_config+0x48>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <rcc_SysTick_config+0x48>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a02      	ldr	r2, [pc, #8]	; (800146c <rcc_SysTick_config+0x48>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	e000e010 	.word	0xe000e010
 8001470:	0001193f 	.word	0x0001193f

08001474 <rcc_msIncTick>:

/**
 * @brief Increment milliseconds
 */
void rcc_msIncTick()
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  msTick++;
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <rcc_msIncTick+0x18>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	4a03      	ldr	r2, [pc, #12]	; (800148c <rcc_msIncTick+0x18>)
 8001480:	6013      	str	r3, [r2, #0]
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200001ec 	.word	0x200001ec

08001490 <rcc_msGetTick>:

/**
 * @brief Get milliseconds
 */
uint32_t rcc_msGetTick()
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return msTick;
 8001494:	4b02      	ldr	r3, [pc, #8]	; (80014a0 <rcc_msGetTick+0x10>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	200001ec 	.word	0x200001ec

080014a4 <rcc_msDelay>:

/**
 * @brief Milliseconds delay function
 */
void rcc_msDelay(uint32_t milliseconds)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t startTick = rcc_msGetTick();
 80014ac:	f7ff fff0 	bl	8001490 <rcc_msGetTick>
 80014b0:	60f8      	str	r0, [r7, #12]
  while(rcc_msGetTick() - startTick < milliseconds);
 80014b2:	bf00      	nop
 80014b4:	f7ff ffec 	bl	8001490 <rcc_msGetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d8f7      	bhi.n	80014b4 <rcc_msDelay+0x10>
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <SysTick_Handler>:

void SysTick_Handler()
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(SysTick_IRQn);
 80014d2:	f04f 30ff 	mov.w	r0, #4294967295
 80014d6:	f7ff fed7 	bl	8001288 <__NVIC_ClearPendingIRQ>
  rcc_msIncTick();
 80014da:	f7ff ffcb 	bl	8001474 <rcc_msIncTick>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <spi_GPIO_config>:

/**
 * @brief SPI GPIO pins setup
 */
void spi_GPIO_config()
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  // Enable portA clock
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <spi_GPIO_config+0x7c>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <spi_GPIO_config+0x7c>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6193      	str	r3, [r2, #24]
  // PA5(SCK) and PA7(MOSI) as output
  // Mode output - speed 10MHz
  GPIOA->CRL &= ~(GPIO_CRL_MODE5 | GPIO_CRL_MODE7);
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <spi_GPIO_config+0x80>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <spi_GPIO_config+0x80>)
 80014fa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80014fe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001502:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (GPIO_CRL_MODE5_0 | GPIO_CRL_MODE7_0);
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <spi_GPIO_config+0x80>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a16      	ldr	r2, [pc, #88]	; (8001564 <spi_GPIO_config+0x80>)
 800150a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001512:	6013      	str	r3, [r2, #0]
  // Alternative function push-pull
  GPIOA->CRL &= ~(GPIO_CRL_CNF5 | GPIO_CRL_CNF7);
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <spi_GPIO_config+0x80>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <spi_GPIO_config+0x80>)
 800151a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800151e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001522:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (GPIO_CRL_CNF5_1 | GPIO_CRL_CNF7_1);
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <spi_GPIO_config+0x80>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <spi_GPIO_config+0x80>)
 800152a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800152e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001532:	6013      	str	r3, [r2, #0]
  // PA6(MISO) as input
  // Input mode
  GPIOA->CRL &= ~(GPIO_CRL_MODE6);
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <spi_GPIO_config+0x80>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <spi_GPIO_config+0x80>)
 800153a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800153e:	6013      	str	r3, [r2, #0]
  // Floating input
  GPIOA->CRL &= ~(GPIO_CRL_CNF6);
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <spi_GPIO_config+0x80>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <spi_GPIO_config+0x80>)
 8001546:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800154a:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= GPIO_CRL_CNF6_0;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <spi_GPIO_config+0x80>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <spi_GPIO_config+0x80>)
 8001552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001556:	6013      	str	r3, [r2, #0]
//  // Mode output - speed 10MHz
//  GPIOB->CRL &= ~(GPIO_CRL_MODE0);
//  GPIOB->CRL |= (GPIO_CRL_MODE0_0);
//  // General purpose push-pull
//  GPIOB->CRL &= ~(GPIO_CRL_CNF0);
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	40010800 	.word	0x40010800

08001568 <spi_config>:

/**
 * @brief SPI peripherals configuration
 */
void spi_config()
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
  // Enable SPI clock
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800156e:	4b25      	ldr	r3, [pc, #148]	; (8001604 <spi_config+0x9c>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4a24      	ldr	r2, [pc, #144]	; (8001604 <spi_config+0x9c>)
 8001574:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001578:	6193      	str	r3, [r2, #24]
  // Clock phase
  SPI1->CR1 |= SPI_CR1_CPHA;
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <spi_config+0xa0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a22      	ldr	r2, [pc, #136]	; (8001608 <spi_config+0xa0>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]
  // Clock polarity
  SPI1->CR1 |= SPI_CR1_CPOL;
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <spi_config+0xa0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <spi_config+0xa0>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6013      	str	r3, [r2, #0]
  // Mode master/slave
  SPI1->CR1 |= SPI_CR1_MSTR;
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <spi_config+0xa0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <spi_config+0xa0>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6013      	str	r3, [r2, #0]
  // Baud rate
  SPI1->CR1 &= ~(SPI_CR1_BR);
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <spi_config+0xa0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a19      	ldr	r2, [pc, #100]	; (8001608 <spi_config+0xa0>)
 80015a4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80015a8:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <spi_config+0xa0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a16      	ldr	r2, [pc, #88]	; (8001608 <spi_config+0xa0>)
 80015b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80015b4:	6013      	str	r3, [r2, #0]
  // MSB first
  SPI1->CR1 &= ~(SPI_CR1_LSBFIRST);
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <spi_config+0xa0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <spi_config+0xa0>)
 80015bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015c0:	6013      	str	r3, [r2, #0]
  // Duplex
  SPI1->CR1 &= ~(SPI_CR1_RXONLY);
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <spi_config+0xa0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a10      	ldr	r2, [pc, #64]	; (8001608 <spi_config+0xa0>)
 80015c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015cc:	6013      	str	r3, [r2, #0]
  // Data format 8/16
  SPI1->CR1 &= ~(SPI_CR1_DFF);
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <spi_config+0xa0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <spi_config+0xa0>)
 80015d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015d8:	6013      	str	r3, [r2, #0]
  // Slave select
  SPI1->CR1 |= (SPI_CR1_SSI | SPI_CR1_SSM);
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <spi_config+0xa0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <spi_config+0xa0>)
 80015e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80015e4:	6013      	str	r3, [r2, #0]
  // Enable SPI
  SPI1->CR1 |= SPI_CR1_SPE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <spi_config+0xa0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <spi_config+0xa0>)
 80015ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f0:	6013      	str	r3, [r2, #0]
  // Clear flags
  __IO uint32_t tempRd = SPI1->SR;
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <spi_config+0xa0>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	607b      	str	r3, [r7, #4]
  (void)tempRd;
 80015f8:	687b      	ldr	r3, [r7, #4]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	40021000 	.word	0x40021000
 8001608:	40013000 	.word	0x40013000

0800160c <spi_transmit>:

/**
 * @brief SPI transmit
 */
bool spi_transmit(uint8_t *pData, uint8_t len, uint32_t timeout)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	460b      	mov	r3, r1
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	72fb      	strb	r3, [r7, #11]
  // Enable SPI if not
  SPI1->CR1 |= SPI_CR1_SPE;
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <spi_transmit+0x9c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <spi_transmit+0x9c>)
 8001620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001624:	6013      	str	r3, [r2, #0]
  // Timeout initial ticks
  uint8_t dataIdx = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	77fb      	strb	r3, [r7, #31]
  uint32_t startTick = rcc_msGetTick();
 800162a:	f7ff ff31 	bl	8001490 <rcc_msGetTick>
 800162e:	61b8      	str	r0, [r7, #24]
  // While loop, transmitting data, managing timeout
  while(dataIdx < len)
 8001630:	e019      	b.n	8001666 <spi_transmit+0x5a>
  {
    if(SPI1->SR & SPI_SR_TXE) //Tx buffer empty
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <spi_transmit+0x9c>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d009      	beq.n	8001652 <spi_transmit+0x46>
    {
      SPI1->DR = pData[dataIdx];
 800163e:	7ffb      	ldrb	r3, [r7, #31]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <spi_transmit+0x9c>)
 8001648:	60da      	str	r2, [r3, #12]
      dataIdx++;
 800164a:	7ffb      	ldrb	r3, [r7, #31]
 800164c:	3301      	adds	r3, #1
 800164e:	77fb      	strb	r3, [r7, #31]
 8001650:	e009      	b.n	8001666 <spi_transmit+0x5a>
    }
    else if(rcc_msGetTick() - startTick >= timeout) // Manage timeout
 8001652:	f7ff ff1d 	bl	8001490 <rcc_msGetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	d801      	bhi.n	8001666 <spi_transmit+0x5a>
    {
      return false;
 8001662:	2300      	movs	r3, #0
 8001664:	e01c      	b.n	80016a0 <spi_transmit+0x94>
  while(dataIdx < len)
 8001666:	7ffa      	ldrb	r2, [r7, #31]
 8001668:	7afb      	ldrb	r3, [r7, #11]
 800166a:	429a      	cmp	r2, r3
 800166c:	d3e1      	bcc.n	8001632 <spi_transmit+0x26>
    }
  }
  // Wait for busy flag
  while(SPI1->SR & SPI_SR_BSY)
 800166e:	e009      	b.n	8001684 <spi_transmit+0x78>
  {
    if(rcc_msGetTick() - startTick >= timeout)
 8001670:	f7ff ff0e 	bl	8001490 <rcc_msGetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	d801      	bhi.n	8001684 <spi_transmit+0x78>
    {
      return false;
 8001680:	2300      	movs	r3, #0
 8001682:	e00d      	b.n	80016a0 <spi_transmit+0x94>
  while(SPI1->SR & SPI_SR_BSY)
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <spi_transmit+0x9c>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1ef      	bne.n	8001670 <spi_transmit+0x64>
    }
  }
  // Clear overrun --> DR, SR
  __IO uint32_t tempRead = SPI1->DR;
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <spi_transmit+0x9c>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	617b      	str	r3, [r7, #20]
  tempRead = SPI1->SR;
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <spi_transmit+0x9c>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	617b      	str	r3, [r7, #20]
  (void)tempRead;
 800169c:	697b      	ldr	r3, [r7, #20]
  return true;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40013000 	.word	0x40013000

080016ac <spi_receive>:

/**
 * @brief SPI receive
 */
bool spi_receive(uint8_t *pData, uint8_t len, uint32_t timeout)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	460b      	mov	r3, r1
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	72fb      	strb	r3, [r7, #11]
  // Enable SPI if not
  SPI1->CR1 |= SPI_CR1_SPE;
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <spi_receive+0xc4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a2c      	ldr	r2, [pc, #176]	; (8001770 <spi_receive+0xc4>)
 80016c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c4:	6013      	str	r3, [r2, #0]
  // Timeout initial ticks
  uint8_t dataIdx = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	77fb      	strb	r3, [r7, #31]
  uint32_t startTick = rcc_msGetTick();
 80016ca:	f7ff fee1 	bl	8001490 <rcc_msGetTick>
 80016ce:	61b8      	str	r0, [r7, #24]
  bool isTransmit = true;
 80016d0:	2301      	movs	r3, #1
 80016d2:	77bb      	strb	r3, [r7, #30]
  // While loop, transmitting data, managing timeout
  while(dataIdx < len)
 80016d4:	e02a      	b.n	800172c <spi_receive+0x80>
  {
    // Transmit dummy data
    if((SPI1->SR & SPI_SR_TXE) && isTransmit)
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <spi_receive+0xc4>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <spi_receive+0x46>
 80016e2:	7fbb      	ldrb	r3, [r7, #30]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d004      	beq.n	80016f2 <spi_receive+0x46>
    {
      SPI1->DR = 0xFF;
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <spi_receive+0xc4>)
 80016ea:	22ff      	movs	r2, #255	; 0xff
 80016ec:	60da      	str	r2, [r3, #12]
      isTransmit = false;
 80016ee:	2300      	movs	r3, #0
 80016f0:	77bb      	strb	r3, [r7, #30]
    }
    if(SPI1->SR & SPI_SR_RXNE)
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <spi_receive+0xc4>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00c      	beq.n	8001718 <spi_receive+0x6c>
    {
      pData[dataIdx] = SPI1->DR;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <spi_receive+0xc4>)
 8001700:	68d9      	ldr	r1, [r3, #12]
 8001702:	7ffb      	ldrb	r3, [r7, #31]
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	b2ca      	uxtb	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]
      dataIdx++;
 800170c:	7ffb      	ldrb	r3, [r7, #31]
 800170e:	3301      	adds	r3, #1
 8001710:	77fb      	strb	r3, [r7, #31]
      isTransmit = true;
 8001712:	2301      	movs	r3, #1
 8001714:	77bb      	strb	r3, [r7, #30]
 8001716:	e009      	b.n	800172c <spi_receive+0x80>
    }
    else if(rcc_msGetTick() - startTick >= timeout) // Manage timeout
 8001718:	f7ff feba 	bl	8001490 <rcc_msGetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	d801      	bhi.n	800172c <spi_receive+0x80>
    {
      return false;
 8001728:	2300      	movs	r3, #0
 800172a:	e01c      	b.n	8001766 <spi_receive+0xba>
  while(dataIdx < len)
 800172c:	7ffa      	ldrb	r2, [r7, #31]
 800172e:	7afb      	ldrb	r3, [r7, #11]
 8001730:	429a      	cmp	r2, r3
 8001732:	d3d0      	bcc.n	80016d6 <spi_receive+0x2a>
    }
  }
  // Wait for busy flag
  while(SPI1->SR & SPI_SR_BSY)
 8001734:	e009      	b.n	800174a <spi_receive+0x9e>
  {
    if(rcc_msGetTick() - startTick >= timeout)
 8001736:	f7ff feab 	bl	8001490 <rcc_msGetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	429a      	cmp	r2, r3
 8001744:	d801      	bhi.n	800174a <spi_receive+0x9e>
    {
      return false;
 8001746:	2300      	movs	r3, #0
 8001748:	e00d      	b.n	8001766 <spi_receive+0xba>
  while(SPI1->SR & SPI_SR_BSY)
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <spi_receive+0xc4>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1ef      	bne.n	8001736 <spi_receive+0x8a>
    }
  }
  // Clear overrun --> DR, SR
  __IO uint32_t tempRead = SPI1->DR;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <spi_receive+0xc4>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	617b      	str	r3, [r7, #20]
  tempRead = SPI1->SR;
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <spi_receive+0xc4>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	617b      	str	r3, [r7, #20]
  (void)tempRead;
 8001762:	697b      	ldr	r3, [r7, #20]
  return true;
 8001764:	2301      	movs	r3, #1
}
 8001766:	4618      	mov	r0, r3
 8001768:	3720      	adds	r7, #32
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40013000 	.word	0x40013000

08001774 <spi_RFID_CS_config>:

/**
 * @brief SPI CS pin configuration
 */
void spi_RFID_CS_config()
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  // PA4
  // Enable portA clock
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <spi_RFID_CS_config+0x48>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <spi_RFID_CS_config+0x48>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6193      	str	r3, [r2, #24]
  // Mode output - speed 2MHz
  GPIOA->CRL &= ~(GPIO_CRL_MODE4);
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <spi_RFID_CS_config+0x4c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <spi_RFID_CS_config+0x4c>)
 800178a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800178e:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (GPIO_CRL_MODE4_1);
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <spi_RFID_CS_config+0x4c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <spi_RFID_CS_config+0x4c>)
 8001796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179a:	6013      	str	r3, [r2, #0]
  // General purpose push-pull
  GPIOA->CRL &= ~(GPIO_CRL_CNF4);
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <spi_RFID_CS_config+0x4c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <spi_RFID_CS_config+0x4c>)
 80017a2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80017a6:	6013      	str	r3, [r2, #0]
  // Default value high
  GPIOA->BSRR |= GPIO_BSRR_BS4;
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <spi_RFID_CS_config+0x4c>)
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <spi_RFID_CS_config+0x4c>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6113      	str	r3, [r2, #16]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010800 	.word	0x40010800

080017c4 <spi_RFID_CS_write>:

/**
 * @brief Write CS
 */
void spi_RFID_CS_write(bool state)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if(state)
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <spi_RFID_CS_write+0x1e>
  {
    GPIOA->BSRR |= GPIO_BSRR_BS4;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <spi_RFID_CS_write+0x34>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <spi_RFID_CS_write+0x34>)
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	6113      	str	r3, [r2, #16]
  }
  else
  {
    GPIOA->BSRR |= GPIO_BSRR_BR4;
  }
}
 80017e0:	e005      	b.n	80017ee <spi_RFID_CS_write+0x2a>
    GPIOA->BSRR |= GPIO_BSRR_BR4;
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <spi_RFID_CS_write+0x34>)
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <spi_RFID_CS_write+0x34>)
 80017e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017ec:	6113      	str	r3, [r2, #16]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40010800 	.word	0x40010800

080017fc <uart_UART1_GPIO_config>:

/**
 * @brief UART1 GPIO configuration
 */
void uart_UART1_GPIO_config()
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  // PA9 - TX, PA10 - RX
  // Enable portA clock
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <uart_UART1_GPIO_config+0x60>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a15      	ldr	r2, [pc, #84]	; (800185c <uart_UART1_GPIO_config+0x60>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6193      	str	r3, [r2, #24]
  // AF mode
  GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_CNF10);
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <uart_UART1_GPIO_config+0x64>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4a13      	ldr	r2, [pc, #76]	; (8001860 <uart_UART1_GPIO_config+0x64>)
 8001812:	f423 634c 	bic.w	r3, r3, #3264	; 0xcc0
 8001816:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_CNF10_0;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <uart_UART1_GPIO_config+0x64>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4a10      	ldr	r2, [pc, #64]	; (8001860 <uart_UART1_GPIO_config+0x64>)
 800181e:	f443 6390 	orr.w	r3, r3, #1152	; 0x480
 8001822:	6053      	str	r3, [r2, #4]
  // Output max 10MHz
  GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_MODE10);
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <uart_UART1_GPIO_config+0x64>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <uart_UART1_GPIO_config+0x64>)
 800182a:	f423 734c 	bic.w	r3, r3, #816	; 0x330
 800182e:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |= GPIO_CRH_MODE9_0;
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <uart_UART1_GPIO_config+0x64>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <uart_UART1_GPIO_config+0x64>)
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	6053      	str	r3, [r2, #4]
  // No remap UART1
  RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <uart_UART1_GPIO_config+0x60>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a06      	ldr	r2, [pc, #24]	; (800185c <uart_UART1_GPIO_config+0x60>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6193      	str	r3, [r2, #24]
  AFIO->MAPR &= ~(AFIO_MAPR_USART1_REMAP);
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <uart_UART1_GPIO_config+0x68>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a05      	ldr	r2, [pc, #20]	; (8001864 <uart_UART1_GPIO_config+0x68>)
 800184e:	f023 0304 	bic.w	r3, r3, #4
 8001852:	6053      	str	r3, [r2, #4]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40021000 	.word	0x40021000
 8001860:	40010800 	.word	0x40010800
 8001864:	40010000 	.word	0x40010000

08001868 <uart_UART1_config>:

/**
 * @brief UART1 Peripherals configuration
 */
void uart_UART1_config()
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  // Enable UART1 clock
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800186c:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <uart_UART1_config+0xb0>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a29      	ldr	r2, [pc, #164]	; (8001918 <uart_UART1_config+0xb0>)
 8001872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001876:	6193      	str	r3, [r2, #24]
  // Enable transmit
  USART1->CR1 |= USART_CR1_TE;
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <uart_UART1_config+0xb4>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4a27      	ldr	r2, [pc, #156]	; (800191c <uart_UART1_config+0xb4>)
 800187e:	f043 0308 	orr.w	r3, r3, #8
 8001882:	60d3      	str	r3, [r2, #12]
  // Enable receive
  USART1->CR1 |= USART_CR1_RE;
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <uart_UART1_config+0xb4>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a24      	ldr	r2, [pc, #144]	; (800191c <uart_UART1_config+0xb4>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	60d3      	str	r3, [r2, #12]
  // Set parity to even
  USART1->CR1 &= ~(USART_CR1_PS);
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <uart_UART1_config+0xb4>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4a21      	ldr	r2, [pc, #132]	; (800191c <uart_UART1_config+0xb4>)
 8001896:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800189a:	60d3      	str	r3, [r2, #12]
  // Parity control enable (DISABLE)
  USART1->CR1 &= ~(USART_CR1_PCE);
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <uart_UART1_config+0xb4>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4a1e      	ldr	r2, [pc, #120]	; (800191c <uart_UART1_config+0xb4>)
 80018a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018a6:	60d3      	str	r3, [r2, #12]
  // Word length to 8-bit
  USART1->CR1 &= ~(USART_CR1_M);
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <uart_UART1_config+0xb4>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4a1b      	ldr	r2, [pc, #108]	; (800191c <uart_UART1_config+0xb4>)
 80018ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018b2:	60d3      	str	r3, [r2, #12]
  // Stop bit = 1
  USART1->CR2 &= ~(USART_CR2_STOP);
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <uart_UART1_config+0xb4>)
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	4a18      	ldr	r2, [pc, #96]	; (800191c <uart_UART1_config+0xb4>)
 80018ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018be:	6113      	str	r3, [r2, #16]
  // Disable hardware flow control CTS, RTS
  USART1->CR3 &= ~(USART_CR3_CTSE | USART_CR3_RTSE);
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <uart_UART1_config+0xb4>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	4a15      	ldr	r2, [pc, #84]	; (800191c <uart_UART1_config+0xb4>)
 80018c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ca:	6153      	str	r3, [r2, #20]
  // Set baud rate to 115200
  USART1->BRR = 0;
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <uart_UART1_config+0xb4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  USART1->BRR |= 39U << 4U;
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <uart_UART1_config+0xb4>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	4a11      	ldr	r2, [pc, #68]	; (800191c <uart_UART1_config+0xb4>)
 80018d8:	f443 731c 	orr.w	r3, r3, #624	; 0x270
 80018dc:	6093      	str	r3, [r2, #8]
  USART1->BRR |= 1U << 0;
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <uart_UART1_config+0xb4>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <uart_UART1_config+0xb4>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6093      	str	r3, [r2, #8]
  // Clear some flags and enable
  USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <uart_UART1_config+0xb4>)
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <uart_UART1_config+0xb4>)
 80018f0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80018f4:	6113      	str	r3, [r2, #16]
  USART1->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <uart_UART1_config+0xb4>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <uart_UART1_config+0xb4>)
 80018fc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001900:	6153      	str	r3, [r2, #20]
  // Enable UART
  USART1->CR1 |= USART_CR1_UE;
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <uart_UART1_config+0xb4>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <uart_UART1_config+0xb4>)
 8001908:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800190c:	60d3      	str	r3, [r2, #12]
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	40013800 	.word	0x40013800

08001920 <uart_UART1_transmit>:

/**
 * @brief UART transmit function
 */
bool uart_UART1_transmit(uint8_t *data, uint8_t len, uint32_t timeout)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	460b      	mov	r3, r1
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	72fb      	strb	r3, [r7, #11]
  // Wait for TXE to start transmit
  // Write to DR as TXE flag is HIGH (Tx buffer empty)
  uint8_t dataIdx = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	75fb      	strb	r3, [r7, #23]
  uint32_t startTick = rcc_msGetTick();
 8001932:	f7ff fdad 	bl	8001490 <rcc_msGetTick>
 8001936:	6138      	str	r0, [r7, #16]
  while(dataIdx < len)
 8001938:	e019      	b.n	800196e <uart_UART1_transmit+0x4e>
  {
    if(USART1->SR & USART_SR_TXE) //Tx buffer empty
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <uart_UART1_transmit+0x84>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <uart_UART1_transmit+0x3a>
    {
      USART1->DR = data[dataIdx];
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <uart_UART1_transmit+0x84>)
 8001950:	605a      	str	r2, [r3, #4]
      dataIdx++;
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	3301      	adds	r3, #1
 8001956:	75fb      	strb	r3, [r7, #23]
 8001958:	e009      	b.n	800196e <uart_UART1_transmit+0x4e>
    }
    else if(rcc_msGetTick() - startTick >= timeout) // Manage timeout
 800195a:	f7ff fd99 	bl	8001490 <rcc_msGetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	d801      	bhi.n	800196e <uart_UART1_transmit+0x4e>
    {
      return false;
 800196a:	2300      	movs	r3, #0
 800196c:	e015      	b.n	800199a <uart_UART1_transmit+0x7a>
  while(dataIdx < len)
 800196e:	7dfa      	ldrb	r2, [r7, #23]
 8001970:	7afb      	ldrb	r3, [r7, #11]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3e1      	bcc.n	800193a <uart_UART1_transmit+0x1a>
    }
  }
  // Wait for busy flag
  while(!(USART1->SR & USART_SR_TC))
 8001976:	e009      	b.n	800198c <uart_UART1_transmit+0x6c>
  {
    if(rcc_msGetTick() - startTick >= timeout)
 8001978:	f7ff fd8a 	bl	8001490 <rcc_msGetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	d801      	bhi.n	800198c <uart_UART1_transmit+0x6c>
    {
      return false;
 8001988:	2300      	movs	r3, #0
 800198a:	e006      	b.n	800199a <uart_UART1_transmit+0x7a>
  while(!(USART1->SR & USART_SR_TC))
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <uart_UART1_transmit+0x84>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ef      	beq.n	8001978 <uart_UART1_transmit+0x58>
    }
  }
  return true;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40013800 	.word	0x40013800

080019a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	; (80019e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	; (80019ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ce:	f7ff fbb2 	bl	8001136 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d2:	f000 f80f 	bl	80019f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d6:	f7ff fb09 	bl	8000fec <main>
  bx lr
 80019da:	4770      	bx	lr
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80019e4:	08004a68 	.word	0x08004a68
  ldr r2, =_sbss
 80019e8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80019ec:	2000020c 	.word	0x2000020c

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>
	...

080019f4 <__libc_init_array>:
 80019f4:	b570      	push	{r4, r5, r6, lr}
 80019f6:	2600      	movs	r6, #0
 80019f8:	4d0c      	ldr	r5, [pc, #48]	; (8001a2c <__libc_init_array+0x38>)
 80019fa:	4c0d      	ldr	r4, [pc, #52]	; (8001a30 <__libc_init_array+0x3c>)
 80019fc:	1b64      	subs	r4, r4, r5
 80019fe:	10a4      	asrs	r4, r4, #2
 8001a00:	42a6      	cmp	r6, r4
 8001a02:	d109      	bne.n	8001a18 <__libc_init_array+0x24>
 8001a04:	f002 fdd0 	bl	80045a8 <_init>
 8001a08:	2600      	movs	r6, #0
 8001a0a:	4d0a      	ldr	r5, [pc, #40]	; (8001a34 <__libc_init_array+0x40>)
 8001a0c:	4c0a      	ldr	r4, [pc, #40]	; (8001a38 <__libc_init_array+0x44>)
 8001a0e:	1b64      	subs	r4, r4, r5
 8001a10:	10a4      	asrs	r4, r4, #2
 8001a12:	42a6      	cmp	r6, r4
 8001a14:	d105      	bne.n	8001a22 <__libc_init_array+0x2e>
 8001a16:	bd70      	pop	{r4, r5, r6, pc}
 8001a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1c:	4798      	blx	r3
 8001a1e:	3601      	adds	r6, #1
 8001a20:	e7ee      	b.n	8001a00 <__libc_init_array+0xc>
 8001a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a26:	4798      	blx	r3
 8001a28:	3601      	adds	r6, #1
 8001a2a:	e7f2      	b.n	8001a12 <__libc_init_array+0x1e>
 8001a2c:	08004a60 	.word	0x08004a60
 8001a30:	08004a60 	.word	0x08004a60
 8001a34:	08004a60 	.word	0x08004a60
 8001a38:	08004a64 	.word	0x08004a64

08001a3c <malloc>:
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <malloc+0xc>)
 8001a3e:	4601      	mov	r1, r0
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	f000 b857 	b.w	8001af4 <_malloc_r>
 8001a46:	bf00      	nop
 8001a48:	20000000 	.word	0x20000000

08001a4c <memset>:
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4402      	add	r2, r0
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d100      	bne.n	8001a56 <memset+0xa>
 8001a54:	4770      	bx	lr
 8001a56:	f803 1b01 	strb.w	r1, [r3], #1
 8001a5a:	e7f9      	b.n	8001a50 <memset+0x4>

08001a5c <_free_r>:
 8001a5c:	b538      	push	{r3, r4, r5, lr}
 8001a5e:	4605      	mov	r5, r0
 8001a60:	2900      	cmp	r1, #0
 8001a62:	d043      	beq.n	8001aec <_free_r+0x90>
 8001a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a68:	1f0c      	subs	r4, r1, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bfb8      	it	lt
 8001a6e:	18e4      	addlt	r4, r4, r3
 8001a70:	f001 ff46 	bl	8003900 <__malloc_lock>
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <_free_r+0x94>)
 8001a76:	6813      	ldr	r3, [r2, #0]
 8001a78:	4610      	mov	r0, r2
 8001a7a:	b933      	cbnz	r3, 8001a8a <_free_r+0x2e>
 8001a7c:	6063      	str	r3, [r4, #4]
 8001a7e:	6014      	str	r4, [r2, #0]
 8001a80:	4628      	mov	r0, r5
 8001a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a86:	f001 bf41 	b.w	800390c <__malloc_unlock>
 8001a8a:	42a3      	cmp	r3, r4
 8001a8c:	d90a      	bls.n	8001aa4 <_free_r+0x48>
 8001a8e:	6821      	ldr	r1, [r4, #0]
 8001a90:	1862      	adds	r2, r4, r1
 8001a92:	4293      	cmp	r3, r2
 8001a94:	bf01      	itttt	eq
 8001a96:	681a      	ldreq	r2, [r3, #0]
 8001a98:	685b      	ldreq	r3, [r3, #4]
 8001a9a:	1852      	addeq	r2, r2, r1
 8001a9c:	6022      	streq	r2, [r4, #0]
 8001a9e:	6063      	str	r3, [r4, #4]
 8001aa0:	6004      	str	r4, [r0, #0]
 8001aa2:	e7ed      	b.n	8001a80 <_free_r+0x24>
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	b10b      	cbz	r3, 8001aae <_free_r+0x52>
 8001aaa:	42a3      	cmp	r3, r4
 8001aac:	d9fa      	bls.n	8001aa4 <_free_r+0x48>
 8001aae:	6811      	ldr	r1, [r2, #0]
 8001ab0:	1850      	adds	r0, r2, r1
 8001ab2:	42a0      	cmp	r0, r4
 8001ab4:	d10b      	bne.n	8001ace <_free_r+0x72>
 8001ab6:	6820      	ldr	r0, [r4, #0]
 8001ab8:	4401      	add	r1, r0
 8001aba:	1850      	adds	r0, r2, r1
 8001abc:	4283      	cmp	r3, r0
 8001abe:	6011      	str	r1, [r2, #0]
 8001ac0:	d1de      	bne.n	8001a80 <_free_r+0x24>
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4401      	add	r1, r0
 8001ac8:	6011      	str	r1, [r2, #0]
 8001aca:	6053      	str	r3, [r2, #4]
 8001acc:	e7d8      	b.n	8001a80 <_free_r+0x24>
 8001ace:	d902      	bls.n	8001ad6 <_free_r+0x7a>
 8001ad0:	230c      	movs	r3, #12
 8001ad2:	602b      	str	r3, [r5, #0]
 8001ad4:	e7d4      	b.n	8001a80 <_free_r+0x24>
 8001ad6:	6820      	ldr	r0, [r4, #0]
 8001ad8:	1821      	adds	r1, r4, r0
 8001ada:	428b      	cmp	r3, r1
 8001adc:	bf01      	itttt	eq
 8001ade:	6819      	ldreq	r1, [r3, #0]
 8001ae0:	685b      	ldreq	r3, [r3, #4]
 8001ae2:	1809      	addeq	r1, r1, r0
 8001ae4:	6021      	streq	r1, [r4, #0]
 8001ae6:	6063      	str	r3, [r4, #4]
 8001ae8:	6054      	str	r4, [r2, #4]
 8001aea:	e7c9      	b.n	8001a80 <_free_r+0x24>
 8001aec:	bd38      	pop	{r3, r4, r5, pc}
 8001aee:	bf00      	nop
 8001af0:	200001f0 	.word	0x200001f0

08001af4 <_malloc_r>:
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	1ccd      	adds	r5, r1, #3
 8001af8:	f025 0503 	bic.w	r5, r5, #3
 8001afc:	3508      	adds	r5, #8
 8001afe:	2d0c      	cmp	r5, #12
 8001b00:	bf38      	it	cc
 8001b02:	250c      	movcc	r5, #12
 8001b04:	2d00      	cmp	r5, #0
 8001b06:	4606      	mov	r6, r0
 8001b08:	db01      	blt.n	8001b0e <_malloc_r+0x1a>
 8001b0a:	42a9      	cmp	r1, r5
 8001b0c:	d903      	bls.n	8001b16 <_malloc_r+0x22>
 8001b0e:	230c      	movs	r3, #12
 8001b10:	6033      	str	r3, [r6, #0]
 8001b12:	2000      	movs	r0, #0
 8001b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b16:	f001 fef3 	bl	8003900 <__malloc_lock>
 8001b1a:	4921      	ldr	r1, [pc, #132]	; (8001ba0 <_malloc_r+0xac>)
 8001b1c:	680a      	ldr	r2, [r1, #0]
 8001b1e:	4614      	mov	r4, r2
 8001b20:	b99c      	cbnz	r4, 8001b4a <_malloc_r+0x56>
 8001b22:	4f20      	ldr	r7, [pc, #128]	; (8001ba4 <_malloc_r+0xb0>)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b923      	cbnz	r3, 8001b32 <_malloc_r+0x3e>
 8001b28:	4621      	mov	r1, r4
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	f000 fd2a 	bl	8002584 <_sbrk_r>
 8001b30:	6038      	str	r0, [r7, #0]
 8001b32:	4629      	mov	r1, r5
 8001b34:	4630      	mov	r0, r6
 8001b36:	f000 fd25 	bl	8002584 <_sbrk_r>
 8001b3a:	1c43      	adds	r3, r0, #1
 8001b3c:	d123      	bne.n	8001b86 <_malloc_r+0x92>
 8001b3e:	230c      	movs	r3, #12
 8001b40:	4630      	mov	r0, r6
 8001b42:	6033      	str	r3, [r6, #0]
 8001b44:	f001 fee2 	bl	800390c <__malloc_unlock>
 8001b48:	e7e3      	b.n	8001b12 <_malloc_r+0x1e>
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	1b5b      	subs	r3, r3, r5
 8001b4e:	d417      	bmi.n	8001b80 <_malloc_r+0x8c>
 8001b50:	2b0b      	cmp	r3, #11
 8001b52:	d903      	bls.n	8001b5c <_malloc_r+0x68>
 8001b54:	6023      	str	r3, [r4, #0]
 8001b56:	441c      	add	r4, r3
 8001b58:	6025      	str	r5, [r4, #0]
 8001b5a:	e004      	b.n	8001b66 <_malloc_r+0x72>
 8001b5c:	6863      	ldr	r3, [r4, #4]
 8001b5e:	42a2      	cmp	r2, r4
 8001b60:	bf0c      	ite	eq
 8001b62:	600b      	streq	r3, [r1, #0]
 8001b64:	6053      	strne	r3, [r2, #4]
 8001b66:	4630      	mov	r0, r6
 8001b68:	f001 fed0 	bl	800390c <__malloc_unlock>
 8001b6c:	f104 000b 	add.w	r0, r4, #11
 8001b70:	1d23      	adds	r3, r4, #4
 8001b72:	f020 0007 	bic.w	r0, r0, #7
 8001b76:	1ac2      	subs	r2, r0, r3
 8001b78:	d0cc      	beq.n	8001b14 <_malloc_r+0x20>
 8001b7a:	1a1b      	subs	r3, r3, r0
 8001b7c:	50a3      	str	r3, [r4, r2]
 8001b7e:	e7c9      	b.n	8001b14 <_malloc_r+0x20>
 8001b80:	4622      	mov	r2, r4
 8001b82:	6864      	ldr	r4, [r4, #4]
 8001b84:	e7cc      	b.n	8001b20 <_malloc_r+0x2c>
 8001b86:	1cc4      	adds	r4, r0, #3
 8001b88:	f024 0403 	bic.w	r4, r4, #3
 8001b8c:	42a0      	cmp	r0, r4
 8001b8e:	d0e3      	beq.n	8001b58 <_malloc_r+0x64>
 8001b90:	1a21      	subs	r1, r4, r0
 8001b92:	4630      	mov	r0, r6
 8001b94:	f000 fcf6 	bl	8002584 <_sbrk_r>
 8001b98:	3001      	adds	r0, #1
 8001b9a:	d1dd      	bne.n	8001b58 <_malloc_r+0x64>
 8001b9c:	e7cf      	b.n	8001b3e <_malloc_r+0x4a>
 8001b9e:	bf00      	nop
 8001ba0:	200001f0 	.word	0x200001f0
 8001ba4:	200001f4 	.word	0x200001f4

08001ba8 <__cvt>:
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bae:	461f      	mov	r7, r3
 8001bb0:	bfbb      	ittet	lt
 8001bb2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8001bb6:	461f      	movlt	r7, r3
 8001bb8:	2300      	movge	r3, #0
 8001bba:	232d      	movlt	r3, #45	; 0x2d
 8001bbc:	b088      	sub	sp, #32
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001bc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001bc4:	7013      	strb	r3, [r2, #0]
 8001bc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001bc8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8001bcc:	f023 0820 	bic.w	r8, r3, #32
 8001bd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001bd4:	d005      	beq.n	8001be2 <__cvt+0x3a>
 8001bd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8001bda:	d100      	bne.n	8001bde <__cvt+0x36>
 8001bdc:	3501      	adds	r5, #1
 8001bde:	2302      	movs	r3, #2
 8001be0:	e000      	b.n	8001be4 <__cvt+0x3c>
 8001be2:	2303      	movs	r3, #3
 8001be4:	aa07      	add	r2, sp, #28
 8001be6:	9204      	str	r2, [sp, #16]
 8001be8:	aa06      	add	r2, sp, #24
 8001bea:	e9cd a202 	strd	sl, r2, [sp, #8]
 8001bee:	e9cd 3500 	strd	r3, r5, [sp]
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	f000 fe43 	bl	8002880 <_dtoa_r>
 8001bfa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001bfe:	4606      	mov	r6, r0
 8001c00:	d102      	bne.n	8001c08 <__cvt+0x60>
 8001c02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001c04:	07db      	lsls	r3, r3, #31
 8001c06:	d522      	bpl.n	8001c4e <__cvt+0xa6>
 8001c08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001c0c:	eb06 0905 	add.w	r9, r6, r5
 8001c10:	d110      	bne.n	8001c34 <__cvt+0x8c>
 8001c12:	7833      	ldrb	r3, [r6, #0]
 8001c14:	2b30      	cmp	r3, #48	; 0x30
 8001c16:	d10a      	bne.n	8001c2e <__cvt+0x86>
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	4639      	mov	r1, r7
 8001c20:	f7fe fec2 	bl	80009a8 <__aeabi_dcmpeq>
 8001c24:	b918      	cbnz	r0, 8001c2e <__cvt+0x86>
 8001c26:	f1c5 0501 	rsb	r5, r5, #1
 8001c2a:	f8ca 5000 	str.w	r5, [sl]
 8001c2e:	f8da 3000 	ldr.w	r3, [sl]
 8001c32:	4499      	add	r9, r3
 8001c34:	2200      	movs	r2, #0
 8001c36:	2300      	movs	r3, #0
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4639      	mov	r1, r7
 8001c3c:	f7fe feb4 	bl	80009a8 <__aeabi_dcmpeq>
 8001c40:	b108      	cbz	r0, 8001c46 <__cvt+0x9e>
 8001c42:	f8cd 901c 	str.w	r9, [sp, #28]
 8001c46:	2230      	movs	r2, #48	; 0x30
 8001c48:	9b07      	ldr	r3, [sp, #28]
 8001c4a:	454b      	cmp	r3, r9
 8001c4c:	d307      	bcc.n	8001c5e <__cvt+0xb6>
 8001c4e:	4630      	mov	r0, r6
 8001c50:	9b07      	ldr	r3, [sp, #28]
 8001c52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001c54:	1b9b      	subs	r3, r3, r6
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	b008      	add	sp, #32
 8001c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c5e:	1c59      	adds	r1, r3, #1
 8001c60:	9107      	str	r1, [sp, #28]
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e7f0      	b.n	8001c48 <__cvt+0xa0>

08001c66 <__exponent>:
 8001c66:	4603      	mov	r3, r0
 8001c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c6a:	2900      	cmp	r1, #0
 8001c6c:	f803 2b02 	strb.w	r2, [r3], #2
 8001c70:	bfb6      	itet	lt
 8001c72:	222d      	movlt	r2, #45	; 0x2d
 8001c74:	222b      	movge	r2, #43	; 0x2b
 8001c76:	4249      	neglt	r1, r1
 8001c78:	2909      	cmp	r1, #9
 8001c7a:	7042      	strb	r2, [r0, #1]
 8001c7c:	dd2b      	ble.n	8001cd6 <__exponent+0x70>
 8001c7e:	f10d 0407 	add.w	r4, sp, #7
 8001c82:	46a4      	mov	ip, r4
 8001c84:	270a      	movs	r7, #10
 8001c86:	fb91 f6f7 	sdiv	r6, r1, r7
 8001c8a:	460a      	mov	r2, r1
 8001c8c:	46a6      	mov	lr, r4
 8001c8e:	fb07 1516 	mls	r5, r7, r6, r1
 8001c92:	2a63      	cmp	r2, #99	; 0x63
 8001c94:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8001c98:	4631      	mov	r1, r6
 8001c9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8001c9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8001ca2:	dcf0      	bgt.n	8001c86 <__exponent+0x20>
 8001ca4:	3130      	adds	r1, #48	; 0x30
 8001ca6:	f1ae 0502 	sub.w	r5, lr, #2
 8001caa:	f804 1c01 	strb.w	r1, [r4, #-1]
 8001cae:	4629      	mov	r1, r5
 8001cb0:	1c44      	adds	r4, r0, #1
 8001cb2:	4561      	cmp	r1, ip
 8001cb4:	d30a      	bcc.n	8001ccc <__exponent+0x66>
 8001cb6:	f10d 0209 	add.w	r2, sp, #9
 8001cba:	eba2 020e 	sub.w	r2, r2, lr
 8001cbe:	4565      	cmp	r5, ip
 8001cc0:	bf88      	it	hi
 8001cc2:	2200      	movhi	r2, #0
 8001cc4:	4413      	add	r3, r2
 8001cc6:	1a18      	subs	r0, r3, r0
 8001cc8:	b003      	add	sp, #12
 8001cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ccc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001cd0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8001cd4:	e7ed      	b.n	8001cb2 <__exponent+0x4c>
 8001cd6:	2330      	movs	r3, #48	; 0x30
 8001cd8:	3130      	adds	r1, #48	; 0x30
 8001cda:	7083      	strb	r3, [r0, #2]
 8001cdc:	70c1      	strb	r1, [r0, #3]
 8001cde:	1d03      	adds	r3, r0, #4
 8001ce0:	e7f1      	b.n	8001cc6 <__exponent+0x60>
	...

08001ce4 <_printf_float>:
 8001ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ce8:	b091      	sub	sp, #68	; 0x44
 8001cea:	460c      	mov	r4, r1
 8001cec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8001cf0:	4616      	mov	r6, r2
 8001cf2:	461f      	mov	r7, r3
 8001cf4:	4605      	mov	r5, r0
 8001cf6:	f001 fd7b 	bl	80037f0 <_localeconv_r>
 8001cfa:	6803      	ldr	r3, [r0, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8001d00:	f7fe fa26 	bl	8000150 <strlen>
 8001d04:	2300      	movs	r3, #0
 8001d06:	930e      	str	r3, [sp, #56]	; 0x38
 8001d08:	f8d8 3000 	ldr.w	r3, [r8]
 8001d0c:	900a      	str	r0, [sp, #40]	; 0x28
 8001d0e:	3307      	adds	r3, #7
 8001d10:	f023 0307 	bic.w	r3, r3, #7
 8001d14:	f103 0208 	add.w	r2, r3, #8
 8001d18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8001d1c:	f8d4 b000 	ldr.w	fp, [r4]
 8001d20:	f8c8 2000 	str.w	r2, [r8]
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8001d2c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8001d30:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8001d34:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d36:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3a:	4640      	mov	r0, r8
 8001d3c:	4b9c      	ldr	r3, [pc, #624]	; (8001fb0 <_printf_float+0x2cc>)
 8001d3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001d40:	f7fe fe64 	bl	8000a0c <__aeabi_dcmpun>
 8001d44:	bb70      	cbnz	r0, 8001da4 <_printf_float+0xc0>
 8001d46:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4a:	4640      	mov	r0, r8
 8001d4c:	4b98      	ldr	r3, [pc, #608]	; (8001fb0 <_printf_float+0x2cc>)
 8001d4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001d50:	f7fe fe3e 	bl	80009d0 <__aeabi_dcmple>
 8001d54:	bb30      	cbnz	r0, 8001da4 <_printf_float+0xc0>
 8001d56:	2200      	movs	r2, #0
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	4651      	mov	r1, sl
 8001d5e:	f7fe fe2d 	bl	80009bc <__aeabi_dcmplt>
 8001d62:	b110      	cbz	r0, 8001d6a <_printf_float+0x86>
 8001d64:	232d      	movs	r3, #45	; 0x2d
 8001d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d6a:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <_printf_float+0x2d0>)
 8001d6c:	4892      	ldr	r0, [pc, #584]	; (8001fb8 <_printf_float+0x2d4>)
 8001d6e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8001d72:	bf94      	ite	ls
 8001d74:	4698      	movls	r8, r3
 8001d76:	4680      	movhi	r8, r0
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f04f 0a00 	mov.w	sl, #0
 8001d7e:	6123      	str	r3, [r4, #16]
 8001d80:	f02b 0304 	bic.w	r3, fp, #4
 8001d84:	6023      	str	r3, [r4, #0]
 8001d86:	4633      	mov	r3, r6
 8001d88:	4621      	mov	r1, r4
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	9700      	str	r7, [sp, #0]
 8001d8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8001d90:	f000 f9d4 	bl	800213c <_printf_common>
 8001d94:	3001      	adds	r0, #1
 8001d96:	f040 8090 	bne.w	8001eba <_printf_float+0x1d6>
 8001d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9e:	b011      	add	sp, #68	; 0x44
 8001da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001da4:	4642      	mov	r2, r8
 8001da6:	4653      	mov	r3, sl
 8001da8:	4640      	mov	r0, r8
 8001daa:	4651      	mov	r1, sl
 8001dac:	f7fe fe2e 	bl	8000a0c <__aeabi_dcmpun>
 8001db0:	b148      	cbz	r0, 8001dc6 <_printf_float+0xe2>
 8001db2:	f1ba 0f00 	cmp.w	sl, #0
 8001db6:	bfb8      	it	lt
 8001db8:	232d      	movlt	r3, #45	; 0x2d
 8001dba:	4880      	ldr	r0, [pc, #512]	; (8001fbc <_printf_float+0x2d8>)
 8001dbc:	bfb8      	it	lt
 8001dbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8001dc2:	4b7f      	ldr	r3, [pc, #508]	; (8001fc0 <_printf_float+0x2dc>)
 8001dc4:	e7d3      	b.n	8001d6e <_printf_float+0x8a>
 8001dc6:	6863      	ldr	r3, [r4, #4]
 8001dc8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	d142      	bne.n	8001e56 <_printf_float+0x172>
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	6063      	str	r3, [r4, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	9206      	str	r2, [sp, #24]
 8001dd8:	aa0e      	add	r2, sp, #56	; 0x38
 8001dda:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8001dde:	aa0d      	add	r2, sp, #52	; 0x34
 8001de0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8001de4:	9203      	str	r2, [sp, #12]
 8001de6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8001dea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001dee:	6023      	str	r3, [r4, #0]
 8001df0:	6863      	ldr	r3, [r4, #4]
 8001df2:	4642      	mov	r2, r8
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	4628      	mov	r0, r5
 8001df8:	4653      	mov	r3, sl
 8001dfa:	910b      	str	r1, [sp, #44]	; 0x2c
 8001dfc:	f7ff fed4 	bl	8001ba8 <__cvt>
 8001e00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001e02:	4680      	mov	r8, r0
 8001e04:	2947      	cmp	r1, #71	; 0x47
 8001e06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001e08:	d108      	bne.n	8001e1c <_printf_float+0x138>
 8001e0a:	1cc8      	adds	r0, r1, #3
 8001e0c:	db02      	blt.n	8001e14 <_printf_float+0x130>
 8001e0e:	6863      	ldr	r3, [r4, #4]
 8001e10:	4299      	cmp	r1, r3
 8001e12:	dd40      	ble.n	8001e96 <_printf_float+0x1b2>
 8001e14:	f1a9 0902 	sub.w	r9, r9, #2
 8001e18:	fa5f f989 	uxtb.w	r9, r9
 8001e1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8001e20:	d81f      	bhi.n	8001e62 <_printf_float+0x17e>
 8001e22:	464a      	mov	r2, r9
 8001e24:	3901      	subs	r1, #1
 8001e26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001e2a:	910d      	str	r1, [sp, #52]	; 0x34
 8001e2c:	f7ff ff1b 	bl	8001c66 <__exponent>
 8001e30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001e32:	4682      	mov	sl, r0
 8001e34:	1813      	adds	r3, r2, r0
 8001e36:	2a01      	cmp	r2, #1
 8001e38:	6123      	str	r3, [r4, #16]
 8001e3a:	dc02      	bgt.n	8001e42 <_printf_float+0x15e>
 8001e3c:	6822      	ldr	r2, [r4, #0]
 8001e3e:	07d2      	lsls	r2, r2, #31
 8001e40:	d501      	bpl.n	8001e46 <_printf_float+0x162>
 8001e42:	3301      	adds	r3, #1
 8001e44:	6123      	str	r3, [r4, #16]
 8001e46:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d09b      	beq.n	8001d86 <_printf_float+0xa2>
 8001e4e:	232d      	movs	r3, #45	; 0x2d
 8001e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e54:	e797      	b.n	8001d86 <_printf_float+0xa2>
 8001e56:	2947      	cmp	r1, #71	; 0x47
 8001e58:	d1bc      	bne.n	8001dd4 <_printf_float+0xf0>
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ba      	bne.n	8001dd4 <_printf_float+0xf0>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e7b7      	b.n	8001dd2 <_printf_float+0xee>
 8001e62:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8001e66:	d118      	bne.n	8001e9a <_printf_float+0x1b6>
 8001e68:	2900      	cmp	r1, #0
 8001e6a:	6863      	ldr	r3, [r4, #4]
 8001e6c:	dd0b      	ble.n	8001e86 <_printf_float+0x1a2>
 8001e6e:	6121      	str	r1, [r4, #16]
 8001e70:	b913      	cbnz	r3, 8001e78 <_printf_float+0x194>
 8001e72:	6822      	ldr	r2, [r4, #0]
 8001e74:	07d0      	lsls	r0, r2, #31
 8001e76:	d502      	bpl.n	8001e7e <_printf_float+0x19a>
 8001e78:	3301      	adds	r3, #1
 8001e7a:	440b      	add	r3, r1
 8001e7c:	6123      	str	r3, [r4, #16]
 8001e7e:	f04f 0a00 	mov.w	sl, #0
 8001e82:	65a1      	str	r1, [r4, #88]	; 0x58
 8001e84:	e7df      	b.n	8001e46 <_printf_float+0x162>
 8001e86:	b913      	cbnz	r3, 8001e8e <_printf_float+0x1aa>
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	07d2      	lsls	r2, r2, #31
 8001e8c:	d501      	bpl.n	8001e92 <_printf_float+0x1ae>
 8001e8e:	3302      	adds	r3, #2
 8001e90:	e7f4      	b.n	8001e7c <_printf_float+0x198>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e7f2      	b.n	8001e7c <_printf_float+0x198>
 8001e96:	f04f 0967 	mov.w	r9, #103	; 0x67
 8001e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001e9c:	4299      	cmp	r1, r3
 8001e9e:	db05      	blt.n	8001eac <_printf_float+0x1c8>
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	6121      	str	r1, [r4, #16]
 8001ea4:	07d8      	lsls	r0, r3, #31
 8001ea6:	d5ea      	bpl.n	8001e7e <_printf_float+0x19a>
 8001ea8:	1c4b      	adds	r3, r1, #1
 8001eaa:	e7e7      	b.n	8001e7c <_printf_float+0x198>
 8001eac:	2900      	cmp	r1, #0
 8001eae:	bfcc      	ite	gt
 8001eb0:	2201      	movgt	r2, #1
 8001eb2:	f1c1 0202 	rsble	r2, r1, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	e7e0      	b.n	8001e7c <_printf_float+0x198>
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	055a      	lsls	r2, r3, #21
 8001ebe:	d407      	bmi.n	8001ed0 <_printf_float+0x1ec>
 8001ec0:	6923      	ldr	r3, [r4, #16]
 8001ec2:	4642      	mov	r2, r8
 8001ec4:	4631      	mov	r1, r6
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	47b8      	blx	r7
 8001eca:	3001      	adds	r0, #1
 8001ecc:	d12b      	bne.n	8001f26 <_printf_float+0x242>
 8001ece:	e764      	b.n	8001d9a <_printf_float+0xb6>
 8001ed0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8001ed4:	f240 80dd 	bls.w	8002092 <_printf_float+0x3ae>
 8001ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001edc:	2200      	movs	r2, #0
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f7fe fd62 	bl	80009a8 <__aeabi_dcmpeq>
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d033      	beq.n	8001f50 <_printf_float+0x26c>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	4631      	mov	r1, r6
 8001eec:	4628      	mov	r0, r5
 8001eee:	4a35      	ldr	r2, [pc, #212]	; (8001fc4 <_printf_float+0x2e0>)
 8001ef0:	47b8      	blx	r7
 8001ef2:	3001      	adds	r0, #1
 8001ef4:	f43f af51 	beq.w	8001d9a <_printf_float+0xb6>
 8001ef8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001efc:	429a      	cmp	r2, r3
 8001efe:	db02      	blt.n	8001f06 <_printf_float+0x222>
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	07d8      	lsls	r0, r3, #31
 8001f04:	d50f      	bpl.n	8001f26 <_printf_float+0x242>
 8001f06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001f0a:	4631      	mov	r1, r6
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	47b8      	blx	r7
 8001f10:	3001      	adds	r0, #1
 8001f12:	f43f af42 	beq.w	8001d9a <_printf_float+0xb6>
 8001f16:	f04f 0800 	mov.w	r8, #0
 8001f1a:	f104 091a 	add.w	r9, r4, #26
 8001f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f20:	3b01      	subs	r3, #1
 8001f22:	4543      	cmp	r3, r8
 8001f24:	dc09      	bgt.n	8001f3a <_printf_float+0x256>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	079b      	lsls	r3, r3, #30
 8001f2a:	f100 8102 	bmi.w	8002132 <_printf_float+0x44e>
 8001f2e:	68e0      	ldr	r0, [r4, #12]
 8001f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001f32:	4298      	cmp	r0, r3
 8001f34:	bfb8      	it	lt
 8001f36:	4618      	movlt	r0, r3
 8001f38:	e731      	b.n	8001d9e <_printf_float+0xba>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	464a      	mov	r2, r9
 8001f3e:	4631      	mov	r1, r6
 8001f40:	4628      	mov	r0, r5
 8001f42:	47b8      	blx	r7
 8001f44:	3001      	adds	r0, #1
 8001f46:	f43f af28 	beq.w	8001d9a <_printf_float+0xb6>
 8001f4a:	f108 0801 	add.w	r8, r8, #1
 8001f4e:	e7e6      	b.n	8001f1e <_printf_float+0x23a>
 8001f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	dc38      	bgt.n	8001fc8 <_printf_float+0x2e4>
 8001f56:	2301      	movs	r3, #1
 8001f58:	4631      	mov	r1, r6
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <_printf_float+0x2e0>)
 8001f5e:	47b8      	blx	r7
 8001f60:	3001      	adds	r0, #1
 8001f62:	f43f af1a 	beq.w	8001d9a <_printf_float+0xb6>
 8001f66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	d102      	bne.n	8001f74 <_printf_float+0x290>
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	07d9      	lsls	r1, r3, #31
 8001f72:	d5d8      	bpl.n	8001f26 <_printf_float+0x242>
 8001f74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001f78:	4631      	mov	r1, r6
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	47b8      	blx	r7
 8001f7e:	3001      	adds	r0, #1
 8001f80:	f43f af0b 	beq.w	8001d9a <_printf_float+0xb6>
 8001f84:	f04f 0900 	mov.w	r9, #0
 8001f88:	f104 0a1a 	add.w	sl, r4, #26
 8001f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f8e:	425b      	negs	r3, r3
 8001f90:	454b      	cmp	r3, r9
 8001f92:	dc01      	bgt.n	8001f98 <_printf_float+0x2b4>
 8001f94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f96:	e794      	b.n	8001ec2 <_printf_float+0x1de>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	4652      	mov	r2, sl
 8001f9c:	4631      	mov	r1, r6
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	47b8      	blx	r7
 8001fa2:	3001      	adds	r0, #1
 8001fa4:	f43f aef9 	beq.w	8001d9a <_printf_float+0xb6>
 8001fa8:	f109 0901 	add.w	r9, r9, #1
 8001fac:	e7ee      	b.n	8001f8c <_printf_float+0x2a8>
 8001fae:	bf00      	nop
 8001fb0:	7fefffff 	.word	0x7fefffff
 8001fb4:	08004680 	.word	0x08004680
 8001fb8:	08004684 	.word	0x08004684
 8001fbc:	0800468c 	.word	0x0800468c
 8001fc0:	08004688 	.word	0x08004688
 8001fc4:	08004690 	.word	0x08004690
 8001fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001fca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	bfa8      	it	ge
 8001fd0:	461a      	movge	r2, r3
 8001fd2:	2a00      	cmp	r2, #0
 8001fd4:	4691      	mov	r9, r2
 8001fd6:	dc37      	bgt.n	8002048 <_printf_float+0x364>
 8001fd8:	f04f 0b00 	mov.w	fp, #0
 8001fdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001fe0:	f104 021a 	add.w	r2, r4, #26
 8001fe4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8001fe8:	ebaa 0309 	sub.w	r3, sl, r9
 8001fec:	455b      	cmp	r3, fp
 8001fee:	dc33      	bgt.n	8002058 <_printf_float+0x374>
 8001ff0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	db3b      	blt.n	8002070 <_printf_float+0x38c>
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	07da      	lsls	r2, r3, #31
 8001ffc:	d438      	bmi.n	8002070 <_printf_float+0x38c>
 8001ffe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002000:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002002:	eba2 030a 	sub.w	r3, r2, sl
 8002006:	eba2 0901 	sub.w	r9, r2, r1
 800200a:	4599      	cmp	r9, r3
 800200c:	bfa8      	it	ge
 800200e:	4699      	movge	r9, r3
 8002010:	f1b9 0f00 	cmp.w	r9, #0
 8002014:	dc34      	bgt.n	8002080 <_printf_float+0x39c>
 8002016:	f04f 0800 	mov.w	r8, #0
 800201a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800201e:	f104 0a1a 	add.w	sl, r4, #26
 8002022:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	eba3 0309 	sub.w	r3, r3, r9
 800202c:	4543      	cmp	r3, r8
 800202e:	f77f af7a 	ble.w	8001f26 <_printf_float+0x242>
 8002032:	2301      	movs	r3, #1
 8002034:	4652      	mov	r2, sl
 8002036:	4631      	mov	r1, r6
 8002038:	4628      	mov	r0, r5
 800203a:	47b8      	blx	r7
 800203c:	3001      	adds	r0, #1
 800203e:	f43f aeac 	beq.w	8001d9a <_printf_float+0xb6>
 8002042:	f108 0801 	add.w	r8, r8, #1
 8002046:	e7ec      	b.n	8002022 <_printf_float+0x33e>
 8002048:	4613      	mov	r3, r2
 800204a:	4631      	mov	r1, r6
 800204c:	4642      	mov	r2, r8
 800204e:	4628      	mov	r0, r5
 8002050:	47b8      	blx	r7
 8002052:	3001      	adds	r0, #1
 8002054:	d1c0      	bne.n	8001fd8 <_printf_float+0x2f4>
 8002056:	e6a0      	b.n	8001d9a <_printf_float+0xb6>
 8002058:	2301      	movs	r3, #1
 800205a:	4631      	mov	r1, r6
 800205c:	4628      	mov	r0, r5
 800205e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002060:	47b8      	blx	r7
 8002062:	3001      	adds	r0, #1
 8002064:	f43f ae99 	beq.w	8001d9a <_printf_float+0xb6>
 8002068:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800206a:	f10b 0b01 	add.w	fp, fp, #1
 800206e:	e7b9      	b.n	8001fe4 <_printf_float+0x300>
 8002070:	4631      	mov	r1, r6
 8002072:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002076:	4628      	mov	r0, r5
 8002078:	47b8      	blx	r7
 800207a:	3001      	adds	r0, #1
 800207c:	d1bf      	bne.n	8001ffe <_printf_float+0x31a>
 800207e:	e68c      	b.n	8001d9a <_printf_float+0xb6>
 8002080:	464b      	mov	r3, r9
 8002082:	4631      	mov	r1, r6
 8002084:	4628      	mov	r0, r5
 8002086:	eb08 020a 	add.w	r2, r8, sl
 800208a:	47b8      	blx	r7
 800208c:	3001      	adds	r0, #1
 800208e:	d1c2      	bne.n	8002016 <_printf_float+0x332>
 8002090:	e683      	b.n	8001d9a <_printf_float+0xb6>
 8002092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002094:	2a01      	cmp	r2, #1
 8002096:	dc01      	bgt.n	800209c <_printf_float+0x3b8>
 8002098:	07db      	lsls	r3, r3, #31
 800209a:	d537      	bpl.n	800210c <_printf_float+0x428>
 800209c:	2301      	movs	r3, #1
 800209e:	4642      	mov	r2, r8
 80020a0:	4631      	mov	r1, r6
 80020a2:	4628      	mov	r0, r5
 80020a4:	47b8      	blx	r7
 80020a6:	3001      	adds	r0, #1
 80020a8:	f43f ae77 	beq.w	8001d9a <_printf_float+0xb6>
 80020ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80020b0:	4631      	mov	r1, r6
 80020b2:	4628      	mov	r0, r5
 80020b4:	47b8      	blx	r7
 80020b6:	3001      	adds	r0, #1
 80020b8:	f43f ae6f 	beq.w	8001d9a <_printf_float+0xb6>
 80020bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80020c0:	2200      	movs	r2, #0
 80020c2:	2300      	movs	r3, #0
 80020c4:	f7fe fc70 	bl	80009a8 <__aeabi_dcmpeq>
 80020c8:	b9d8      	cbnz	r0, 8002102 <_printf_float+0x41e>
 80020ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020cc:	f108 0201 	add.w	r2, r8, #1
 80020d0:	3b01      	subs	r3, #1
 80020d2:	4631      	mov	r1, r6
 80020d4:	4628      	mov	r0, r5
 80020d6:	47b8      	blx	r7
 80020d8:	3001      	adds	r0, #1
 80020da:	d10e      	bne.n	80020fa <_printf_float+0x416>
 80020dc:	e65d      	b.n	8001d9a <_printf_float+0xb6>
 80020de:	2301      	movs	r3, #1
 80020e0:	464a      	mov	r2, r9
 80020e2:	4631      	mov	r1, r6
 80020e4:	4628      	mov	r0, r5
 80020e6:	47b8      	blx	r7
 80020e8:	3001      	adds	r0, #1
 80020ea:	f43f ae56 	beq.w	8001d9a <_printf_float+0xb6>
 80020ee:	f108 0801 	add.w	r8, r8, #1
 80020f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020f4:	3b01      	subs	r3, #1
 80020f6:	4543      	cmp	r3, r8
 80020f8:	dcf1      	bgt.n	80020de <_printf_float+0x3fa>
 80020fa:	4653      	mov	r3, sl
 80020fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002100:	e6e0      	b.n	8001ec4 <_printf_float+0x1e0>
 8002102:	f04f 0800 	mov.w	r8, #0
 8002106:	f104 091a 	add.w	r9, r4, #26
 800210a:	e7f2      	b.n	80020f2 <_printf_float+0x40e>
 800210c:	2301      	movs	r3, #1
 800210e:	4642      	mov	r2, r8
 8002110:	e7df      	b.n	80020d2 <_printf_float+0x3ee>
 8002112:	2301      	movs	r3, #1
 8002114:	464a      	mov	r2, r9
 8002116:	4631      	mov	r1, r6
 8002118:	4628      	mov	r0, r5
 800211a:	47b8      	blx	r7
 800211c:	3001      	adds	r0, #1
 800211e:	f43f ae3c 	beq.w	8001d9a <_printf_float+0xb6>
 8002122:	f108 0801 	add.w	r8, r8, #1
 8002126:	68e3      	ldr	r3, [r4, #12]
 8002128:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800212a:	1a5b      	subs	r3, r3, r1
 800212c:	4543      	cmp	r3, r8
 800212e:	dcf0      	bgt.n	8002112 <_printf_float+0x42e>
 8002130:	e6fd      	b.n	8001f2e <_printf_float+0x24a>
 8002132:	f04f 0800 	mov.w	r8, #0
 8002136:	f104 0919 	add.w	r9, r4, #25
 800213a:	e7f4      	b.n	8002126 <_printf_float+0x442>

0800213c <_printf_common>:
 800213c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002140:	4616      	mov	r6, r2
 8002142:	4699      	mov	r9, r3
 8002144:	688a      	ldr	r2, [r1, #8]
 8002146:	690b      	ldr	r3, [r1, #16]
 8002148:	4607      	mov	r7, r0
 800214a:	4293      	cmp	r3, r2
 800214c:	bfb8      	it	lt
 800214e:	4613      	movlt	r3, r2
 8002150:	6033      	str	r3, [r6, #0]
 8002152:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002156:	460c      	mov	r4, r1
 8002158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800215c:	b10a      	cbz	r2, 8002162 <_printf_common+0x26>
 800215e:	3301      	adds	r3, #1
 8002160:	6033      	str	r3, [r6, #0]
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	0699      	lsls	r1, r3, #26
 8002166:	bf42      	ittt	mi
 8002168:	6833      	ldrmi	r3, [r6, #0]
 800216a:	3302      	addmi	r3, #2
 800216c:	6033      	strmi	r3, [r6, #0]
 800216e:	6825      	ldr	r5, [r4, #0]
 8002170:	f015 0506 	ands.w	r5, r5, #6
 8002174:	d106      	bne.n	8002184 <_printf_common+0x48>
 8002176:	f104 0a19 	add.w	sl, r4, #25
 800217a:	68e3      	ldr	r3, [r4, #12]
 800217c:	6832      	ldr	r2, [r6, #0]
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	42ab      	cmp	r3, r5
 8002182:	dc28      	bgt.n	80021d6 <_printf_common+0x9a>
 8002184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002188:	1e13      	subs	r3, r2, #0
 800218a:	6822      	ldr	r2, [r4, #0]
 800218c:	bf18      	it	ne
 800218e:	2301      	movne	r3, #1
 8002190:	0692      	lsls	r2, r2, #26
 8002192:	d42d      	bmi.n	80021f0 <_printf_common+0xb4>
 8002194:	4649      	mov	r1, r9
 8002196:	4638      	mov	r0, r7
 8002198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800219c:	47c0      	blx	r8
 800219e:	3001      	adds	r0, #1
 80021a0:	d020      	beq.n	80021e4 <_printf_common+0xa8>
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	68e5      	ldr	r5, [r4, #12]
 80021a6:	f003 0306 	and.w	r3, r3, #6
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf18      	it	ne
 80021ae:	2500      	movne	r5, #0
 80021b0:	6832      	ldr	r2, [r6, #0]
 80021b2:	f04f 0600 	mov.w	r6, #0
 80021b6:	68a3      	ldr	r3, [r4, #8]
 80021b8:	bf08      	it	eq
 80021ba:	1aad      	subeq	r5, r5, r2
 80021bc:	6922      	ldr	r2, [r4, #16]
 80021be:	bf08      	it	eq
 80021c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021c4:	4293      	cmp	r3, r2
 80021c6:	bfc4      	itt	gt
 80021c8:	1a9b      	subgt	r3, r3, r2
 80021ca:	18ed      	addgt	r5, r5, r3
 80021cc:	341a      	adds	r4, #26
 80021ce:	42b5      	cmp	r5, r6
 80021d0:	d11a      	bne.n	8002208 <_printf_common+0xcc>
 80021d2:	2000      	movs	r0, #0
 80021d4:	e008      	b.n	80021e8 <_printf_common+0xac>
 80021d6:	2301      	movs	r3, #1
 80021d8:	4652      	mov	r2, sl
 80021da:	4649      	mov	r1, r9
 80021dc:	4638      	mov	r0, r7
 80021de:	47c0      	blx	r8
 80021e0:	3001      	adds	r0, #1
 80021e2:	d103      	bne.n	80021ec <_printf_common+0xb0>
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ec:	3501      	adds	r5, #1
 80021ee:	e7c4      	b.n	800217a <_printf_common+0x3e>
 80021f0:	2030      	movs	r0, #48	; 0x30
 80021f2:	18e1      	adds	r1, r4, r3
 80021f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021fe:	4422      	add	r2, r4
 8002200:	3302      	adds	r3, #2
 8002202:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002206:	e7c5      	b.n	8002194 <_printf_common+0x58>
 8002208:	2301      	movs	r3, #1
 800220a:	4622      	mov	r2, r4
 800220c:	4649      	mov	r1, r9
 800220e:	4638      	mov	r0, r7
 8002210:	47c0      	blx	r8
 8002212:	3001      	adds	r0, #1
 8002214:	d0e6      	beq.n	80021e4 <_printf_common+0xa8>
 8002216:	3601      	adds	r6, #1
 8002218:	e7d9      	b.n	80021ce <_printf_common+0x92>
	...

0800221c <_printf_i>:
 800221c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002220:	460c      	mov	r4, r1
 8002222:	7e27      	ldrb	r7, [r4, #24]
 8002224:	4691      	mov	r9, r2
 8002226:	2f78      	cmp	r7, #120	; 0x78
 8002228:	4680      	mov	r8, r0
 800222a:	469a      	mov	sl, r3
 800222c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800222e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002232:	d807      	bhi.n	8002244 <_printf_i+0x28>
 8002234:	2f62      	cmp	r7, #98	; 0x62
 8002236:	d80a      	bhi.n	800224e <_printf_i+0x32>
 8002238:	2f00      	cmp	r7, #0
 800223a:	f000 80d9 	beq.w	80023f0 <_printf_i+0x1d4>
 800223e:	2f58      	cmp	r7, #88	; 0x58
 8002240:	f000 80a4 	beq.w	800238c <_printf_i+0x170>
 8002244:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800224c:	e03a      	b.n	80022c4 <_printf_i+0xa8>
 800224e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002252:	2b15      	cmp	r3, #21
 8002254:	d8f6      	bhi.n	8002244 <_printf_i+0x28>
 8002256:	a001      	add	r0, pc, #4	; (adr r0, 800225c <_printf_i+0x40>)
 8002258:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800225c:	080022b5 	.word	0x080022b5
 8002260:	080022c9 	.word	0x080022c9
 8002264:	08002245 	.word	0x08002245
 8002268:	08002245 	.word	0x08002245
 800226c:	08002245 	.word	0x08002245
 8002270:	08002245 	.word	0x08002245
 8002274:	080022c9 	.word	0x080022c9
 8002278:	08002245 	.word	0x08002245
 800227c:	08002245 	.word	0x08002245
 8002280:	08002245 	.word	0x08002245
 8002284:	08002245 	.word	0x08002245
 8002288:	080023d7 	.word	0x080023d7
 800228c:	080022f9 	.word	0x080022f9
 8002290:	080023b9 	.word	0x080023b9
 8002294:	08002245 	.word	0x08002245
 8002298:	08002245 	.word	0x08002245
 800229c:	080023f9 	.word	0x080023f9
 80022a0:	08002245 	.word	0x08002245
 80022a4:	080022f9 	.word	0x080022f9
 80022a8:	08002245 	.word	0x08002245
 80022ac:	08002245 	.word	0x08002245
 80022b0:	080023c1 	.word	0x080023c1
 80022b4:	680b      	ldr	r3, [r1, #0]
 80022b6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80022ba:	1d1a      	adds	r2, r3, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	600a      	str	r2, [r1, #0]
 80022c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0a4      	b.n	8002412 <_printf_i+0x1f6>
 80022c8:	6825      	ldr	r5, [r4, #0]
 80022ca:	6808      	ldr	r0, [r1, #0]
 80022cc:	062e      	lsls	r6, r5, #24
 80022ce:	f100 0304 	add.w	r3, r0, #4
 80022d2:	d50a      	bpl.n	80022ea <_printf_i+0xce>
 80022d4:	6805      	ldr	r5, [r0, #0]
 80022d6:	600b      	str	r3, [r1, #0]
 80022d8:	2d00      	cmp	r5, #0
 80022da:	da03      	bge.n	80022e4 <_printf_i+0xc8>
 80022dc:	232d      	movs	r3, #45	; 0x2d
 80022de:	426d      	negs	r5, r5
 80022e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022e4:	230a      	movs	r3, #10
 80022e6:	485e      	ldr	r0, [pc, #376]	; (8002460 <_printf_i+0x244>)
 80022e8:	e019      	b.n	800231e <_printf_i+0x102>
 80022ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80022ee:	6805      	ldr	r5, [r0, #0]
 80022f0:	600b      	str	r3, [r1, #0]
 80022f2:	bf18      	it	ne
 80022f4:	b22d      	sxthne	r5, r5
 80022f6:	e7ef      	b.n	80022d8 <_printf_i+0xbc>
 80022f8:	680b      	ldr	r3, [r1, #0]
 80022fa:	6825      	ldr	r5, [r4, #0]
 80022fc:	1d18      	adds	r0, r3, #4
 80022fe:	6008      	str	r0, [r1, #0]
 8002300:	0628      	lsls	r0, r5, #24
 8002302:	d501      	bpl.n	8002308 <_printf_i+0xec>
 8002304:	681d      	ldr	r5, [r3, #0]
 8002306:	e002      	b.n	800230e <_printf_i+0xf2>
 8002308:	0669      	lsls	r1, r5, #25
 800230a:	d5fb      	bpl.n	8002304 <_printf_i+0xe8>
 800230c:	881d      	ldrh	r5, [r3, #0]
 800230e:	2f6f      	cmp	r7, #111	; 0x6f
 8002310:	bf0c      	ite	eq
 8002312:	2308      	moveq	r3, #8
 8002314:	230a      	movne	r3, #10
 8002316:	4852      	ldr	r0, [pc, #328]	; (8002460 <_printf_i+0x244>)
 8002318:	2100      	movs	r1, #0
 800231a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800231e:	6866      	ldr	r6, [r4, #4]
 8002320:	2e00      	cmp	r6, #0
 8002322:	bfa8      	it	ge
 8002324:	6821      	ldrge	r1, [r4, #0]
 8002326:	60a6      	str	r6, [r4, #8]
 8002328:	bfa4      	itt	ge
 800232a:	f021 0104 	bicge.w	r1, r1, #4
 800232e:	6021      	strge	r1, [r4, #0]
 8002330:	b90d      	cbnz	r5, 8002336 <_printf_i+0x11a>
 8002332:	2e00      	cmp	r6, #0
 8002334:	d04d      	beq.n	80023d2 <_printf_i+0x1b6>
 8002336:	4616      	mov	r6, r2
 8002338:	fbb5 f1f3 	udiv	r1, r5, r3
 800233c:	fb03 5711 	mls	r7, r3, r1, r5
 8002340:	5dc7      	ldrb	r7, [r0, r7]
 8002342:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002346:	462f      	mov	r7, r5
 8002348:	42bb      	cmp	r3, r7
 800234a:	460d      	mov	r5, r1
 800234c:	d9f4      	bls.n	8002338 <_printf_i+0x11c>
 800234e:	2b08      	cmp	r3, #8
 8002350:	d10b      	bne.n	800236a <_printf_i+0x14e>
 8002352:	6823      	ldr	r3, [r4, #0]
 8002354:	07df      	lsls	r7, r3, #31
 8002356:	d508      	bpl.n	800236a <_printf_i+0x14e>
 8002358:	6923      	ldr	r3, [r4, #16]
 800235a:	6861      	ldr	r1, [r4, #4]
 800235c:	4299      	cmp	r1, r3
 800235e:	bfde      	ittt	le
 8002360:	2330      	movle	r3, #48	; 0x30
 8002362:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002366:	f106 36ff 	addle.w	r6, r6, #4294967295
 800236a:	1b92      	subs	r2, r2, r6
 800236c:	6122      	str	r2, [r4, #16]
 800236e:	464b      	mov	r3, r9
 8002370:	4621      	mov	r1, r4
 8002372:	4640      	mov	r0, r8
 8002374:	f8cd a000 	str.w	sl, [sp]
 8002378:	aa03      	add	r2, sp, #12
 800237a:	f7ff fedf 	bl	800213c <_printf_common>
 800237e:	3001      	adds	r0, #1
 8002380:	d14c      	bne.n	800241c <_printf_i+0x200>
 8002382:	f04f 30ff 	mov.w	r0, #4294967295
 8002386:	b004      	add	sp, #16
 8002388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800238c:	4834      	ldr	r0, [pc, #208]	; (8002460 <_printf_i+0x244>)
 800238e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002392:	680e      	ldr	r6, [r1, #0]
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	f856 5b04 	ldr.w	r5, [r6], #4
 800239a:	061f      	lsls	r7, r3, #24
 800239c:	600e      	str	r6, [r1, #0]
 800239e:	d514      	bpl.n	80023ca <_printf_i+0x1ae>
 80023a0:	07d9      	lsls	r1, r3, #31
 80023a2:	bf44      	itt	mi
 80023a4:	f043 0320 	orrmi.w	r3, r3, #32
 80023a8:	6023      	strmi	r3, [r4, #0]
 80023aa:	b91d      	cbnz	r5, 80023b4 <_printf_i+0x198>
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	f023 0320 	bic.w	r3, r3, #32
 80023b2:	6023      	str	r3, [r4, #0]
 80023b4:	2310      	movs	r3, #16
 80023b6:	e7af      	b.n	8002318 <_printf_i+0xfc>
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	f043 0320 	orr.w	r3, r3, #32
 80023be:	6023      	str	r3, [r4, #0]
 80023c0:	2378      	movs	r3, #120	; 0x78
 80023c2:	4828      	ldr	r0, [pc, #160]	; (8002464 <_printf_i+0x248>)
 80023c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023c8:	e7e3      	b.n	8002392 <_printf_i+0x176>
 80023ca:	065e      	lsls	r6, r3, #25
 80023cc:	bf48      	it	mi
 80023ce:	b2ad      	uxthmi	r5, r5
 80023d0:	e7e6      	b.n	80023a0 <_printf_i+0x184>
 80023d2:	4616      	mov	r6, r2
 80023d4:	e7bb      	b.n	800234e <_printf_i+0x132>
 80023d6:	680b      	ldr	r3, [r1, #0]
 80023d8:	6826      	ldr	r6, [r4, #0]
 80023da:	1d1d      	adds	r5, r3, #4
 80023dc:	6960      	ldr	r0, [r4, #20]
 80023de:	600d      	str	r5, [r1, #0]
 80023e0:	0635      	lsls	r5, r6, #24
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	d501      	bpl.n	80023ea <_printf_i+0x1ce>
 80023e6:	6018      	str	r0, [r3, #0]
 80023e8:	e002      	b.n	80023f0 <_printf_i+0x1d4>
 80023ea:	0671      	lsls	r1, r6, #25
 80023ec:	d5fb      	bpl.n	80023e6 <_printf_i+0x1ca>
 80023ee:	8018      	strh	r0, [r3, #0]
 80023f0:	2300      	movs	r3, #0
 80023f2:	4616      	mov	r6, r2
 80023f4:	6123      	str	r3, [r4, #16]
 80023f6:	e7ba      	b.n	800236e <_printf_i+0x152>
 80023f8:	680b      	ldr	r3, [r1, #0]
 80023fa:	1d1a      	adds	r2, r3, #4
 80023fc:	600a      	str	r2, [r1, #0]
 80023fe:	681e      	ldr	r6, [r3, #0]
 8002400:	2100      	movs	r1, #0
 8002402:	4630      	mov	r0, r6
 8002404:	6862      	ldr	r2, [r4, #4]
 8002406:	f001 fa5f 	bl	80038c8 <memchr>
 800240a:	b108      	cbz	r0, 8002410 <_printf_i+0x1f4>
 800240c:	1b80      	subs	r0, r0, r6
 800240e:	6060      	str	r0, [r4, #4]
 8002410:	6863      	ldr	r3, [r4, #4]
 8002412:	6123      	str	r3, [r4, #16]
 8002414:	2300      	movs	r3, #0
 8002416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800241a:	e7a8      	b.n	800236e <_printf_i+0x152>
 800241c:	4632      	mov	r2, r6
 800241e:	4649      	mov	r1, r9
 8002420:	4640      	mov	r0, r8
 8002422:	6923      	ldr	r3, [r4, #16]
 8002424:	47d0      	blx	sl
 8002426:	3001      	adds	r0, #1
 8002428:	d0ab      	beq.n	8002382 <_printf_i+0x166>
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	079b      	lsls	r3, r3, #30
 800242e:	d413      	bmi.n	8002458 <_printf_i+0x23c>
 8002430:	68e0      	ldr	r0, [r4, #12]
 8002432:	9b03      	ldr	r3, [sp, #12]
 8002434:	4298      	cmp	r0, r3
 8002436:	bfb8      	it	lt
 8002438:	4618      	movlt	r0, r3
 800243a:	e7a4      	b.n	8002386 <_printf_i+0x16a>
 800243c:	2301      	movs	r3, #1
 800243e:	4632      	mov	r2, r6
 8002440:	4649      	mov	r1, r9
 8002442:	4640      	mov	r0, r8
 8002444:	47d0      	blx	sl
 8002446:	3001      	adds	r0, #1
 8002448:	d09b      	beq.n	8002382 <_printf_i+0x166>
 800244a:	3501      	adds	r5, #1
 800244c:	68e3      	ldr	r3, [r4, #12]
 800244e:	9903      	ldr	r1, [sp, #12]
 8002450:	1a5b      	subs	r3, r3, r1
 8002452:	42ab      	cmp	r3, r5
 8002454:	dcf2      	bgt.n	800243c <_printf_i+0x220>
 8002456:	e7eb      	b.n	8002430 <_printf_i+0x214>
 8002458:	2500      	movs	r5, #0
 800245a:	f104 0619 	add.w	r6, r4, #25
 800245e:	e7f5      	b.n	800244c <_printf_i+0x230>
 8002460:	08004692 	.word	0x08004692
 8002464:	080046a3 	.word	0x080046a3

08002468 <iprintf>:
 8002468:	b40f      	push	{r0, r1, r2, r3}
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <iprintf+0x2c>)
 800246c:	b513      	push	{r0, r1, r4, lr}
 800246e:	681c      	ldr	r4, [r3, #0]
 8002470:	b124      	cbz	r4, 800247c <iprintf+0x14>
 8002472:	69a3      	ldr	r3, [r4, #24]
 8002474:	b913      	cbnz	r3, 800247c <iprintf+0x14>
 8002476:	4620      	mov	r0, r4
 8002478:	f001 f90a 	bl	8003690 <__sinit>
 800247c:	ab05      	add	r3, sp, #20
 800247e:	4620      	mov	r0, r4
 8002480:	9a04      	ldr	r2, [sp, #16]
 8002482:	68a1      	ldr	r1, [r4, #8]
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	f001 fdff 	bl	8004088 <_vfiprintf_r>
 800248a:	b002      	add	sp, #8
 800248c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002490:	b004      	add	sp, #16
 8002492:	4770      	bx	lr
 8002494:	20000000 	.word	0x20000000

08002498 <_puts_r>:
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	460e      	mov	r6, r1
 800249c:	4605      	mov	r5, r0
 800249e:	b118      	cbz	r0, 80024a8 <_puts_r+0x10>
 80024a0:	6983      	ldr	r3, [r0, #24]
 80024a2:	b90b      	cbnz	r3, 80024a8 <_puts_r+0x10>
 80024a4:	f001 f8f4 	bl	8003690 <__sinit>
 80024a8:	69ab      	ldr	r3, [r5, #24]
 80024aa:	68ac      	ldr	r4, [r5, #8]
 80024ac:	b913      	cbnz	r3, 80024b4 <_puts_r+0x1c>
 80024ae:	4628      	mov	r0, r5
 80024b0:	f001 f8ee 	bl	8003690 <__sinit>
 80024b4:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <_puts_r+0xd0>)
 80024b6:	429c      	cmp	r4, r3
 80024b8:	d120      	bne.n	80024fc <_puts_r+0x64>
 80024ba:	686c      	ldr	r4, [r5, #4]
 80024bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024be:	07db      	lsls	r3, r3, #31
 80024c0:	d405      	bmi.n	80024ce <_puts_r+0x36>
 80024c2:	89a3      	ldrh	r3, [r4, #12]
 80024c4:	0598      	lsls	r0, r3, #22
 80024c6:	d402      	bmi.n	80024ce <_puts_r+0x36>
 80024c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024ca:	f001 f996 	bl	80037fa <__retarget_lock_acquire_recursive>
 80024ce:	89a3      	ldrh	r3, [r4, #12]
 80024d0:	0719      	lsls	r1, r3, #28
 80024d2:	d51d      	bpl.n	8002510 <_puts_r+0x78>
 80024d4:	6923      	ldr	r3, [r4, #16]
 80024d6:	b1db      	cbz	r3, 8002510 <_puts_r+0x78>
 80024d8:	3e01      	subs	r6, #1
 80024da:	68a3      	ldr	r3, [r4, #8]
 80024dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80024e0:	3b01      	subs	r3, #1
 80024e2:	60a3      	str	r3, [r4, #8]
 80024e4:	bb39      	cbnz	r1, 8002536 <_puts_r+0x9e>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	da38      	bge.n	800255c <_puts_r+0xc4>
 80024ea:	4622      	mov	r2, r4
 80024ec:	210a      	movs	r1, #10
 80024ee:	4628      	mov	r0, r5
 80024f0:	f000 f858 	bl	80025a4 <__swbuf_r>
 80024f4:	3001      	adds	r0, #1
 80024f6:	d011      	beq.n	800251c <_puts_r+0x84>
 80024f8:	250a      	movs	r5, #10
 80024fa:	e011      	b.n	8002520 <_puts_r+0x88>
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <_puts_r+0xd4>)
 80024fe:	429c      	cmp	r4, r3
 8002500:	d101      	bne.n	8002506 <_puts_r+0x6e>
 8002502:	68ac      	ldr	r4, [r5, #8]
 8002504:	e7da      	b.n	80024bc <_puts_r+0x24>
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <_puts_r+0xd8>)
 8002508:	429c      	cmp	r4, r3
 800250a:	bf08      	it	eq
 800250c:	68ec      	ldreq	r4, [r5, #12]
 800250e:	e7d5      	b.n	80024bc <_puts_r+0x24>
 8002510:	4621      	mov	r1, r4
 8002512:	4628      	mov	r0, r5
 8002514:	f000 f898 	bl	8002648 <__swsetup_r>
 8002518:	2800      	cmp	r0, #0
 800251a:	d0dd      	beq.n	80024d8 <_puts_r+0x40>
 800251c:	f04f 35ff 	mov.w	r5, #4294967295
 8002520:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002522:	07da      	lsls	r2, r3, #31
 8002524:	d405      	bmi.n	8002532 <_puts_r+0x9a>
 8002526:	89a3      	ldrh	r3, [r4, #12]
 8002528:	059b      	lsls	r3, r3, #22
 800252a:	d402      	bmi.n	8002532 <_puts_r+0x9a>
 800252c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800252e:	f001 f965 	bl	80037fc <__retarget_lock_release_recursive>
 8002532:	4628      	mov	r0, r5
 8002534:	bd70      	pop	{r4, r5, r6, pc}
 8002536:	2b00      	cmp	r3, #0
 8002538:	da04      	bge.n	8002544 <_puts_r+0xac>
 800253a:	69a2      	ldr	r2, [r4, #24]
 800253c:	429a      	cmp	r2, r3
 800253e:	dc06      	bgt.n	800254e <_puts_r+0xb6>
 8002540:	290a      	cmp	r1, #10
 8002542:	d004      	beq.n	800254e <_puts_r+0xb6>
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	6022      	str	r2, [r4, #0]
 800254a:	7019      	strb	r1, [r3, #0]
 800254c:	e7c5      	b.n	80024da <_puts_r+0x42>
 800254e:	4622      	mov	r2, r4
 8002550:	4628      	mov	r0, r5
 8002552:	f000 f827 	bl	80025a4 <__swbuf_r>
 8002556:	3001      	adds	r0, #1
 8002558:	d1bf      	bne.n	80024da <_puts_r+0x42>
 800255a:	e7df      	b.n	800251c <_puts_r+0x84>
 800255c:	250a      	movs	r5, #10
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	6022      	str	r2, [r4, #0]
 8002564:	701d      	strb	r5, [r3, #0]
 8002566:	e7db      	b.n	8002520 <_puts_r+0x88>
 8002568:	080047a4 	.word	0x080047a4
 800256c:	080047c4 	.word	0x080047c4
 8002570:	08004784 	.word	0x08004784

08002574 <puts>:
 8002574:	4b02      	ldr	r3, [pc, #8]	; (8002580 <puts+0xc>)
 8002576:	4601      	mov	r1, r0
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	f7ff bf8d 	b.w	8002498 <_puts_r>
 800257e:	bf00      	nop
 8002580:	20000000 	.word	0x20000000

08002584 <_sbrk_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	2300      	movs	r3, #0
 8002588:	4d05      	ldr	r5, [pc, #20]	; (80025a0 <_sbrk_r+0x1c>)
 800258a:	4604      	mov	r4, r0
 800258c:	4608      	mov	r0, r1
 800258e:	602b      	str	r3, [r5, #0]
 8002590:	f001 fffa 	bl	8004588 <_sbrk>
 8002594:	1c43      	adds	r3, r0, #1
 8002596:	d102      	bne.n	800259e <_sbrk_r+0x1a>
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	b103      	cbz	r3, 800259e <_sbrk_r+0x1a>
 800259c:	6023      	str	r3, [r4, #0]
 800259e:	bd38      	pop	{r3, r4, r5, pc}
 80025a0:	20000208 	.word	0x20000208

080025a4 <__swbuf_r>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	460e      	mov	r6, r1
 80025a8:	4614      	mov	r4, r2
 80025aa:	4605      	mov	r5, r0
 80025ac:	b118      	cbz	r0, 80025b6 <__swbuf_r+0x12>
 80025ae:	6983      	ldr	r3, [r0, #24]
 80025b0:	b90b      	cbnz	r3, 80025b6 <__swbuf_r+0x12>
 80025b2:	f001 f86d 	bl	8003690 <__sinit>
 80025b6:	4b21      	ldr	r3, [pc, #132]	; (800263c <__swbuf_r+0x98>)
 80025b8:	429c      	cmp	r4, r3
 80025ba:	d12b      	bne.n	8002614 <__swbuf_r+0x70>
 80025bc:	686c      	ldr	r4, [r5, #4]
 80025be:	69a3      	ldr	r3, [r4, #24]
 80025c0:	60a3      	str	r3, [r4, #8]
 80025c2:	89a3      	ldrh	r3, [r4, #12]
 80025c4:	071a      	lsls	r2, r3, #28
 80025c6:	d52f      	bpl.n	8002628 <__swbuf_r+0x84>
 80025c8:	6923      	ldr	r3, [r4, #16]
 80025ca:	b36b      	cbz	r3, 8002628 <__swbuf_r+0x84>
 80025cc:	6923      	ldr	r3, [r4, #16]
 80025ce:	6820      	ldr	r0, [r4, #0]
 80025d0:	b2f6      	uxtb	r6, r6
 80025d2:	1ac0      	subs	r0, r0, r3
 80025d4:	6963      	ldr	r3, [r4, #20]
 80025d6:	4637      	mov	r7, r6
 80025d8:	4283      	cmp	r3, r0
 80025da:	dc04      	bgt.n	80025e6 <__swbuf_r+0x42>
 80025dc:	4621      	mov	r1, r4
 80025de:	4628      	mov	r0, r5
 80025e0:	f000 ffc2 	bl	8003568 <_fflush_r>
 80025e4:	bb30      	cbnz	r0, 8002634 <__swbuf_r+0x90>
 80025e6:	68a3      	ldr	r3, [r4, #8]
 80025e8:	3001      	adds	r0, #1
 80025ea:	3b01      	subs	r3, #1
 80025ec:	60a3      	str	r3, [r4, #8]
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	6022      	str	r2, [r4, #0]
 80025f4:	701e      	strb	r6, [r3, #0]
 80025f6:	6963      	ldr	r3, [r4, #20]
 80025f8:	4283      	cmp	r3, r0
 80025fa:	d004      	beq.n	8002606 <__swbuf_r+0x62>
 80025fc:	89a3      	ldrh	r3, [r4, #12]
 80025fe:	07db      	lsls	r3, r3, #31
 8002600:	d506      	bpl.n	8002610 <__swbuf_r+0x6c>
 8002602:	2e0a      	cmp	r6, #10
 8002604:	d104      	bne.n	8002610 <__swbuf_r+0x6c>
 8002606:	4621      	mov	r1, r4
 8002608:	4628      	mov	r0, r5
 800260a:	f000 ffad 	bl	8003568 <_fflush_r>
 800260e:	b988      	cbnz	r0, 8002634 <__swbuf_r+0x90>
 8002610:	4638      	mov	r0, r7
 8002612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <__swbuf_r+0x9c>)
 8002616:	429c      	cmp	r4, r3
 8002618:	d101      	bne.n	800261e <__swbuf_r+0x7a>
 800261a:	68ac      	ldr	r4, [r5, #8]
 800261c:	e7cf      	b.n	80025be <__swbuf_r+0x1a>
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <__swbuf_r+0xa0>)
 8002620:	429c      	cmp	r4, r3
 8002622:	bf08      	it	eq
 8002624:	68ec      	ldreq	r4, [r5, #12]
 8002626:	e7ca      	b.n	80025be <__swbuf_r+0x1a>
 8002628:	4621      	mov	r1, r4
 800262a:	4628      	mov	r0, r5
 800262c:	f000 f80c 	bl	8002648 <__swsetup_r>
 8002630:	2800      	cmp	r0, #0
 8002632:	d0cb      	beq.n	80025cc <__swbuf_r+0x28>
 8002634:	f04f 37ff 	mov.w	r7, #4294967295
 8002638:	e7ea      	b.n	8002610 <__swbuf_r+0x6c>
 800263a:	bf00      	nop
 800263c:	080047a4 	.word	0x080047a4
 8002640:	080047c4 	.word	0x080047c4
 8002644:	08004784 	.word	0x08004784

08002648 <__swsetup_r>:
 8002648:	4b32      	ldr	r3, [pc, #200]	; (8002714 <__swsetup_r+0xcc>)
 800264a:	b570      	push	{r4, r5, r6, lr}
 800264c:	681d      	ldr	r5, [r3, #0]
 800264e:	4606      	mov	r6, r0
 8002650:	460c      	mov	r4, r1
 8002652:	b125      	cbz	r5, 800265e <__swsetup_r+0x16>
 8002654:	69ab      	ldr	r3, [r5, #24]
 8002656:	b913      	cbnz	r3, 800265e <__swsetup_r+0x16>
 8002658:	4628      	mov	r0, r5
 800265a:	f001 f819 	bl	8003690 <__sinit>
 800265e:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <__swsetup_r+0xd0>)
 8002660:	429c      	cmp	r4, r3
 8002662:	d10f      	bne.n	8002684 <__swsetup_r+0x3c>
 8002664:	686c      	ldr	r4, [r5, #4]
 8002666:	89a3      	ldrh	r3, [r4, #12]
 8002668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800266c:	0719      	lsls	r1, r3, #28
 800266e:	d42c      	bmi.n	80026ca <__swsetup_r+0x82>
 8002670:	06dd      	lsls	r5, r3, #27
 8002672:	d411      	bmi.n	8002698 <__swsetup_r+0x50>
 8002674:	2309      	movs	r3, #9
 8002676:	6033      	str	r3, [r6, #0]
 8002678:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	81a3      	strh	r3, [r4, #12]
 8002682:	e03e      	b.n	8002702 <__swsetup_r+0xba>
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <__swsetup_r+0xd4>)
 8002686:	429c      	cmp	r4, r3
 8002688:	d101      	bne.n	800268e <__swsetup_r+0x46>
 800268a:	68ac      	ldr	r4, [r5, #8]
 800268c:	e7eb      	b.n	8002666 <__swsetup_r+0x1e>
 800268e:	4b24      	ldr	r3, [pc, #144]	; (8002720 <__swsetup_r+0xd8>)
 8002690:	429c      	cmp	r4, r3
 8002692:	bf08      	it	eq
 8002694:	68ec      	ldreq	r4, [r5, #12]
 8002696:	e7e6      	b.n	8002666 <__swsetup_r+0x1e>
 8002698:	0758      	lsls	r0, r3, #29
 800269a:	d512      	bpl.n	80026c2 <__swsetup_r+0x7a>
 800269c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800269e:	b141      	cbz	r1, 80026b2 <__swsetup_r+0x6a>
 80026a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026a4:	4299      	cmp	r1, r3
 80026a6:	d002      	beq.n	80026ae <__swsetup_r+0x66>
 80026a8:	4630      	mov	r0, r6
 80026aa:	f7ff f9d7 	bl	8001a5c <_free_r>
 80026ae:	2300      	movs	r3, #0
 80026b0:	6363      	str	r3, [r4, #52]	; 0x34
 80026b2:	89a3      	ldrh	r3, [r4, #12]
 80026b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80026b8:	81a3      	strh	r3, [r4, #12]
 80026ba:	2300      	movs	r3, #0
 80026bc:	6063      	str	r3, [r4, #4]
 80026be:	6923      	ldr	r3, [r4, #16]
 80026c0:	6023      	str	r3, [r4, #0]
 80026c2:	89a3      	ldrh	r3, [r4, #12]
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	81a3      	strh	r3, [r4, #12]
 80026ca:	6923      	ldr	r3, [r4, #16]
 80026cc:	b94b      	cbnz	r3, 80026e2 <__swsetup_r+0x9a>
 80026ce:	89a3      	ldrh	r3, [r4, #12]
 80026d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80026d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d8:	d003      	beq.n	80026e2 <__swsetup_r+0x9a>
 80026da:	4621      	mov	r1, r4
 80026dc:	4630      	mov	r0, r6
 80026de:	f001 f8b3 	bl	8003848 <__smakebuf_r>
 80026e2:	89a0      	ldrh	r0, [r4, #12]
 80026e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026e8:	f010 0301 	ands.w	r3, r0, #1
 80026ec:	d00a      	beq.n	8002704 <__swsetup_r+0xbc>
 80026ee:	2300      	movs	r3, #0
 80026f0:	60a3      	str	r3, [r4, #8]
 80026f2:	6963      	ldr	r3, [r4, #20]
 80026f4:	425b      	negs	r3, r3
 80026f6:	61a3      	str	r3, [r4, #24]
 80026f8:	6923      	ldr	r3, [r4, #16]
 80026fa:	b943      	cbnz	r3, 800270e <__swsetup_r+0xc6>
 80026fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002700:	d1ba      	bne.n	8002678 <__swsetup_r+0x30>
 8002702:	bd70      	pop	{r4, r5, r6, pc}
 8002704:	0781      	lsls	r1, r0, #30
 8002706:	bf58      	it	pl
 8002708:	6963      	ldrpl	r3, [r4, #20]
 800270a:	60a3      	str	r3, [r4, #8]
 800270c:	e7f4      	b.n	80026f8 <__swsetup_r+0xb0>
 800270e:	2000      	movs	r0, #0
 8002710:	e7f7      	b.n	8002702 <__swsetup_r+0xba>
 8002712:	bf00      	nop
 8002714:	20000000 	.word	0x20000000
 8002718:	080047a4 	.word	0x080047a4
 800271c:	080047c4 	.word	0x080047c4
 8002720:	08004784 	.word	0x08004784

08002724 <__assert_func>:
 8002724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002726:	4614      	mov	r4, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <__assert_func+0x2c>)
 800272c:	4605      	mov	r5, r0
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68d8      	ldr	r0, [r3, #12]
 8002732:	b14c      	cbz	r4, 8002748 <__assert_func+0x24>
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <__assert_func+0x30>)
 8002736:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800273a:	9100      	str	r1, [sp, #0]
 800273c:	462b      	mov	r3, r5
 800273e:	4906      	ldr	r1, [pc, #24]	; (8002758 <__assert_func+0x34>)
 8002740:	f001 f824 	bl	800378c <fiprintf>
 8002744:	f001 fe26 	bl	8004394 <abort>
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <__assert_func+0x38>)
 800274a:	461c      	mov	r4, r3
 800274c:	e7f3      	b.n	8002736 <__assert_func+0x12>
 800274e:	bf00      	nop
 8002750:	20000000 	.word	0x20000000
 8002754:	080046b4 	.word	0x080046b4
 8002758:	080046c1 	.word	0x080046c1
 800275c:	080046ef 	.word	0x080046ef

08002760 <quorem>:
 8002760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002764:	6903      	ldr	r3, [r0, #16]
 8002766:	690c      	ldr	r4, [r1, #16]
 8002768:	4607      	mov	r7, r0
 800276a:	42a3      	cmp	r3, r4
 800276c:	f2c0 8083 	blt.w	8002876 <quorem+0x116>
 8002770:	3c01      	subs	r4, #1
 8002772:	f100 0514 	add.w	r5, r0, #20
 8002776:	f101 0814 	add.w	r8, r1, #20
 800277a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002788:	3301      	adds	r3, #1
 800278a:	429a      	cmp	r2, r3
 800278c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002790:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002798:	d332      	bcc.n	8002800 <quorem+0xa0>
 800279a:	f04f 0e00 	mov.w	lr, #0
 800279e:	4640      	mov	r0, r8
 80027a0:	46ac      	mov	ip, r5
 80027a2:	46f2      	mov	sl, lr
 80027a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80027a8:	b293      	uxth	r3, r2
 80027aa:	fb06 e303 	mla	r3, r6, r3, lr
 80027ae:	0c12      	lsrs	r2, r2, #16
 80027b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80027b4:	fb06 e202 	mla	r2, r6, r2, lr
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	ebaa 0303 	sub.w	r3, sl, r3
 80027be:	f8dc a000 	ldr.w	sl, [ip]
 80027c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80027c6:	fa1f fa8a 	uxth.w	sl, sl
 80027ca:	4453      	add	r3, sl
 80027cc:	fa1f fa82 	uxth.w	sl, r2
 80027d0:	f8dc 2000 	ldr.w	r2, [ip]
 80027d4:	4581      	cmp	r9, r0
 80027d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80027da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80027de:	b29b      	uxth	r3, r3
 80027e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80027e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80027e8:	f84c 3b04 	str.w	r3, [ip], #4
 80027ec:	d2da      	bcs.n	80027a4 <quorem+0x44>
 80027ee:	f855 300b 	ldr.w	r3, [r5, fp]
 80027f2:	b92b      	cbnz	r3, 8002800 <quorem+0xa0>
 80027f4:	9b01      	ldr	r3, [sp, #4]
 80027f6:	3b04      	subs	r3, #4
 80027f8:	429d      	cmp	r5, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	d32f      	bcc.n	800285e <quorem+0xfe>
 80027fe:	613c      	str	r4, [r7, #16]
 8002800:	4638      	mov	r0, r7
 8002802:	f001 fb03 	bl	8003e0c <__mcmp>
 8002806:	2800      	cmp	r0, #0
 8002808:	db25      	blt.n	8002856 <quorem+0xf6>
 800280a:	4628      	mov	r0, r5
 800280c:	f04f 0c00 	mov.w	ip, #0
 8002810:	3601      	adds	r6, #1
 8002812:	f858 1b04 	ldr.w	r1, [r8], #4
 8002816:	f8d0 e000 	ldr.w	lr, [r0]
 800281a:	b28b      	uxth	r3, r1
 800281c:	ebac 0303 	sub.w	r3, ip, r3
 8002820:	fa1f f28e 	uxth.w	r2, lr
 8002824:	4413      	add	r3, r2
 8002826:	0c0a      	lsrs	r2, r1, #16
 8002828:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800282c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002830:	b29b      	uxth	r3, r3
 8002832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002836:	45c1      	cmp	r9, r8
 8002838:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800283c:	f840 3b04 	str.w	r3, [r0], #4
 8002840:	d2e7      	bcs.n	8002812 <quorem+0xb2>
 8002842:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800284a:	b922      	cbnz	r2, 8002856 <quorem+0xf6>
 800284c:	3b04      	subs	r3, #4
 800284e:	429d      	cmp	r5, r3
 8002850:	461a      	mov	r2, r3
 8002852:	d30a      	bcc.n	800286a <quorem+0x10a>
 8002854:	613c      	str	r4, [r7, #16]
 8002856:	4630      	mov	r0, r6
 8002858:	b003      	add	sp, #12
 800285a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	3b04      	subs	r3, #4
 8002862:	2a00      	cmp	r2, #0
 8002864:	d1cb      	bne.n	80027fe <quorem+0x9e>
 8002866:	3c01      	subs	r4, #1
 8002868:	e7c6      	b.n	80027f8 <quorem+0x98>
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	3b04      	subs	r3, #4
 800286e:	2a00      	cmp	r2, #0
 8002870:	d1f0      	bne.n	8002854 <quorem+0xf4>
 8002872:	3c01      	subs	r4, #1
 8002874:	e7eb      	b.n	800284e <quorem+0xee>
 8002876:	2000      	movs	r0, #0
 8002878:	e7ee      	b.n	8002858 <quorem+0xf8>
 800287a:	0000      	movs	r0, r0
 800287c:	0000      	movs	r0, r0
	...

08002880 <_dtoa_r>:
 8002880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002884:	4616      	mov	r6, r2
 8002886:	461f      	mov	r7, r3
 8002888:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800288a:	b099      	sub	sp, #100	; 0x64
 800288c:	4605      	mov	r5, r0
 800288e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002892:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8002896:	b974      	cbnz	r4, 80028b6 <_dtoa_r+0x36>
 8002898:	2010      	movs	r0, #16
 800289a:	f7ff f8cf 	bl	8001a3c <malloc>
 800289e:	4602      	mov	r2, r0
 80028a0:	6268      	str	r0, [r5, #36]	; 0x24
 80028a2:	b920      	cbnz	r0, 80028ae <_dtoa_r+0x2e>
 80028a4:	21ea      	movs	r1, #234	; 0xea
 80028a6:	4bae      	ldr	r3, [pc, #696]	; (8002b60 <_dtoa_r+0x2e0>)
 80028a8:	48ae      	ldr	r0, [pc, #696]	; (8002b64 <_dtoa_r+0x2e4>)
 80028aa:	f7ff ff3b 	bl	8002724 <__assert_func>
 80028ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80028b2:	6004      	str	r4, [r0, #0]
 80028b4:	60c4      	str	r4, [r0, #12]
 80028b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80028b8:	6819      	ldr	r1, [r3, #0]
 80028ba:	b151      	cbz	r1, 80028d2 <_dtoa_r+0x52>
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	2301      	movs	r3, #1
 80028c0:	4093      	lsls	r3, r2
 80028c2:	604a      	str	r2, [r1, #4]
 80028c4:	608b      	str	r3, [r1, #8]
 80028c6:	4628      	mov	r0, r5
 80028c8:	f001 f866 	bl	8003998 <_Bfree>
 80028cc:	2200      	movs	r2, #0
 80028ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	1e3b      	subs	r3, r7, #0
 80028d4:	bfaf      	iteee	ge
 80028d6:	2300      	movge	r3, #0
 80028d8:	2201      	movlt	r2, #1
 80028da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80028de:	9305      	strlt	r3, [sp, #20]
 80028e0:	bfa8      	it	ge
 80028e2:	f8c8 3000 	strge.w	r3, [r8]
 80028e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80028ea:	4b9f      	ldr	r3, [pc, #636]	; (8002b68 <_dtoa_r+0x2e8>)
 80028ec:	bfb8      	it	lt
 80028ee:	f8c8 2000 	strlt.w	r2, [r8]
 80028f2:	ea33 0309 	bics.w	r3, r3, r9
 80028f6:	d119      	bne.n	800292c <_dtoa_r+0xac>
 80028f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80028fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002904:	4333      	orrs	r3, r6
 8002906:	f000 8580 	beq.w	800340a <_dtoa_r+0xb8a>
 800290a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800290c:	b953      	cbnz	r3, 8002924 <_dtoa_r+0xa4>
 800290e:	4b97      	ldr	r3, [pc, #604]	; (8002b6c <_dtoa_r+0x2ec>)
 8002910:	e022      	b.n	8002958 <_dtoa_r+0xd8>
 8002912:	4b97      	ldr	r3, [pc, #604]	; (8002b70 <_dtoa_r+0x2f0>)
 8002914:	9308      	str	r3, [sp, #32]
 8002916:	3308      	adds	r3, #8
 8002918:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	9808      	ldr	r0, [sp, #32]
 800291e:	b019      	add	sp, #100	; 0x64
 8002920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002924:	4b91      	ldr	r3, [pc, #580]	; (8002b6c <_dtoa_r+0x2ec>)
 8002926:	9308      	str	r3, [sp, #32]
 8002928:	3303      	adds	r3, #3
 800292a:	e7f5      	b.n	8002918 <_dtoa_r+0x98>
 800292c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002930:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8002934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002938:	2200      	movs	r2, #0
 800293a:	2300      	movs	r3, #0
 800293c:	f7fe f834 	bl	80009a8 <__aeabi_dcmpeq>
 8002940:	4680      	mov	r8, r0
 8002942:	b158      	cbz	r0, 800295c <_dtoa_r+0xdc>
 8002944:	2301      	movs	r3, #1
 8002946:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8559 	beq.w	8003404 <_dtoa_r+0xb84>
 8002952:	4888      	ldr	r0, [pc, #544]	; (8002b74 <_dtoa_r+0x2f4>)
 8002954:	6018      	str	r0, [r3, #0]
 8002956:	1e43      	subs	r3, r0, #1
 8002958:	9308      	str	r3, [sp, #32]
 800295a:	e7df      	b.n	800291c <_dtoa_r+0x9c>
 800295c:	ab16      	add	r3, sp, #88	; 0x58
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	ab17      	add	r3, sp, #92	; 0x5c
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	4628      	mov	r0, r5
 8002966:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800296a:	f001 fafb 	bl	8003f64 <__d2b>
 800296e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8002972:	4682      	mov	sl, r0
 8002974:	2c00      	cmp	r4, #0
 8002976:	d07e      	beq.n	8002a76 <_dtoa_r+0x1f6>
 8002978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800297c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800297e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002986:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800298a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800298e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002992:	2200      	movs	r2, #0
 8002994:	4b78      	ldr	r3, [pc, #480]	; (8002b78 <_dtoa_r+0x2f8>)
 8002996:	f7fd fbe7 	bl	8000168 <__aeabi_dsub>
 800299a:	a36b      	add	r3, pc, #428	; (adr r3, 8002b48 <_dtoa_r+0x2c8>)
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	f7fd fd9a 	bl	80004d8 <__aeabi_dmul>
 80029a4:	a36a      	add	r3, pc, #424	; (adr r3, 8002b50 <_dtoa_r+0x2d0>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd fbdf 	bl	800016c <__adddf3>
 80029ae:	4606      	mov	r6, r0
 80029b0:	4620      	mov	r0, r4
 80029b2:	460f      	mov	r7, r1
 80029b4:	f7fd fd26 	bl	8000404 <__aeabi_i2d>
 80029b8:	a367      	add	r3, pc, #412	; (adr r3, 8002b58 <_dtoa_r+0x2d8>)
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	f7fd fd8b 	bl	80004d8 <__aeabi_dmul>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4630      	mov	r0, r6
 80029c8:	4639      	mov	r1, r7
 80029ca:	f7fd fbcf 	bl	800016c <__adddf3>
 80029ce:	4606      	mov	r6, r0
 80029d0:	460f      	mov	r7, r1
 80029d2:	f7fe f831 	bl	8000a38 <__aeabi_d2iz>
 80029d6:	2200      	movs	r2, #0
 80029d8:	4681      	mov	r9, r0
 80029da:	2300      	movs	r3, #0
 80029dc:	4630      	mov	r0, r6
 80029de:	4639      	mov	r1, r7
 80029e0:	f7fd ffec 	bl	80009bc <__aeabi_dcmplt>
 80029e4:	b148      	cbz	r0, 80029fa <_dtoa_r+0x17a>
 80029e6:	4648      	mov	r0, r9
 80029e8:	f7fd fd0c 	bl	8000404 <__aeabi_i2d>
 80029ec:	4632      	mov	r2, r6
 80029ee:	463b      	mov	r3, r7
 80029f0:	f7fd ffda 	bl	80009a8 <__aeabi_dcmpeq>
 80029f4:	b908      	cbnz	r0, 80029fa <_dtoa_r+0x17a>
 80029f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80029fa:	f1b9 0f16 	cmp.w	r9, #22
 80029fe:	d857      	bhi.n	8002ab0 <_dtoa_r+0x230>
 8002a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002a04:	4b5d      	ldr	r3, [pc, #372]	; (8002b7c <_dtoa_r+0x2fc>)
 8002a06:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	f7fd ffd5 	bl	80009bc <__aeabi_dcmplt>
 8002a12:	2800      	cmp	r0, #0
 8002a14:	d04e      	beq.n	8002ab4 <_dtoa_r+0x234>
 8002a16:	2300      	movs	r3, #0
 8002a18:	f109 39ff 	add.w	r9, r9, #4294967295
 8002a1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002a1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002a20:	1b1c      	subs	r4, r3, r4
 8002a22:	1e63      	subs	r3, r4, #1
 8002a24:	9309      	str	r3, [sp, #36]	; 0x24
 8002a26:	bf49      	itett	mi
 8002a28:	f1c4 0301 	rsbmi	r3, r4, #1
 8002a2c:	2300      	movpl	r3, #0
 8002a2e:	9306      	strmi	r3, [sp, #24]
 8002a30:	2300      	movmi	r3, #0
 8002a32:	bf54      	ite	pl
 8002a34:	9306      	strpl	r3, [sp, #24]
 8002a36:	9309      	strmi	r3, [sp, #36]	; 0x24
 8002a38:	f1b9 0f00 	cmp.w	r9, #0
 8002a3c:	db3c      	blt.n	8002ab8 <_dtoa_r+0x238>
 8002a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a40:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8002a44:	444b      	add	r3, r9
 8002a46:	9309      	str	r3, [sp, #36]	; 0x24
 8002a48:	2300      	movs	r3, #0
 8002a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8002a4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002a4e:	2b09      	cmp	r3, #9
 8002a50:	d86c      	bhi.n	8002b2c <_dtoa_r+0x2ac>
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	bfc4      	itt	gt
 8002a56:	3b04      	subgt	r3, #4
 8002a58:	9322      	strgt	r3, [sp, #136]	; 0x88
 8002a5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002a5c:	bfc8      	it	gt
 8002a5e:	2400      	movgt	r4, #0
 8002a60:	f1a3 0302 	sub.w	r3, r3, #2
 8002a64:	bfd8      	it	le
 8002a66:	2401      	movle	r4, #1
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	f200 808b 	bhi.w	8002b84 <_dtoa_r+0x304>
 8002a6e:	e8df f003 	tbb	[pc, r3]
 8002a72:	4f2d      	.short	0x4f2d
 8002a74:	5b4d      	.short	0x5b4d
 8002a76:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8002a7a:	441c      	add	r4, r3
 8002a7c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	bfc3      	ittte	gt
 8002a84:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002a88:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8002a8c:	fa09 f303 	lslgt.w	r3, r9, r3
 8002a90:	f1c3 0320 	rsble	r3, r3, #32
 8002a94:	bfc6      	itte	gt
 8002a96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002a9a:	4318      	orrgt	r0, r3
 8002a9c:	fa06 f003 	lslle.w	r0, r6, r3
 8002aa0:	f7fd fca0 	bl	80003e4 <__aeabi_ui2d>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002aaa:	3c01      	subs	r4, #1
 8002aac:	9313      	str	r3, [sp, #76]	; 0x4c
 8002aae:	e770      	b.n	8002992 <_dtoa_r+0x112>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e7b3      	b.n	8002a1c <_dtoa_r+0x19c>
 8002ab4:	900f      	str	r0, [sp, #60]	; 0x3c
 8002ab6:	e7b2      	b.n	8002a1e <_dtoa_r+0x19e>
 8002ab8:	9b06      	ldr	r3, [sp, #24]
 8002aba:	eba3 0309 	sub.w	r3, r3, r9
 8002abe:	9306      	str	r3, [sp, #24]
 8002ac0:	f1c9 0300 	rsb	r3, r9, #0
 8002ac4:	930a      	str	r3, [sp, #40]	; 0x28
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	930e      	str	r3, [sp, #56]	; 0x38
 8002aca:	e7bf      	b.n	8002a4c <_dtoa_r+0x1cc>
 8002acc:	2300      	movs	r3, #0
 8002ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ad0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	dc59      	bgt.n	8002b8a <_dtoa_r+0x30a>
 8002ad6:	f04f 0b01 	mov.w	fp, #1
 8002ada:	465b      	mov	r3, fp
 8002adc:	f8cd b008 	str.w	fp, [sp, #8]
 8002ae0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002ae8:	6042      	str	r2, [r0, #4]
 8002aea:	2204      	movs	r2, #4
 8002aec:	f102 0614 	add.w	r6, r2, #20
 8002af0:	429e      	cmp	r6, r3
 8002af2:	6841      	ldr	r1, [r0, #4]
 8002af4:	d94f      	bls.n	8002b96 <_dtoa_r+0x316>
 8002af6:	4628      	mov	r0, r5
 8002af8:	f000 ff0e 	bl	8003918 <_Balloc>
 8002afc:	9008      	str	r0, [sp, #32]
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d14d      	bne.n	8002b9e <_dtoa_r+0x31e>
 8002b02:	4602      	mov	r2, r0
 8002b04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002b08:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <_dtoa_r+0x300>)
 8002b0a:	e6cd      	b.n	80028a8 <_dtoa_r+0x28>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e7de      	b.n	8002ace <_dtoa_r+0x24e>
 8002b10:	2300      	movs	r3, #0
 8002b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002b16:	eb09 0b03 	add.w	fp, r9, r3
 8002b1a:	f10b 0301 	add.w	r3, fp, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	9302      	str	r3, [sp, #8]
 8002b22:	bfb8      	it	lt
 8002b24:	2301      	movlt	r3, #1
 8002b26:	e7dd      	b.n	8002ae4 <_dtoa_r+0x264>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e7f2      	b.n	8002b12 <_dtoa_r+0x292>
 8002b2c:	2401      	movs	r4, #1
 8002b2e:	2300      	movs	r3, #0
 8002b30:	940b      	str	r4, [sp, #44]	; 0x2c
 8002b32:	9322      	str	r3, [sp, #136]	; 0x88
 8002b34:	f04f 3bff 	mov.w	fp, #4294967295
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2312      	movs	r3, #18
 8002b3c:	f8cd b008 	str.w	fp, [sp, #8]
 8002b40:	9223      	str	r2, [sp, #140]	; 0x8c
 8002b42:	e7cf      	b.n	8002ae4 <_dtoa_r+0x264>
 8002b44:	f3af 8000 	nop.w
 8002b48:	636f4361 	.word	0x636f4361
 8002b4c:	3fd287a7 	.word	0x3fd287a7
 8002b50:	8b60c8b3 	.word	0x8b60c8b3
 8002b54:	3fc68a28 	.word	0x3fc68a28
 8002b58:	509f79fb 	.word	0x509f79fb
 8002b5c:	3fd34413 	.word	0x3fd34413
 8002b60:	080046fd 	.word	0x080046fd
 8002b64:	08004714 	.word	0x08004714
 8002b68:	7ff00000 	.word	0x7ff00000
 8002b6c:	080046f9 	.word	0x080046f9
 8002b70:	080046f0 	.word	0x080046f0
 8002b74:	08004691 	.word	0x08004691
 8002b78:	3ff80000 	.word	0x3ff80000
 8002b7c:	08004870 	.word	0x08004870
 8002b80:	08004773 	.word	0x08004773
 8002b84:	2301      	movs	r3, #1
 8002b86:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b88:	e7d4      	b.n	8002b34 <_dtoa_r+0x2b4>
 8002b8a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8002b8e:	465b      	mov	r3, fp
 8002b90:	f8cd b008 	str.w	fp, [sp, #8]
 8002b94:	e7a6      	b.n	8002ae4 <_dtoa_r+0x264>
 8002b96:	3101      	adds	r1, #1
 8002b98:	6041      	str	r1, [r0, #4]
 8002b9a:	0052      	lsls	r2, r2, #1
 8002b9c:	e7a6      	b.n	8002aec <_dtoa_r+0x26c>
 8002b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002ba0:	9a08      	ldr	r2, [sp, #32]
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	9b02      	ldr	r3, [sp, #8]
 8002ba6:	2b0e      	cmp	r3, #14
 8002ba8:	f200 80a8 	bhi.w	8002cfc <_dtoa_r+0x47c>
 8002bac:	2c00      	cmp	r4, #0
 8002bae:	f000 80a5 	beq.w	8002cfc <_dtoa_r+0x47c>
 8002bb2:	f1b9 0f00 	cmp.w	r9, #0
 8002bb6:	dd34      	ble.n	8002c22 <_dtoa_r+0x3a2>
 8002bb8:	4a9a      	ldr	r2, [pc, #616]	; (8002e24 <_dtoa_r+0x5a4>)
 8002bba:	f009 030f 	and.w	r3, r9, #15
 8002bbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002bc2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8002bc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002bca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002bce:	ea4f 1429 	mov.w	r4, r9, asr #4
 8002bd2:	d016      	beq.n	8002c02 <_dtoa_r+0x382>
 8002bd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002bd8:	4b93      	ldr	r3, [pc, #588]	; (8002e28 <_dtoa_r+0x5a8>)
 8002bda:	2703      	movs	r7, #3
 8002bdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002be0:	f7fd fda4 	bl	800072c <__aeabi_ddiv>
 8002be4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002be8:	f004 040f 	and.w	r4, r4, #15
 8002bec:	4e8e      	ldr	r6, [pc, #568]	; (8002e28 <_dtoa_r+0x5a8>)
 8002bee:	b954      	cbnz	r4, 8002c06 <_dtoa_r+0x386>
 8002bf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002bf8:	f7fd fd98 	bl	800072c <__aeabi_ddiv>
 8002bfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c00:	e029      	b.n	8002c56 <_dtoa_r+0x3d6>
 8002c02:	2702      	movs	r7, #2
 8002c04:	e7f2      	b.n	8002bec <_dtoa_r+0x36c>
 8002c06:	07e1      	lsls	r1, r4, #31
 8002c08:	d508      	bpl.n	8002c1c <_dtoa_r+0x39c>
 8002c0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002c0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002c12:	f7fd fc61 	bl	80004d8 <__aeabi_dmul>
 8002c16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002c1a:	3701      	adds	r7, #1
 8002c1c:	1064      	asrs	r4, r4, #1
 8002c1e:	3608      	adds	r6, #8
 8002c20:	e7e5      	b.n	8002bee <_dtoa_r+0x36e>
 8002c22:	f000 80a5 	beq.w	8002d70 <_dtoa_r+0x4f0>
 8002c26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002c2a:	f1c9 0400 	rsb	r4, r9, #0
 8002c2e:	4b7d      	ldr	r3, [pc, #500]	; (8002e24 <_dtoa_r+0x5a4>)
 8002c30:	f004 020f 	and.w	r2, r4, #15
 8002c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	f7fd fc4c 	bl	80004d8 <__aeabi_dmul>
 8002c40:	2702      	movs	r7, #2
 8002c42:	2300      	movs	r3, #0
 8002c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c48:	4e77      	ldr	r6, [pc, #476]	; (8002e28 <_dtoa_r+0x5a8>)
 8002c4a:	1124      	asrs	r4, r4, #4
 8002c4c:	2c00      	cmp	r4, #0
 8002c4e:	f040 8084 	bne.w	8002d5a <_dtoa_r+0x4da>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1d2      	bne.n	8002bfc <_dtoa_r+0x37c>
 8002c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 808b 	beq.w	8002d74 <_dtoa_r+0x4f4>
 8002c5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002c62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002c66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <_dtoa_r+0x5ac>)
 8002c6e:	f7fd fea5 	bl	80009bc <__aeabi_dcmplt>
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d07e      	beq.n	8002d74 <_dtoa_r+0x4f4>
 8002c76:	9b02      	ldr	r3, [sp, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d07b      	beq.n	8002d74 <_dtoa_r+0x4f4>
 8002c7c:	f1bb 0f00 	cmp.w	fp, #0
 8002c80:	dd38      	ble.n	8002cf4 <_dtoa_r+0x474>
 8002c82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002c86:	2200      	movs	r2, #0
 8002c88:	4b69      	ldr	r3, [pc, #420]	; (8002e30 <_dtoa_r+0x5b0>)
 8002c8a:	f7fd fc25 	bl	80004d8 <__aeabi_dmul>
 8002c8e:	465c      	mov	r4, fp
 8002c90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c94:	f109 38ff 	add.w	r8, r9, #4294967295
 8002c98:	3701      	adds	r7, #1
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	f7fd fbb2 	bl	8000404 <__aeabi_i2d>
 8002ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ca4:	f7fd fc18 	bl	80004d8 <__aeabi_dmul>
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4b62      	ldr	r3, [pc, #392]	; (8002e34 <_dtoa_r+0x5b4>)
 8002cac:	f7fd fa5e 	bl	800016c <__adddf3>
 8002cb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8002cb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002cb8:	9611      	str	r6, [sp, #68]	; 0x44
 8002cba:	2c00      	cmp	r4, #0
 8002cbc:	d15d      	bne.n	8002d7a <_dtoa_r+0x4fa>
 8002cbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4b5c      	ldr	r3, [pc, #368]	; (8002e38 <_dtoa_r+0x5b8>)
 8002cc6:	f7fd fa4f 	bl	8000168 <__aeabi_dsub>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002cd2:	4633      	mov	r3, r6
 8002cd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002cd6:	f7fd fe8f 	bl	80009f8 <__aeabi_dcmpgt>
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	f040 829e 	bne.w	800321c <_dtoa_r+0x99c>
 8002ce0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002ce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002ce6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8002cea:	f7fd fe67 	bl	80009bc <__aeabi_dcmplt>
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	f040 8292 	bne.w	8003218 <_dtoa_r+0x998>
 8002cf4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8002cf8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002cfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f2c0 8153 	blt.w	8002faa <_dtoa_r+0x72a>
 8002d04:	f1b9 0f0e 	cmp.w	r9, #14
 8002d08:	f300 814f 	bgt.w	8002faa <_dtoa_r+0x72a>
 8002d0c:	4b45      	ldr	r3, [pc, #276]	; (8002e24 <_dtoa_r+0x5a4>)
 8002d0e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8002d12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8002d1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f280 80db 	bge.w	8002ed8 <_dtoa_r+0x658>
 8002d22:	9b02      	ldr	r3, [sp, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f300 80d7 	bgt.w	8002ed8 <_dtoa_r+0x658>
 8002d2a:	f040 8274 	bne.w	8003216 <_dtoa_r+0x996>
 8002d2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d32:	2200      	movs	r2, #0
 8002d34:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <_dtoa_r+0x5b8>)
 8002d36:	f7fd fbcf 	bl	80004d8 <__aeabi_dmul>
 8002d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002d3e:	f7fd fe51 	bl	80009e4 <__aeabi_dcmpge>
 8002d42:	9c02      	ldr	r4, [sp, #8]
 8002d44:	4626      	mov	r6, r4
 8002d46:	2800      	cmp	r0, #0
 8002d48:	f040 824a 	bne.w	80031e0 <_dtoa_r+0x960>
 8002d4c:	2331      	movs	r3, #49	; 0x31
 8002d4e:	9f08      	ldr	r7, [sp, #32]
 8002d50:	f109 0901 	add.w	r9, r9, #1
 8002d54:	f807 3b01 	strb.w	r3, [r7], #1
 8002d58:	e246      	b.n	80031e8 <_dtoa_r+0x968>
 8002d5a:	07e2      	lsls	r2, r4, #31
 8002d5c:	d505      	bpl.n	8002d6a <_dtoa_r+0x4ea>
 8002d5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002d62:	f7fd fbb9 	bl	80004d8 <__aeabi_dmul>
 8002d66:	2301      	movs	r3, #1
 8002d68:	3701      	adds	r7, #1
 8002d6a:	1064      	asrs	r4, r4, #1
 8002d6c:	3608      	adds	r6, #8
 8002d6e:	e76d      	b.n	8002c4c <_dtoa_r+0x3cc>
 8002d70:	2702      	movs	r7, #2
 8002d72:	e770      	b.n	8002c56 <_dtoa_r+0x3d6>
 8002d74:	46c8      	mov	r8, r9
 8002d76:	9c02      	ldr	r4, [sp, #8]
 8002d78:	e78f      	b.n	8002c9a <_dtoa_r+0x41a>
 8002d7a:	9908      	ldr	r1, [sp, #32]
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <_dtoa_r+0x5a4>)
 8002d7e:	4421      	add	r1, r4
 8002d80:	9112      	str	r1, [sp, #72]	; 0x48
 8002d82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002d88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8002d8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002d90:	2900      	cmp	r1, #0
 8002d92:	d055      	beq.n	8002e40 <_dtoa_r+0x5c0>
 8002d94:	2000      	movs	r0, #0
 8002d96:	4929      	ldr	r1, [pc, #164]	; (8002e3c <_dtoa_r+0x5bc>)
 8002d98:	f7fd fcc8 	bl	800072c <__aeabi_ddiv>
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	4632      	mov	r2, r6
 8002da0:	f7fd f9e2 	bl	8000168 <__aeabi_dsub>
 8002da4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002da8:	9f08      	ldr	r7, [sp, #32]
 8002daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002dae:	f7fd fe43 	bl	8000a38 <__aeabi_d2iz>
 8002db2:	4604      	mov	r4, r0
 8002db4:	f7fd fb26 	bl	8000404 <__aeabi_i2d>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002dc0:	f7fd f9d2 	bl	8000168 <__aeabi_dsub>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	3430      	adds	r4, #48	; 0x30
 8002dca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002dce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002dd2:	f807 4b01 	strb.w	r4, [r7], #1
 8002dd6:	f7fd fdf1 	bl	80009bc <__aeabi_dcmplt>
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d174      	bne.n	8002ec8 <_dtoa_r+0x648>
 8002dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002de2:	2000      	movs	r0, #0
 8002de4:	4911      	ldr	r1, [pc, #68]	; (8002e2c <_dtoa_r+0x5ac>)
 8002de6:	f7fd f9bf 	bl	8000168 <__aeabi_dsub>
 8002dea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002dee:	f7fd fde5 	bl	80009bc <__aeabi_dcmplt>
 8002df2:	2800      	cmp	r0, #0
 8002df4:	f040 80b6 	bne.w	8002f64 <_dtoa_r+0x6e4>
 8002df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002dfa:	429f      	cmp	r7, r3
 8002dfc:	f43f af7a 	beq.w	8002cf4 <_dtoa_r+0x474>
 8002e00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002e04:	2200      	movs	r2, #0
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <_dtoa_r+0x5b0>)
 8002e08:	f7fd fb66 	bl	80004d8 <__aeabi_dmul>
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <_dtoa_r+0x5b0>)
 8002e18:	f7fd fb5e 	bl	80004d8 <__aeabi_dmul>
 8002e1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e20:	e7c3      	b.n	8002daa <_dtoa_r+0x52a>
 8002e22:	bf00      	nop
 8002e24:	08004870 	.word	0x08004870
 8002e28:	08004848 	.word	0x08004848
 8002e2c:	3ff00000 	.word	0x3ff00000
 8002e30:	40240000 	.word	0x40240000
 8002e34:	401c0000 	.word	0x401c0000
 8002e38:	40140000 	.word	0x40140000
 8002e3c:	3fe00000 	.word	0x3fe00000
 8002e40:	4630      	mov	r0, r6
 8002e42:	4639      	mov	r1, r7
 8002e44:	f7fd fb48 	bl	80004d8 <__aeabi_dmul>
 8002e48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002e4e:	9c08      	ldr	r4, [sp, #32]
 8002e50:	9314      	str	r3, [sp, #80]	; 0x50
 8002e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e56:	f7fd fdef 	bl	8000a38 <__aeabi_d2iz>
 8002e5a:	9015      	str	r0, [sp, #84]	; 0x54
 8002e5c:	f7fd fad2 	bl	8000404 <__aeabi_i2d>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e68:	f7fd f97e 	bl	8000168 <__aeabi_dsub>
 8002e6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002e6e:	4606      	mov	r6, r0
 8002e70:	3330      	adds	r3, #48	; 0x30
 8002e72:	f804 3b01 	strb.w	r3, [r4], #1
 8002e76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e78:	460f      	mov	r7, r1
 8002e7a:	429c      	cmp	r4, r3
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	d124      	bne.n	8002ecc <_dtoa_r+0x64c>
 8002e82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002e86:	4bb3      	ldr	r3, [pc, #716]	; (8003154 <_dtoa_r+0x8d4>)
 8002e88:	f7fd f970 	bl	800016c <__adddf3>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4630      	mov	r0, r6
 8002e92:	4639      	mov	r1, r7
 8002e94:	f7fd fdb0 	bl	80009f8 <__aeabi_dcmpgt>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	d162      	bne.n	8002f62 <_dtoa_r+0x6e2>
 8002e9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	49ac      	ldr	r1, [pc, #688]	; (8003154 <_dtoa_r+0x8d4>)
 8002ea4:	f7fd f960 	bl	8000168 <__aeabi_dsub>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4630      	mov	r0, r6
 8002eae:	4639      	mov	r1, r7
 8002eb0:	f7fd fd84 	bl	80009bc <__aeabi_dcmplt>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	f43f af1d 	beq.w	8002cf4 <_dtoa_r+0x474>
 8002eba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002ebc:	1e7b      	subs	r3, r7, #1
 8002ebe:	9314      	str	r3, [sp, #80]	; 0x50
 8002ec0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8002ec4:	2b30      	cmp	r3, #48	; 0x30
 8002ec6:	d0f8      	beq.n	8002eba <_dtoa_r+0x63a>
 8002ec8:	46c1      	mov	r9, r8
 8002eca:	e03a      	b.n	8002f42 <_dtoa_r+0x6c2>
 8002ecc:	4ba2      	ldr	r3, [pc, #648]	; (8003158 <_dtoa_r+0x8d8>)
 8002ece:	f7fd fb03 	bl	80004d8 <__aeabi_dmul>
 8002ed2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ed6:	e7bc      	b.n	8002e52 <_dtoa_r+0x5d2>
 8002ed8:	9f08      	ldr	r7, [sp, #32]
 8002eda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002ede:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002ee2:	f7fd fc23 	bl	800072c <__aeabi_ddiv>
 8002ee6:	f7fd fda7 	bl	8000a38 <__aeabi_d2iz>
 8002eea:	4604      	mov	r4, r0
 8002eec:	f7fd fa8a 	bl	8000404 <__aeabi_i2d>
 8002ef0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002ef4:	f7fd faf0 	bl	80004d8 <__aeabi_dmul>
 8002ef8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8002efc:	460b      	mov	r3, r1
 8002efe:	4602      	mov	r2, r0
 8002f00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f04:	f7fd f930 	bl	8000168 <__aeabi_dsub>
 8002f08:	f807 6b01 	strb.w	r6, [r7], #1
 8002f0c:	9e08      	ldr	r6, [sp, #32]
 8002f0e:	9b02      	ldr	r3, [sp, #8]
 8002f10:	1bbe      	subs	r6, r7, r6
 8002f12:	42b3      	cmp	r3, r6
 8002f14:	d13a      	bne.n	8002f8c <_dtoa_r+0x70c>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	f7fd f927 	bl	800016c <__adddf3>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002f2a:	f7fd fd65 	bl	80009f8 <__aeabi_dcmpgt>
 8002f2e:	bb58      	cbnz	r0, 8002f88 <_dtoa_r+0x708>
 8002f30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f38:	f7fd fd36 	bl	80009a8 <__aeabi_dcmpeq>
 8002f3c:	b108      	cbz	r0, 8002f42 <_dtoa_r+0x6c2>
 8002f3e:	07e1      	lsls	r1, r4, #31
 8002f40:	d422      	bmi.n	8002f88 <_dtoa_r+0x708>
 8002f42:	4628      	mov	r0, r5
 8002f44:	4651      	mov	r1, sl
 8002f46:	f000 fd27 	bl	8003998 <_Bfree>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	703b      	strb	r3, [r7, #0]
 8002f4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002f50:	f109 0001 	add.w	r0, r9, #1
 8002f54:	6018      	str	r0, [r3, #0]
 8002f56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f43f acdf 	beq.w	800291c <_dtoa_r+0x9c>
 8002f5e:	601f      	str	r7, [r3, #0]
 8002f60:	e4dc      	b.n	800291c <_dtoa_r+0x9c>
 8002f62:	4627      	mov	r7, r4
 8002f64:	463b      	mov	r3, r7
 8002f66:	461f      	mov	r7, r3
 8002f68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002f6c:	2a39      	cmp	r2, #57	; 0x39
 8002f6e:	d107      	bne.n	8002f80 <_dtoa_r+0x700>
 8002f70:	9a08      	ldr	r2, [sp, #32]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d1f7      	bne.n	8002f66 <_dtoa_r+0x6e6>
 8002f76:	2230      	movs	r2, #48	; 0x30
 8002f78:	9908      	ldr	r1, [sp, #32]
 8002f7a:	f108 0801 	add.w	r8, r8, #1
 8002f7e:	700a      	strb	r2, [r1, #0]
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	3201      	adds	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e79f      	b.n	8002ec8 <_dtoa_r+0x648>
 8002f88:	46c8      	mov	r8, r9
 8002f8a:	e7eb      	b.n	8002f64 <_dtoa_r+0x6e4>
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	4b72      	ldr	r3, [pc, #456]	; (8003158 <_dtoa_r+0x8d8>)
 8002f90:	f7fd faa2 	bl	80004d8 <__aeabi_dmul>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f7fd fd02 	bl	80009a8 <__aeabi_dcmpeq>
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d098      	beq.n	8002eda <_dtoa_r+0x65a>
 8002fa8:	e7cb      	b.n	8002f42 <_dtoa_r+0x6c2>
 8002faa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002fac:	2a00      	cmp	r2, #0
 8002fae:	f000 80cd 	beq.w	800314c <_dtoa_r+0x8cc>
 8002fb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002fb4:	2a01      	cmp	r2, #1
 8002fb6:	f300 80af 	bgt.w	8003118 <_dtoa_r+0x898>
 8002fba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002fbc:	2a00      	cmp	r2, #0
 8002fbe:	f000 80a7 	beq.w	8003110 <_dtoa_r+0x890>
 8002fc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002fc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002fc8:	9f06      	ldr	r7, [sp, #24]
 8002fca:	9a06      	ldr	r2, [sp, #24]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	441a      	add	r2, r3
 8002fd0:	9206      	str	r2, [sp, #24]
 8002fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	441a      	add	r2, r3
 8002fd8:	9209      	str	r2, [sp, #36]	; 0x24
 8002fda:	f000 fd97 	bl	8003b0c <__i2b>
 8002fde:	4606      	mov	r6, r0
 8002fe0:	2f00      	cmp	r7, #0
 8002fe2:	dd0c      	ble.n	8002ffe <_dtoa_r+0x77e>
 8002fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	dd09      	ble.n	8002ffe <_dtoa_r+0x77e>
 8002fea:	42bb      	cmp	r3, r7
 8002fec:	bfa8      	it	ge
 8002fee:	463b      	movge	r3, r7
 8002ff0:	9a06      	ldr	r2, [sp, #24]
 8002ff2:	1aff      	subs	r7, r7, r3
 8002ff4:	1ad2      	subs	r2, r2, r3
 8002ff6:	9206      	str	r2, [sp, #24]
 8002ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8002ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003000:	b1f3      	cbz	r3, 8003040 <_dtoa_r+0x7c0>
 8003002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80a9 	beq.w	800315c <_dtoa_r+0x8dc>
 800300a:	2c00      	cmp	r4, #0
 800300c:	dd10      	ble.n	8003030 <_dtoa_r+0x7b0>
 800300e:	4631      	mov	r1, r6
 8003010:	4622      	mov	r2, r4
 8003012:	4628      	mov	r0, r5
 8003014:	f000 fe34 	bl	8003c80 <__pow5mult>
 8003018:	4652      	mov	r2, sl
 800301a:	4601      	mov	r1, r0
 800301c:	4606      	mov	r6, r0
 800301e:	4628      	mov	r0, r5
 8003020:	f000 fd8a 	bl	8003b38 <__multiply>
 8003024:	4680      	mov	r8, r0
 8003026:	4651      	mov	r1, sl
 8003028:	4628      	mov	r0, r5
 800302a:	f000 fcb5 	bl	8003998 <_Bfree>
 800302e:	46c2      	mov	sl, r8
 8003030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003032:	1b1a      	subs	r2, r3, r4
 8003034:	d004      	beq.n	8003040 <_dtoa_r+0x7c0>
 8003036:	4651      	mov	r1, sl
 8003038:	4628      	mov	r0, r5
 800303a:	f000 fe21 	bl	8003c80 <__pow5mult>
 800303e:	4682      	mov	sl, r0
 8003040:	2101      	movs	r1, #1
 8003042:	4628      	mov	r0, r5
 8003044:	f000 fd62 	bl	8003b0c <__i2b>
 8003048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800304a:	4604      	mov	r4, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	f340 8087 	ble.w	8003160 <_dtoa_r+0x8e0>
 8003052:	461a      	mov	r2, r3
 8003054:	4601      	mov	r1, r0
 8003056:	4628      	mov	r0, r5
 8003058:	f000 fe12 	bl	8003c80 <__pow5mult>
 800305c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800305e:	4604      	mov	r4, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	f340 8080 	ble.w	8003166 <_dtoa_r+0x8e6>
 8003066:	f04f 0800 	mov.w	r8, #0
 800306a:	6923      	ldr	r3, [r4, #16]
 800306c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003070:	6918      	ldr	r0, [r3, #16]
 8003072:	f000 fcfd 	bl	8003a70 <__hi0bits>
 8003076:	f1c0 0020 	rsb	r0, r0, #32
 800307a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800307c:	4418      	add	r0, r3
 800307e:	f010 001f 	ands.w	r0, r0, #31
 8003082:	f000 8092 	beq.w	80031aa <_dtoa_r+0x92a>
 8003086:	f1c0 0320 	rsb	r3, r0, #32
 800308a:	2b04      	cmp	r3, #4
 800308c:	f340 808a 	ble.w	80031a4 <_dtoa_r+0x924>
 8003090:	f1c0 001c 	rsb	r0, r0, #28
 8003094:	9b06      	ldr	r3, [sp, #24]
 8003096:	4407      	add	r7, r0
 8003098:	4403      	add	r3, r0
 800309a:	9306      	str	r3, [sp, #24]
 800309c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800309e:	4403      	add	r3, r0
 80030a0:	9309      	str	r3, [sp, #36]	; 0x24
 80030a2:	9b06      	ldr	r3, [sp, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	dd05      	ble.n	80030b4 <_dtoa_r+0x834>
 80030a8:	4651      	mov	r1, sl
 80030aa:	461a      	mov	r2, r3
 80030ac:	4628      	mov	r0, r5
 80030ae:	f000 fe41 	bl	8003d34 <__lshift>
 80030b2:	4682      	mov	sl, r0
 80030b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	dd05      	ble.n	80030c6 <_dtoa_r+0x846>
 80030ba:	4621      	mov	r1, r4
 80030bc:	461a      	mov	r2, r3
 80030be:	4628      	mov	r0, r5
 80030c0:	f000 fe38 	bl	8003d34 <__lshift>
 80030c4:	4604      	mov	r4, r0
 80030c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d070      	beq.n	80031ae <_dtoa_r+0x92e>
 80030cc:	4621      	mov	r1, r4
 80030ce:	4650      	mov	r0, sl
 80030d0:	f000 fe9c 	bl	8003e0c <__mcmp>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	da6a      	bge.n	80031ae <_dtoa_r+0x92e>
 80030d8:	2300      	movs	r3, #0
 80030da:	4651      	mov	r1, sl
 80030dc:	220a      	movs	r2, #10
 80030de:	4628      	mov	r0, r5
 80030e0:	f000 fc7c 	bl	80039dc <__multadd>
 80030e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030e6:	4682      	mov	sl, r0
 80030e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8193 	beq.w	8003418 <_dtoa_r+0xb98>
 80030f2:	4631      	mov	r1, r6
 80030f4:	2300      	movs	r3, #0
 80030f6:	220a      	movs	r2, #10
 80030f8:	4628      	mov	r0, r5
 80030fa:	f000 fc6f 	bl	80039dc <__multadd>
 80030fe:	f1bb 0f00 	cmp.w	fp, #0
 8003102:	4606      	mov	r6, r0
 8003104:	f300 8093 	bgt.w	800322e <_dtoa_r+0x9ae>
 8003108:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800310a:	2b02      	cmp	r3, #2
 800310c:	dc57      	bgt.n	80031be <_dtoa_r+0x93e>
 800310e:	e08e      	b.n	800322e <_dtoa_r+0x9ae>
 8003110:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003112:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003116:	e756      	b.n	8002fc6 <_dtoa_r+0x746>
 8003118:	9b02      	ldr	r3, [sp, #8]
 800311a:	1e5c      	subs	r4, r3, #1
 800311c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800311e:	42a3      	cmp	r3, r4
 8003120:	bfb7      	itett	lt
 8003122:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003124:	1b1c      	subge	r4, r3, r4
 8003126:	1ae2      	sublt	r2, r4, r3
 8003128:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800312a:	bfbe      	ittt	lt
 800312c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800312e:	189b      	addlt	r3, r3, r2
 8003130:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	bfb8      	it	lt
 8003136:	2400      	movlt	r4, #0
 8003138:	2b00      	cmp	r3, #0
 800313a:	bfbb      	ittet	lt
 800313c:	9b06      	ldrlt	r3, [sp, #24]
 800313e:	9a02      	ldrlt	r2, [sp, #8]
 8003140:	9f06      	ldrge	r7, [sp, #24]
 8003142:	1a9f      	sublt	r7, r3, r2
 8003144:	bfac      	ite	ge
 8003146:	9b02      	ldrge	r3, [sp, #8]
 8003148:	2300      	movlt	r3, #0
 800314a:	e73e      	b.n	8002fca <_dtoa_r+0x74a>
 800314c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800314e:	9f06      	ldr	r7, [sp, #24]
 8003150:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003152:	e745      	b.n	8002fe0 <_dtoa_r+0x760>
 8003154:	3fe00000 	.word	0x3fe00000
 8003158:	40240000 	.word	0x40240000
 800315c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800315e:	e76a      	b.n	8003036 <_dtoa_r+0x7b6>
 8003160:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003162:	2b01      	cmp	r3, #1
 8003164:	dc19      	bgt.n	800319a <_dtoa_r+0x91a>
 8003166:	9b04      	ldr	r3, [sp, #16]
 8003168:	b9bb      	cbnz	r3, 800319a <_dtoa_r+0x91a>
 800316a:	9b05      	ldr	r3, [sp, #20]
 800316c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003170:	b99b      	cbnz	r3, 800319a <_dtoa_r+0x91a>
 8003172:	9b05      	ldr	r3, [sp, #20]
 8003174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003178:	0d1b      	lsrs	r3, r3, #20
 800317a:	051b      	lsls	r3, r3, #20
 800317c:	b183      	cbz	r3, 80031a0 <_dtoa_r+0x920>
 800317e:	f04f 0801 	mov.w	r8, #1
 8003182:	9b06      	ldr	r3, [sp, #24]
 8003184:	3301      	adds	r3, #1
 8003186:	9306      	str	r3, [sp, #24]
 8003188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800318a:	3301      	adds	r3, #1
 800318c:	9309      	str	r3, [sp, #36]	; 0x24
 800318e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003190:	2b00      	cmp	r3, #0
 8003192:	f47f af6a 	bne.w	800306a <_dtoa_r+0x7ea>
 8003196:	2001      	movs	r0, #1
 8003198:	e76f      	b.n	800307a <_dtoa_r+0x7fa>
 800319a:	f04f 0800 	mov.w	r8, #0
 800319e:	e7f6      	b.n	800318e <_dtoa_r+0x90e>
 80031a0:	4698      	mov	r8, r3
 80031a2:	e7f4      	b.n	800318e <_dtoa_r+0x90e>
 80031a4:	f43f af7d 	beq.w	80030a2 <_dtoa_r+0x822>
 80031a8:	4618      	mov	r0, r3
 80031aa:	301c      	adds	r0, #28
 80031ac:	e772      	b.n	8003094 <_dtoa_r+0x814>
 80031ae:	9b02      	ldr	r3, [sp, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	dc36      	bgt.n	8003222 <_dtoa_r+0x9a2>
 80031b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	dd33      	ble.n	8003222 <_dtoa_r+0x9a2>
 80031ba:	f8dd b008 	ldr.w	fp, [sp, #8]
 80031be:	f1bb 0f00 	cmp.w	fp, #0
 80031c2:	d10d      	bne.n	80031e0 <_dtoa_r+0x960>
 80031c4:	4621      	mov	r1, r4
 80031c6:	465b      	mov	r3, fp
 80031c8:	2205      	movs	r2, #5
 80031ca:	4628      	mov	r0, r5
 80031cc:	f000 fc06 	bl	80039dc <__multadd>
 80031d0:	4601      	mov	r1, r0
 80031d2:	4604      	mov	r4, r0
 80031d4:	4650      	mov	r0, sl
 80031d6:	f000 fe19 	bl	8003e0c <__mcmp>
 80031da:	2800      	cmp	r0, #0
 80031dc:	f73f adb6 	bgt.w	8002d4c <_dtoa_r+0x4cc>
 80031e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80031e2:	9f08      	ldr	r7, [sp, #32]
 80031e4:	ea6f 0903 	mvn.w	r9, r3
 80031e8:	f04f 0800 	mov.w	r8, #0
 80031ec:	4621      	mov	r1, r4
 80031ee:	4628      	mov	r0, r5
 80031f0:	f000 fbd2 	bl	8003998 <_Bfree>
 80031f4:	2e00      	cmp	r6, #0
 80031f6:	f43f aea4 	beq.w	8002f42 <_dtoa_r+0x6c2>
 80031fa:	f1b8 0f00 	cmp.w	r8, #0
 80031fe:	d005      	beq.n	800320c <_dtoa_r+0x98c>
 8003200:	45b0      	cmp	r8, r6
 8003202:	d003      	beq.n	800320c <_dtoa_r+0x98c>
 8003204:	4641      	mov	r1, r8
 8003206:	4628      	mov	r0, r5
 8003208:	f000 fbc6 	bl	8003998 <_Bfree>
 800320c:	4631      	mov	r1, r6
 800320e:	4628      	mov	r0, r5
 8003210:	f000 fbc2 	bl	8003998 <_Bfree>
 8003214:	e695      	b.n	8002f42 <_dtoa_r+0x6c2>
 8003216:	2400      	movs	r4, #0
 8003218:	4626      	mov	r6, r4
 800321a:	e7e1      	b.n	80031e0 <_dtoa_r+0x960>
 800321c:	46c1      	mov	r9, r8
 800321e:	4626      	mov	r6, r4
 8003220:	e594      	b.n	8002d4c <_dtoa_r+0x4cc>
 8003222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003224:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80fc 	beq.w	8003426 <_dtoa_r+0xba6>
 800322e:	2f00      	cmp	r7, #0
 8003230:	dd05      	ble.n	800323e <_dtoa_r+0x9be>
 8003232:	4631      	mov	r1, r6
 8003234:	463a      	mov	r2, r7
 8003236:	4628      	mov	r0, r5
 8003238:	f000 fd7c 	bl	8003d34 <__lshift>
 800323c:	4606      	mov	r6, r0
 800323e:	f1b8 0f00 	cmp.w	r8, #0
 8003242:	d05c      	beq.n	80032fe <_dtoa_r+0xa7e>
 8003244:	4628      	mov	r0, r5
 8003246:	6871      	ldr	r1, [r6, #4]
 8003248:	f000 fb66 	bl	8003918 <_Balloc>
 800324c:	4607      	mov	r7, r0
 800324e:	b928      	cbnz	r0, 800325c <_dtoa_r+0x9dc>
 8003250:	4602      	mov	r2, r0
 8003252:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003256:	4b7e      	ldr	r3, [pc, #504]	; (8003450 <_dtoa_r+0xbd0>)
 8003258:	f7ff bb26 	b.w	80028a8 <_dtoa_r+0x28>
 800325c:	6932      	ldr	r2, [r6, #16]
 800325e:	f106 010c 	add.w	r1, r6, #12
 8003262:	3202      	adds	r2, #2
 8003264:	0092      	lsls	r2, r2, #2
 8003266:	300c      	adds	r0, #12
 8003268:	f000 fb3c 	bl	80038e4 <memcpy>
 800326c:	2201      	movs	r2, #1
 800326e:	4639      	mov	r1, r7
 8003270:	4628      	mov	r0, r5
 8003272:	f000 fd5f 	bl	8003d34 <__lshift>
 8003276:	46b0      	mov	r8, r6
 8003278:	4606      	mov	r6, r0
 800327a:	9b08      	ldr	r3, [sp, #32]
 800327c:	3301      	adds	r3, #1
 800327e:	9302      	str	r3, [sp, #8]
 8003280:	9b08      	ldr	r3, [sp, #32]
 8003282:	445b      	add	r3, fp
 8003284:	930a      	str	r3, [sp, #40]	; 0x28
 8003286:	9b04      	ldr	r3, [sp, #16]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	9309      	str	r3, [sp, #36]	; 0x24
 800328e:	9b02      	ldr	r3, [sp, #8]
 8003290:	4621      	mov	r1, r4
 8003292:	4650      	mov	r0, sl
 8003294:	f103 3bff 	add.w	fp, r3, #4294967295
 8003298:	f7ff fa62 	bl	8002760 <quorem>
 800329c:	4603      	mov	r3, r0
 800329e:	4641      	mov	r1, r8
 80032a0:	3330      	adds	r3, #48	; 0x30
 80032a2:	9004      	str	r0, [sp, #16]
 80032a4:	4650      	mov	r0, sl
 80032a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80032a8:	f000 fdb0 	bl	8003e0c <__mcmp>
 80032ac:	4632      	mov	r2, r6
 80032ae:	9006      	str	r0, [sp, #24]
 80032b0:	4621      	mov	r1, r4
 80032b2:	4628      	mov	r0, r5
 80032b4:	f000 fdc6 	bl	8003e44 <__mdiff>
 80032b8:	68c2      	ldr	r2, [r0, #12]
 80032ba:	4607      	mov	r7, r0
 80032bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032be:	bb02      	cbnz	r2, 8003302 <_dtoa_r+0xa82>
 80032c0:	4601      	mov	r1, r0
 80032c2:	4650      	mov	r0, sl
 80032c4:	f000 fda2 	bl	8003e0c <__mcmp>
 80032c8:	4602      	mov	r2, r0
 80032ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032cc:	4639      	mov	r1, r7
 80032ce:	4628      	mov	r0, r5
 80032d0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80032d4:	f000 fb60 	bl	8003998 <_Bfree>
 80032d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80032da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80032dc:	9f02      	ldr	r7, [sp, #8]
 80032de:	ea43 0102 	orr.w	r1, r3, r2
 80032e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032e4:	430b      	orrs	r3, r1
 80032e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032e8:	d10d      	bne.n	8003306 <_dtoa_r+0xa86>
 80032ea:	2b39      	cmp	r3, #57	; 0x39
 80032ec:	d027      	beq.n	800333e <_dtoa_r+0xabe>
 80032ee:	9a06      	ldr	r2, [sp, #24]
 80032f0:	2a00      	cmp	r2, #0
 80032f2:	dd01      	ble.n	80032f8 <_dtoa_r+0xa78>
 80032f4:	9b04      	ldr	r3, [sp, #16]
 80032f6:	3331      	adds	r3, #49	; 0x31
 80032f8:	f88b 3000 	strb.w	r3, [fp]
 80032fc:	e776      	b.n	80031ec <_dtoa_r+0x96c>
 80032fe:	4630      	mov	r0, r6
 8003300:	e7b9      	b.n	8003276 <_dtoa_r+0x9f6>
 8003302:	2201      	movs	r2, #1
 8003304:	e7e2      	b.n	80032cc <_dtoa_r+0xa4c>
 8003306:	9906      	ldr	r1, [sp, #24]
 8003308:	2900      	cmp	r1, #0
 800330a:	db04      	blt.n	8003316 <_dtoa_r+0xa96>
 800330c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800330e:	4301      	orrs	r1, r0
 8003310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003312:	4301      	orrs	r1, r0
 8003314:	d120      	bne.n	8003358 <_dtoa_r+0xad8>
 8003316:	2a00      	cmp	r2, #0
 8003318:	ddee      	ble.n	80032f8 <_dtoa_r+0xa78>
 800331a:	4651      	mov	r1, sl
 800331c:	2201      	movs	r2, #1
 800331e:	4628      	mov	r0, r5
 8003320:	9302      	str	r3, [sp, #8]
 8003322:	f000 fd07 	bl	8003d34 <__lshift>
 8003326:	4621      	mov	r1, r4
 8003328:	4682      	mov	sl, r0
 800332a:	f000 fd6f 	bl	8003e0c <__mcmp>
 800332e:	2800      	cmp	r0, #0
 8003330:	9b02      	ldr	r3, [sp, #8]
 8003332:	dc02      	bgt.n	800333a <_dtoa_r+0xaba>
 8003334:	d1e0      	bne.n	80032f8 <_dtoa_r+0xa78>
 8003336:	07da      	lsls	r2, r3, #31
 8003338:	d5de      	bpl.n	80032f8 <_dtoa_r+0xa78>
 800333a:	2b39      	cmp	r3, #57	; 0x39
 800333c:	d1da      	bne.n	80032f4 <_dtoa_r+0xa74>
 800333e:	2339      	movs	r3, #57	; 0x39
 8003340:	f88b 3000 	strb.w	r3, [fp]
 8003344:	463b      	mov	r3, r7
 8003346:	461f      	mov	r7, r3
 8003348:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800334c:	3b01      	subs	r3, #1
 800334e:	2a39      	cmp	r2, #57	; 0x39
 8003350:	d050      	beq.n	80033f4 <_dtoa_r+0xb74>
 8003352:	3201      	adds	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e749      	b.n	80031ec <_dtoa_r+0x96c>
 8003358:	2a00      	cmp	r2, #0
 800335a:	dd03      	ble.n	8003364 <_dtoa_r+0xae4>
 800335c:	2b39      	cmp	r3, #57	; 0x39
 800335e:	d0ee      	beq.n	800333e <_dtoa_r+0xabe>
 8003360:	3301      	adds	r3, #1
 8003362:	e7c9      	b.n	80032f8 <_dtoa_r+0xa78>
 8003364:	9a02      	ldr	r2, [sp, #8]
 8003366:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003368:	f802 3c01 	strb.w	r3, [r2, #-1]
 800336c:	428a      	cmp	r2, r1
 800336e:	d02a      	beq.n	80033c6 <_dtoa_r+0xb46>
 8003370:	4651      	mov	r1, sl
 8003372:	2300      	movs	r3, #0
 8003374:	220a      	movs	r2, #10
 8003376:	4628      	mov	r0, r5
 8003378:	f000 fb30 	bl	80039dc <__multadd>
 800337c:	45b0      	cmp	r8, r6
 800337e:	4682      	mov	sl, r0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	f04f 020a 	mov.w	r2, #10
 8003388:	4641      	mov	r1, r8
 800338a:	4628      	mov	r0, r5
 800338c:	d107      	bne.n	800339e <_dtoa_r+0xb1e>
 800338e:	f000 fb25 	bl	80039dc <__multadd>
 8003392:	4680      	mov	r8, r0
 8003394:	4606      	mov	r6, r0
 8003396:	9b02      	ldr	r3, [sp, #8]
 8003398:	3301      	adds	r3, #1
 800339a:	9302      	str	r3, [sp, #8]
 800339c:	e777      	b.n	800328e <_dtoa_r+0xa0e>
 800339e:	f000 fb1d 	bl	80039dc <__multadd>
 80033a2:	4631      	mov	r1, r6
 80033a4:	4680      	mov	r8, r0
 80033a6:	2300      	movs	r3, #0
 80033a8:	220a      	movs	r2, #10
 80033aa:	4628      	mov	r0, r5
 80033ac:	f000 fb16 	bl	80039dc <__multadd>
 80033b0:	4606      	mov	r6, r0
 80033b2:	e7f0      	b.n	8003396 <_dtoa_r+0xb16>
 80033b4:	f1bb 0f00 	cmp.w	fp, #0
 80033b8:	bfcc      	ite	gt
 80033ba:	465f      	movgt	r7, fp
 80033bc:	2701      	movle	r7, #1
 80033be:	f04f 0800 	mov.w	r8, #0
 80033c2:	9a08      	ldr	r2, [sp, #32]
 80033c4:	4417      	add	r7, r2
 80033c6:	4651      	mov	r1, sl
 80033c8:	2201      	movs	r2, #1
 80033ca:	4628      	mov	r0, r5
 80033cc:	9302      	str	r3, [sp, #8]
 80033ce:	f000 fcb1 	bl	8003d34 <__lshift>
 80033d2:	4621      	mov	r1, r4
 80033d4:	4682      	mov	sl, r0
 80033d6:	f000 fd19 	bl	8003e0c <__mcmp>
 80033da:	2800      	cmp	r0, #0
 80033dc:	dcb2      	bgt.n	8003344 <_dtoa_r+0xac4>
 80033de:	d102      	bne.n	80033e6 <_dtoa_r+0xb66>
 80033e0:	9b02      	ldr	r3, [sp, #8]
 80033e2:	07db      	lsls	r3, r3, #31
 80033e4:	d4ae      	bmi.n	8003344 <_dtoa_r+0xac4>
 80033e6:	463b      	mov	r3, r7
 80033e8:	461f      	mov	r7, r3
 80033ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80033ee:	2a30      	cmp	r2, #48	; 0x30
 80033f0:	d0fa      	beq.n	80033e8 <_dtoa_r+0xb68>
 80033f2:	e6fb      	b.n	80031ec <_dtoa_r+0x96c>
 80033f4:	9a08      	ldr	r2, [sp, #32]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d1a5      	bne.n	8003346 <_dtoa_r+0xac6>
 80033fa:	2331      	movs	r3, #49	; 0x31
 80033fc:	f109 0901 	add.w	r9, r9, #1
 8003400:	7013      	strb	r3, [r2, #0]
 8003402:	e6f3      	b.n	80031ec <_dtoa_r+0x96c>
 8003404:	4b13      	ldr	r3, [pc, #76]	; (8003454 <_dtoa_r+0xbd4>)
 8003406:	f7ff baa7 	b.w	8002958 <_dtoa_r+0xd8>
 800340a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800340c:	2b00      	cmp	r3, #0
 800340e:	f47f aa80 	bne.w	8002912 <_dtoa_r+0x92>
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <_dtoa_r+0xbd8>)
 8003414:	f7ff baa0 	b.w	8002958 <_dtoa_r+0xd8>
 8003418:	f1bb 0f00 	cmp.w	fp, #0
 800341c:	dc03      	bgt.n	8003426 <_dtoa_r+0xba6>
 800341e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003420:	2b02      	cmp	r3, #2
 8003422:	f73f aecc 	bgt.w	80031be <_dtoa_r+0x93e>
 8003426:	9f08      	ldr	r7, [sp, #32]
 8003428:	4621      	mov	r1, r4
 800342a:	4650      	mov	r0, sl
 800342c:	f7ff f998 	bl	8002760 <quorem>
 8003430:	9a08      	ldr	r2, [sp, #32]
 8003432:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003436:	f807 3b01 	strb.w	r3, [r7], #1
 800343a:	1aba      	subs	r2, r7, r2
 800343c:	4593      	cmp	fp, r2
 800343e:	ddb9      	ble.n	80033b4 <_dtoa_r+0xb34>
 8003440:	4651      	mov	r1, sl
 8003442:	2300      	movs	r3, #0
 8003444:	220a      	movs	r2, #10
 8003446:	4628      	mov	r0, r5
 8003448:	f000 fac8 	bl	80039dc <__multadd>
 800344c:	4682      	mov	sl, r0
 800344e:	e7eb      	b.n	8003428 <_dtoa_r+0xba8>
 8003450:	08004773 	.word	0x08004773
 8003454:	08004690 	.word	0x08004690
 8003458:	080046f0 	.word	0x080046f0

0800345c <__sflush_r>:
 800345c:	898a      	ldrh	r2, [r1, #12]
 800345e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003462:	4605      	mov	r5, r0
 8003464:	0710      	lsls	r0, r2, #28
 8003466:	460c      	mov	r4, r1
 8003468:	d458      	bmi.n	800351c <__sflush_r+0xc0>
 800346a:	684b      	ldr	r3, [r1, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	dc05      	bgt.n	800347c <__sflush_r+0x20>
 8003470:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	dc02      	bgt.n	800347c <__sflush_r+0x20>
 8003476:	2000      	movs	r0, #0
 8003478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800347c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800347e:	2e00      	cmp	r6, #0
 8003480:	d0f9      	beq.n	8003476 <__sflush_r+0x1a>
 8003482:	2300      	movs	r3, #0
 8003484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003488:	682f      	ldr	r7, [r5, #0]
 800348a:	602b      	str	r3, [r5, #0]
 800348c:	d032      	beq.n	80034f4 <__sflush_r+0x98>
 800348e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003490:	89a3      	ldrh	r3, [r4, #12]
 8003492:	075a      	lsls	r2, r3, #29
 8003494:	d505      	bpl.n	80034a2 <__sflush_r+0x46>
 8003496:	6863      	ldr	r3, [r4, #4]
 8003498:	1ac0      	subs	r0, r0, r3
 800349a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800349c:	b10b      	cbz	r3, 80034a2 <__sflush_r+0x46>
 800349e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034a0:	1ac0      	subs	r0, r0, r3
 80034a2:	2300      	movs	r3, #0
 80034a4:	4602      	mov	r2, r0
 80034a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034a8:	4628      	mov	r0, r5
 80034aa:	6a21      	ldr	r1, [r4, #32]
 80034ac:	47b0      	blx	r6
 80034ae:	1c43      	adds	r3, r0, #1
 80034b0:	89a3      	ldrh	r3, [r4, #12]
 80034b2:	d106      	bne.n	80034c2 <__sflush_r+0x66>
 80034b4:	6829      	ldr	r1, [r5, #0]
 80034b6:	291d      	cmp	r1, #29
 80034b8:	d82c      	bhi.n	8003514 <__sflush_r+0xb8>
 80034ba:	4a2a      	ldr	r2, [pc, #168]	; (8003564 <__sflush_r+0x108>)
 80034bc:	40ca      	lsrs	r2, r1
 80034be:	07d6      	lsls	r6, r2, #31
 80034c0:	d528      	bpl.n	8003514 <__sflush_r+0xb8>
 80034c2:	2200      	movs	r2, #0
 80034c4:	6062      	str	r2, [r4, #4]
 80034c6:	6922      	ldr	r2, [r4, #16]
 80034c8:	04d9      	lsls	r1, r3, #19
 80034ca:	6022      	str	r2, [r4, #0]
 80034cc:	d504      	bpl.n	80034d8 <__sflush_r+0x7c>
 80034ce:	1c42      	adds	r2, r0, #1
 80034d0:	d101      	bne.n	80034d6 <__sflush_r+0x7a>
 80034d2:	682b      	ldr	r3, [r5, #0]
 80034d4:	b903      	cbnz	r3, 80034d8 <__sflush_r+0x7c>
 80034d6:	6560      	str	r0, [r4, #84]	; 0x54
 80034d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034da:	602f      	str	r7, [r5, #0]
 80034dc:	2900      	cmp	r1, #0
 80034de:	d0ca      	beq.n	8003476 <__sflush_r+0x1a>
 80034e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034e4:	4299      	cmp	r1, r3
 80034e6:	d002      	beq.n	80034ee <__sflush_r+0x92>
 80034e8:	4628      	mov	r0, r5
 80034ea:	f7fe fab7 	bl	8001a5c <_free_r>
 80034ee:	2000      	movs	r0, #0
 80034f0:	6360      	str	r0, [r4, #52]	; 0x34
 80034f2:	e7c1      	b.n	8003478 <__sflush_r+0x1c>
 80034f4:	6a21      	ldr	r1, [r4, #32]
 80034f6:	2301      	movs	r3, #1
 80034f8:	4628      	mov	r0, r5
 80034fa:	47b0      	blx	r6
 80034fc:	1c41      	adds	r1, r0, #1
 80034fe:	d1c7      	bne.n	8003490 <__sflush_r+0x34>
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0c4      	beq.n	8003490 <__sflush_r+0x34>
 8003506:	2b1d      	cmp	r3, #29
 8003508:	d001      	beq.n	800350e <__sflush_r+0xb2>
 800350a:	2b16      	cmp	r3, #22
 800350c:	d101      	bne.n	8003512 <__sflush_r+0xb6>
 800350e:	602f      	str	r7, [r5, #0]
 8003510:	e7b1      	b.n	8003476 <__sflush_r+0x1a>
 8003512:	89a3      	ldrh	r3, [r4, #12]
 8003514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003518:	81a3      	strh	r3, [r4, #12]
 800351a:	e7ad      	b.n	8003478 <__sflush_r+0x1c>
 800351c:	690f      	ldr	r7, [r1, #16]
 800351e:	2f00      	cmp	r7, #0
 8003520:	d0a9      	beq.n	8003476 <__sflush_r+0x1a>
 8003522:	0793      	lsls	r3, r2, #30
 8003524:	bf18      	it	ne
 8003526:	2300      	movne	r3, #0
 8003528:	680e      	ldr	r6, [r1, #0]
 800352a:	bf08      	it	eq
 800352c:	694b      	ldreq	r3, [r1, #20]
 800352e:	eba6 0807 	sub.w	r8, r6, r7
 8003532:	600f      	str	r7, [r1, #0]
 8003534:	608b      	str	r3, [r1, #8]
 8003536:	f1b8 0f00 	cmp.w	r8, #0
 800353a:	dd9c      	ble.n	8003476 <__sflush_r+0x1a>
 800353c:	4643      	mov	r3, r8
 800353e:	463a      	mov	r2, r7
 8003540:	4628      	mov	r0, r5
 8003542:	6a21      	ldr	r1, [r4, #32]
 8003544:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003546:	47b0      	blx	r6
 8003548:	2800      	cmp	r0, #0
 800354a:	dc06      	bgt.n	800355a <__sflush_r+0xfe>
 800354c:	89a3      	ldrh	r3, [r4, #12]
 800354e:	f04f 30ff 	mov.w	r0, #4294967295
 8003552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003556:	81a3      	strh	r3, [r4, #12]
 8003558:	e78e      	b.n	8003478 <__sflush_r+0x1c>
 800355a:	4407      	add	r7, r0
 800355c:	eba8 0800 	sub.w	r8, r8, r0
 8003560:	e7e9      	b.n	8003536 <__sflush_r+0xda>
 8003562:	bf00      	nop
 8003564:	20400001 	.word	0x20400001

08003568 <_fflush_r>:
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	690b      	ldr	r3, [r1, #16]
 800356c:	4605      	mov	r5, r0
 800356e:	460c      	mov	r4, r1
 8003570:	b913      	cbnz	r3, 8003578 <_fflush_r+0x10>
 8003572:	2500      	movs	r5, #0
 8003574:	4628      	mov	r0, r5
 8003576:	bd38      	pop	{r3, r4, r5, pc}
 8003578:	b118      	cbz	r0, 8003582 <_fflush_r+0x1a>
 800357a:	6983      	ldr	r3, [r0, #24]
 800357c:	b90b      	cbnz	r3, 8003582 <_fflush_r+0x1a>
 800357e:	f000 f887 	bl	8003690 <__sinit>
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <_fflush_r+0x6c>)
 8003584:	429c      	cmp	r4, r3
 8003586:	d11b      	bne.n	80035c0 <_fflush_r+0x58>
 8003588:	686c      	ldr	r4, [r5, #4]
 800358a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0ef      	beq.n	8003572 <_fflush_r+0xa>
 8003592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003594:	07d0      	lsls	r0, r2, #31
 8003596:	d404      	bmi.n	80035a2 <_fflush_r+0x3a>
 8003598:	0599      	lsls	r1, r3, #22
 800359a:	d402      	bmi.n	80035a2 <_fflush_r+0x3a>
 800359c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800359e:	f000 f92c 	bl	80037fa <__retarget_lock_acquire_recursive>
 80035a2:	4628      	mov	r0, r5
 80035a4:	4621      	mov	r1, r4
 80035a6:	f7ff ff59 	bl	800345c <__sflush_r>
 80035aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035ac:	4605      	mov	r5, r0
 80035ae:	07da      	lsls	r2, r3, #31
 80035b0:	d4e0      	bmi.n	8003574 <_fflush_r+0xc>
 80035b2:	89a3      	ldrh	r3, [r4, #12]
 80035b4:	059b      	lsls	r3, r3, #22
 80035b6:	d4dd      	bmi.n	8003574 <_fflush_r+0xc>
 80035b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ba:	f000 f91f 	bl	80037fc <__retarget_lock_release_recursive>
 80035be:	e7d9      	b.n	8003574 <_fflush_r+0xc>
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <_fflush_r+0x70>)
 80035c2:	429c      	cmp	r4, r3
 80035c4:	d101      	bne.n	80035ca <_fflush_r+0x62>
 80035c6:	68ac      	ldr	r4, [r5, #8]
 80035c8:	e7df      	b.n	800358a <_fflush_r+0x22>
 80035ca:	4b04      	ldr	r3, [pc, #16]	; (80035dc <_fflush_r+0x74>)
 80035cc:	429c      	cmp	r4, r3
 80035ce:	bf08      	it	eq
 80035d0:	68ec      	ldreq	r4, [r5, #12]
 80035d2:	e7da      	b.n	800358a <_fflush_r+0x22>
 80035d4:	080047a4 	.word	0x080047a4
 80035d8:	080047c4 	.word	0x080047c4
 80035dc:	08004784 	.word	0x08004784

080035e0 <std>:
 80035e0:	2300      	movs	r3, #0
 80035e2:	b510      	push	{r4, lr}
 80035e4:	4604      	mov	r4, r0
 80035e6:	e9c0 3300 	strd	r3, r3, [r0]
 80035ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035ee:	6083      	str	r3, [r0, #8]
 80035f0:	8181      	strh	r1, [r0, #12]
 80035f2:	6643      	str	r3, [r0, #100]	; 0x64
 80035f4:	81c2      	strh	r2, [r0, #14]
 80035f6:	6183      	str	r3, [r0, #24]
 80035f8:	4619      	mov	r1, r3
 80035fa:	2208      	movs	r2, #8
 80035fc:	305c      	adds	r0, #92	; 0x5c
 80035fe:	f7fe fa25 	bl	8001a4c <memset>
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <std+0x38>)
 8003604:	6224      	str	r4, [r4, #32]
 8003606:	6263      	str	r3, [r4, #36]	; 0x24
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <std+0x3c>)
 800360a:	62a3      	str	r3, [r4, #40]	; 0x28
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <std+0x40>)
 800360e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <std+0x44>)
 8003612:	6323      	str	r3, [r4, #48]	; 0x30
 8003614:	bd10      	pop	{r4, pc}
 8003616:	bf00      	nop
 8003618:	080042e9 	.word	0x080042e9
 800361c:	0800430b 	.word	0x0800430b
 8003620:	08004343 	.word	0x08004343
 8003624:	08004367 	.word	0x08004367

08003628 <_cleanup_r>:
 8003628:	4901      	ldr	r1, [pc, #4]	; (8003630 <_cleanup_r+0x8>)
 800362a:	f000 b8c1 	b.w	80037b0 <_fwalk_reent>
 800362e:	bf00      	nop
 8003630:	08003569 	.word	0x08003569

08003634 <__sfmoreglue>:
 8003634:	b570      	push	{r4, r5, r6, lr}
 8003636:	2568      	movs	r5, #104	; 0x68
 8003638:	1e4a      	subs	r2, r1, #1
 800363a:	4355      	muls	r5, r2
 800363c:	460e      	mov	r6, r1
 800363e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003642:	f7fe fa57 	bl	8001af4 <_malloc_r>
 8003646:	4604      	mov	r4, r0
 8003648:	b140      	cbz	r0, 800365c <__sfmoreglue+0x28>
 800364a:	2100      	movs	r1, #0
 800364c:	e9c0 1600 	strd	r1, r6, [r0]
 8003650:	300c      	adds	r0, #12
 8003652:	60a0      	str	r0, [r4, #8]
 8003654:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003658:	f7fe f9f8 	bl	8001a4c <memset>
 800365c:	4620      	mov	r0, r4
 800365e:	bd70      	pop	{r4, r5, r6, pc}

08003660 <__sfp_lock_acquire>:
 8003660:	4801      	ldr	r0, [pc, #4]	; (8003668 <__sfp_lock_acquire+0x8>)
 8003662:	f000 b8ca 	b.w	80037fa <__retarget_lock_acquire_recursive>
 8003666:	bf00      	nop
 8003668:	20000204 	.word	0x20000204

0800366c <__sfp_lock_release>:
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <__sfp_lock_release+0x8>)
 800366e:	f000 b8c5 	b.w	80037fc <__retarget_lock_release_recursive>
 8003672:	bf00      	nop
 8003674:	20000204 	.word	0x20000204

08003678 <__sinit_lock_acquire>:
 8003678:	4801      	ldr	r0, [pc, #4]	; (8003680 <__sinit_lock_acquire+0x8>)
 800367a:	f000 b8be 	b.w	80037fa <__retarget_lock_acquire_recursive>
 800367e:	bf00      	nop
 8003680:	200001ff 	.word	0x200001ff

08003684 <__sinit_lock_release>:
 8003684:	4801      	ldr	r0, [pc, #4]	; (800368c <__sinit_lock_release+0x8>)
 8003686:	f000 b8b9 	b.w	80037fc <__retarget_lock_release_recursive>
 800368a:	bf00      	nop
 800368c:	200001ff 	.word	0x200001ff

08003690 <__sinit>:
 8003690:	b510      	push	{r4, lr}
 8003692:	4604      	mov	r4, r0
 8003694:	f7ff fff0 	bl	8003678 <__sinit_lock_acquire>
 8003698:	69a3      	ldr	r3, [r4, #24]
 800369a:	b11b      	cbz	r3, 80036a4 <__sinit+0x14>
 800369c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036a0:	f7ff bff0 	b.w	8003684 <__sinit_lock_release>
 80036a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036a8:	6523      	str	r3, [r4, #80]	; 0x50
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <__sinit+0x68>)
 80036ac:	4a13      	ldr	r2, [pc, #76]	; (80036fc <__sinit+0x6c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80036b2:	42a3      	cmp	r3, r4
 80036b4:	bf08      	it	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	4620      	mov	r0, r4
 80036ba:	bf08      	it	eq
 80036bc:	61a3      	streq	r3, [r4, #24]
 80036be:	f000 f81f 	bl	8003700 <__sfp>
 80036c2:	6060      	str	r0, [r4, #4]
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 f81b 	bl	8003700 <__sfp>
 80036ca:	60a0      	str	r0, [r4, #8]
 80036cc:	4620      	mov	r0, r4
 80036ce:	f000 f817 	bl	8003700 <__sfp>
 80036d2:	2200      	movs	r2, #0
 80036d4:	2104      	movs	r1, #4
 80036d6:	60e0      	str	r0, [r4, #12]
 80036d8:	6860      	ldr	r0, [r4, #4]
 80036da:	f7ff ff81 	bl	80035e0 <std>
 80036de:	2201      	movs	r2, #1
 80036e0:	2109      	movs	r1, #9
 80036e2:	68a0      	ldr	r0, [r4, #8]
 80036e4:	f7ff ff7c 	bl	80035e0 <std>
 80036e8:	2202      	movs	r2, #2
 80036ea:	2112      	movs	r1, #18
 80036ec:	68e0      	ldr	r0, [r4, #12]
 80036ee:	f7ff ff77 	bl	80035e0 <std>
 80036f2:	2301      	movs	r3, #1
 80036f4:	61a3      	str	r3, [r4, #24]
 80036f6:	e7d1      	b.n	800369c <__sinit+0xc>
 80036f8:	0800467c 	.word	0x0800467c
 80036fc:	08003629 	.word	0x08003629

08003700 <__sfp>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	4607      	mov	r7, r0
 8003704:	f7ff ffac 	bl	8003660 <__sfp_lock_acquire>
 8003708:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <__sfp+0x84>)
 800370a:	681e      	ldr	r6, [r3, #0]
 800370c:	69b3      	ldr	r3, [r6, #24]
 800370e:	b913      	cbnz	r3, 8003716 <__sfp+0x16>
 8003710:	4630      	mov	r0, r6
 8003712:	f7ff ffbd 	bl	8003690 <__sinit>
 8003716:	3648      	adds	r6, #72	; 0x48
 8003718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800371c:	3b01      	subs	r3, #1
 800371e:	d503      	bpl.n	8003728 <__sfp+0x28>
 8003720:	6833      	ldr	r3, [r6, #0]
 8003722:	b30b      	cbz	r3, 8003768 <__sfp+0x68>
 8003724:	6836      	ldr	r6, [r6, #0]
 8003726:	e7f7      	b.n	8003718 <__sfp+0x18>
 8003728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800372c:	b9d5      	cbnz	r5, 8003764 <__sfp+0x64>
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <__sfp+0x88>)
 8003730:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003734:	60e3      	str	r3, [r4, #12]
 8003736:	6665      	str	r5, [r4, #100]	; 0x64
 8003738:	f000 f85e 	bl	80037f8 <__retarget_lock_init_recursive>
 800373c:	f7ff ff96 	bl	800366c <__sfp_lock_release>
 8003740:	2208      	movs	r2, #8
 8003742:	4629      	mov	r1, r5
 8003744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800374c:	6025      	str	r5, [r4, #0]
 800374e:	61a5      	str	r5, [r4, #24]
 8003750:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003754:	f7fe f97a 	bl	8001a4c <memset>
 8003758:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800375c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003760:	4620      	mov	r0, r4
 8003762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003764:	3468      	adds	r4, #104	; 0x68
 8003766:	e7d9      	b.n	800371c <__sfp+0x1c>
 8003768:	2104      	movs	r1, #4
 800376a:	4638      	mov	r0, r7
 800376c:	f7ff ff62 	bl	8003634 <__sfmoreglue>
 8003770:	4604      	mov	r4, r0
 8003772:	6030      	str	r0, [r6, #0]
 8003774:	2800      	cmp	r0, #0
 8003776:	d1d5      	bne.n	8003724 <__sfp+0x24>
 8003778:	f7ff ff78 	bl	800366c <__sfp_lock_release>
 800377c:	230c      	movs	r3, #12
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	e7ee      	b.n	8003760 <__sfp+0x60>
 8003782:	bf00      	nop
 8003784:	0800467c 	.word	0x0800467c
 8003788:	ffff0001 	.word	0xffff0001

0800378c <fiprintf>:
 800378c:	b40e      	push	{r1, r2, r3}
 800378e:	b503      	push	{r0, r1, lr}
 8003790:	4601      	mov	r1, r0
 8003792:	ab03      	add	r3, sp, #12
 8003794:	4805      	ldr	r0, [pc, #20]	; (80037ac <fiprintf+0x20>)
 8003796:	f853 2b04 	ldr.w	r2, [r3], #4
 800379a:	6800      	ldr	r0, [r0, #0]
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	f000 fc73 	bl	8004088 <_vfiprintf_r>
 80037a2:	b002      	add	sp, #8
 80037a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037a8:	b003      	add	sp, #12
 80037aa:	4770      	bx	lr
 80037ac:	20000000 	.word	0x20000000

080037b0 <_fwalk_reent>:
 80037b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037b4:	4606      	mov	r6, r0
 80037b6:	4688      	mov	r8, r1
 80037b8:	2700      	movs	r7, #0
 80037ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037c2:	f1b9 0901 	subs.w	r9, r9, #1
 80037c6:	d505      	bpl.n	80037d4 <_fwalk_reent+0x24>
 80037c8:	6824      	ldr	r4, [r4, #0]
 80037ca:	2c00      	cmp	r4, #0
 80037cc:	d1f7      	bne.n	80037be <_fwalk_reent+0xe>
 80037ce:	4638      	mov	r0, r7
 80037d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037d4:	89ab      	ldrh	r3, [r5, #12]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d907      	bls.n	80037ea <_fwalk_reent+0x3a>
 80037da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037de:	3301      	adds	r3, #1
 80037e0:	d003      	beq.n	80037ea <_fwalk_reent+0x3a>
 80037e2:	4629      	mov	r1, r5
 80037e4:	4630      	mov	r0, r6
 80037e6:	47c0      	blx	r8
 80037e8:	4307      	orrs	r7, r0
 80037ea:	3568      	adds	r5, #104	; 0x68
 80037ec:	e7e9      	b.n	80037c2 <_fwalk_reent+0x12>
	...

080037f0 <_localeconv_r>:
 80037f0:	4800      	ldr	r0, [pc, #0]	; (80037f4 <_localeconv_r+0x4>)
 80037f2:	4770      	bx	lr
 80037f4:	20000154 	.word	0x20000154

080037f8 <__retarget_lock_init_recursive>:
 80037f8:	4770      	bx	lr

080037fa <__retarget_lock_acquire_recursive>:
 80037fa:	4770      	bx	lr

080037fc <__retarget_lock_release_recursive>:
 80037fc:	4770      	bx	lr

080037fe <__swhatbuf_r>:
 80037fe:	b570      	push	{r4, r5, r6, lr}
 8003800:	460e      	mov	r6, r1
 8003802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003806:	4614      	mov	r4, r2
 8003808:	2900      	cmp	r1, #0
 800380a:	461d      	mov	r5, r3
 800380c:	b096      	sub	sp, #88	; 0x58
 800380e:	da07      	bge.n	8003820 <__swhatbuf_r+0x22>
 8003810:	2300      	movs	r3, #0
 8003812:	602b      	str	r3, [r5, #0]
 8003814:	89b3      	ldrh	r3, [r6, #12]
 8003816:	061a      	lsls	r2, r3, #24
 8003818:	d410      	bmi.n	800383c <__swhatbuf_r+0x3e>
 800381a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800381e:	e00e      	b.n	800383e <__swhatbuf_r+0x40>
 8003820:	466a      	mov	r2, sp
 8003822:	f000 fdcf 	bl	80043c4 <_fstat_r>
 8003826:	2800      	cmp	r0, #0
 8003828:	dbf2      	blt.n	8003810 <__swhatbuf_r+0x12>
 800382a:	9a01      	ldr	r2, [sp, #4]
 800382c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003830:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003834:	425a      	negs	r2, r3
 8003836:	415a      	adcs	r2, r3
 8003838:	602a      	str	r2, [r5, #0]
 800383a:	e7ee      	b.n	800381a <__swhatbuf_r+0x1c>
 800383c:	2340      	movs	r3, #64	; 0x40
 800383e:	2000      	movs	r0, #0
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	b016      	add	sp, #88	; 0x58
 8003844:	bd70      	pop	{r4, r5, r6, pc}
	...

08003848 <__smakebuf_r>:
 8003848:	898b      	ldrh	r3, [r1, #12]
 800384a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800384c:	079d      	lsls	r5, r3, #30
 800384e:	4606      	mov	r6, r0
 8003850:	460c      	mov	r4, r1
 8003852:	d507      	bpl.n	8003864 <__smakebuf_r+0x1c>
 8003854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	6123      	str	r3, [r4, #16]
 800385c:	2301      	movs	r3, #1
 800385e:	6163      	str	r3, [r4, #20]
 8003860:	b002      	add	sp, #8
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	466a      	mov	r2, sp
 8003866:	ab01      	add	r3, sp, #4
 8003868:	f7ff ffc9 	bl	80037fe <__swhatbuf_r>
 800386c:	9900      	ldr	r1, [sp, #0]
 800386e:	4605      	mov	r5, r0
 8003870:	4630      	mov	r0, r6
 8003872:	f7fe f93f 	bl	8001af4 <_malloc_r>
 8003876:	b948      	cbnz	r0, 800388c <__smakebuf_r+0x44>
 8003878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800387c:	059a      	lsls	r2, r3, #22
 800387e:	d4ef      	bmi.n	8003860 <__smakebuf_r+0x18>
 8003880:	f023 0303 	bic.w	r3, r3, #3
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	e7e3      	b.n	8003854 <__smakebuf_r+0xc>
 800388c:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <__smakebuf_r+0x7c>)
 800388e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	6020      	str	r0, [r4, #0]
 8003894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003898:	81a3      	strh	r3, [r4, #12]
 800389a:	9b00      	ldr	r3, [sp, #0]
 800389c:	6120      	str	r0, [r4, #16]
 800389e:	6163      	str	r3, [r4, #20]
 80038a0:	9b01      	ldr	r3, [sp, #4]
 80038a2:	b15b      	cbz	r3, 80038bc <__smakebuf_r+0x74>
 80038a4:	4630      	mov	r0, r6
 80038a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038aa:	f000 fd9d 	bl	80043e8 <_isatty_r>
 80038ae:	b128      	cbz	r0, 80038bc <__smakebuf_r+0x74>
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	81a3      	strh	r3, [r4, #12]
 80038bc:	89a0      	ldrh	r0, [r4, #12]
 80038be:	4305      	orrs	r5, r0
 80038c0:	81a5      	strh	r5, [r4, #12]
 80038c2:	e7cd      	b.n	8003860 <__smakebuf_r+0x18>
 80038c4:	08003629 	.word	0x08003629

080038c8 <memchr>:
 80038c8:	4603      	mov	r3, r0
 80038ca:	b510      	push	{r4, lr}
 80038cc:	b2c9      	uxtb	r1, r1
 80038ce:	4402      	add	r2, r0
 80038d0:	4293      	cmp	r3, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	d101      	bne.n	80038da <memchr+0x12>
 80038d6:	2000      	movs	r0, #0
 80038d8:	e003      	b.n	80038e2 <memchr+0x1a>
 80038da:	7804      	ldrb	r4, [r0, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	428c      	cmp	r4, r1
 80038e0:	d1f6      	bne.n	80038d0 <memchr+0x8>
 80038e2:	bd10      	pop	{r4, pc}

080038e4 <memcpy>:
 80038e4:	440a      	add	r2, r1
 80038e6:	4291      	cmp	r1, r2
 80038e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038ec:	d100      	bne.n	80038f0 <memcpy+0xc>
 80038ee:	4770      	bx	lr
 80038f0:	b510      	push	{r4, lr}
 80038f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038f6:	4291      	cmp	r1, r2
 80038f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038fc:	d1f9      	bne.n	80038f2 <memcpy+0xe>
 80038fe:	bd10      	pop	{r4, pc}

08003900 <__malloc_lock>:
 8003900:	4801      	ldr	r0, [pc, #4]	; (8003908 <__malloc_lock+0x8>)
 8003902:	f7ff bf7a 	b.w	80037fa <__retarget_lock_acquire_recursive>
 8003906:	bf00      	nop
 8003908:	20000200 	.word	0x20000200

0800390c <__malloc_unlock>:
 800390c:	4801      	ldr	r0, [pc, #4]	; (8003914 <__malloc_unlock+0x8>)
 800390e:	f7ff bf75 	b.w	80037fc <__retarget_lock_release_recursive>
 8003912:	bf00      	nop
 8003914:	20000200 	.word	0x20000200

08003918 <_Balloc>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800391c:	4604      	mov	r4, r0
 800391e:	460d      	mov	r5, r1
 8003920:	b976      	cbnz	r6, 8003940 <_Balloc+0x28>
 8003922:	2010      	movs	r0, #16
 8003924:	f7fe f88a 	bl	8001a3c <malloc>
 8003928:	4602      	mov	r2, r0
 800392a:	6260      	str	r0, [r4, #36]	; 0x24
 800392c:	b920      	cbnz	r0, 8003938 <_Balloc+0x20>
 800392e:	2166      	movs	r1, #102	; 0x66
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <_Balloc+0x78>)
 8003932:	4818      	ldr	r0, [pc, #96]	; (8003994 <_Balloc+0x7c>)
 8003934:	f7fe fef6 	bl	8002724 <__assert_func>
 8003938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800393c:	6006      	str	r6, [r0, #0]
 800393e:	60c6      	str	r6, [r0, #12]
 8003940:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003942:	68f3      	ldr	r3, [r6, #12]
 8003944:	b183      	cbz	r3, 8003968 <_Balloc+0x50>
 8003946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800394e:	b9b8      	cbnz	r0, 8003980 <_Balloc+0x68>
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f605 	lsl.w	r6, r1, r5
 8003956:	1d72      	adds	r2, r6, #5
 8003958:	4620      	mov	r0, r4
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	f000 fb5e 	bl	800401c <_calloc_r>
 8003960:	b160      	cbz	r0, 800397c <_Balloc+0x64>
 8003962:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003966:	e00e      	b.n	8003986 <_Balloc+0x6e>
 8003968:	2221      	movs	r2, #33	; 0x21
 800396a:	2104      	movs	r1, #4
 800396c:	4620      	mov	r0, r4
 800396e:	f000 fb55 	bl	800401c <_calloc_r>
 8003972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003974:	60f0      	str	r0, [r6, #12]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e4      	bne.n	8003946 <_Balloc+0x2e>
 800397c:	2000      	movs	r0, #0
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	6802      	ldr	r2, [r0, #0]
 8003982:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003986:	2300      	movs	r3, #0
 8003988:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800398c:	e7f7      	b.n	800397e <_Balloc+0x66>
 800398e:	bf00      	nop
 8003990:	080046fd 	.word	0x080046fd
 8003994:	080047e4 	.word	0x080047e4

08003998 <_Bfree>:
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800399c:	4605      	mov	r5, r0
 800399e:	460c      	mov	r4, r1
 80039a0:	b976      	cbnz	r6, 80039c0 <_Bfree+0x28>
 80039a2:	2010      	movs	r0, #16
 80039a4:	f7fe f84a 	bl	8001a3c <malloc>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6268      	str	r0, [r5, #36]	; 0x24
 80039ac:	b920      	cbnz	r0, 80039b8 <_Bfree+0x20>
 80039ae:	218a      	movs	r1, #138	; 0x8a
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <_Bfree+0x3c>)
 80039b2:	4809      	ldr	r0, [pc, #36]	; (80039d8 <_Bfree+0x40>)
 80039b4:	f7fe feb6 	bl	8002724 <__assert_func>
 80039b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80039bc:	6006      	str	r6, [r0, #0]
 80039be:	60c6      	str	r6, [r0, #12]
 80039c0:	b13c      	cbz	r4, 80039d2 <_Bfree+0x3a>
 80039c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039c4:	6862      	ldr	r2, [r4, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039cc:	6021      	str	r1, [r4, #0]
 80039ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80039d2:	bd70      	pop	{r4, r5, r6, pc}
 80039d4:	080046fd 	.word	0x080046fd
 80039d8:	080047e4 	.word	0x080047e4

080039dc <__multadd>:
 80039dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e0:	4698      	mov	r8, r3
 80039e2:	460c      	mov	r4, r1
 80039e4:	2300      	movs	r3, #0
 80039e6:	690e      	ldr	r6, [r1, #16]
 80039e8:	4607      	mov	r7, r0
 80039ea:	f101 0014 	add.w	r0, r1, #20
 80039ee:	6805      	ldr	r5, [r0, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	b2a9      	uxth	r1, r5
 80039f4:	fb02 8101 	mla	r1, r2, r1, r8
 80039f8:	0c2d      	lsrs	r5, r5, #16
 80039fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80039fe:	fb02 c505 	mla	r5, r2, r5, ip
 8003a02:	b289      	uxth	r1, r1
 8003a04:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003a08:	429e      	cmp	r6, r3
 8003a0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003a0e:	f840 1b04 	str.w	r1, [r0], #4
 8003a12:	dcec      	bgt.n	80039ee <__multadd+0x12>
 8003a14:	f1b8 0f00 	cmp.w	r8, #0
 8003a18:	d022      	beq.n	8003a60 <__multadd+0x84>
 8003a1a:	68a3      	ldr	r3, [r4, #8]
 8003a1c:	42b3      	cmp	r3, r6
 8003a1e:	dc19      	bgt.n	8003a54 <__multadd+0x78>
 8003a20:	6861      	ldr	r1, [r4, #4]
 8003a22:	4638      	mov	r0, r7
 8003a24:	3101      	adds	r1, #1
 8003a26:	f7ff ff77 	bl	8003918 <_Balloc>
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	b928      	cbnz	r0, 8003a3a <__multadd+0x5e>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	21b5      	movs	r1, #181	; 0xb5
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <__multadd+0x8c>)
 8003a34:	480d      	ldr	r0, [pc, #52]	; (8003a6c <__multadd+0x90>)
 8003a36:	f7fe fe75 	bl	8002724 <__assert_func>
 8003a3a:	6922      	ldr	r2, [r4, #16]
 8003a3c:	f104 010c 	add.w	r1, r4, #12
 8003a40:	3202      	adds	r2, #2
 8003a42:	0092      	lsls	r2, r2, #2
 8003a44:	300c      	adds	r0, #12
 8003a46:	f7ff ff4d 	bl	80038e4 <memcpy>
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	f7ff ffa3 	bl	8003998 <_Bfree>
 8003a52:	462c      	mov	r4, r5
 8003a54:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8003a58:	3601      	adds	r6, #1
 8003a5a:	f8c3 8014 	str.w	r8, [r3, #20]
 8003a5e:	6126      	str	r6, [r4, #16]
 8003a60:	4620      	mov	r0, r4
 8003a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a66:	bf00      	nop
 8003a68:	08004773 	.word	0x08004773
 8003a6c:	080047e4 	.word	0x080047e4

08003a70 <__hi0bits>:
 8003a70:	0c02      	lsrs	r2, r0, #16
 8003a72:	0412      	lsls	r2, r2, #16
 8003a74:	4603      	mov	r3, r0
 8003a76:	b9ca      	cbnz	r2, 8003aac <__hi0bits+0x3c>
 8003a78:	0403      	lsls	r3, r0, #16
 8003a7a:	2010      	movs	r0, #16
 8003a7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003a80:	bf04      	itt	eq
 8003a82:	021b      	lsleq	r3, r3, #8
 8003a84:	3008      	addeq	r0, #8
 8003a86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003a8a:	bf04      	itt	eq
 8003a8c:	011b      	lsleq	r3, r3, #4
 8003a8e:	3004      	addeq	r0, #4
 8003a90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003a94:	bf04      	itt	eq
 8003a96:	009b      	lsleq	r3, r3, #2
 8003a98:	3002      	addeq	r0, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	db05      	blt.n	8003aaa <__hi0bits+0x3a>
 8003a9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003aa2:	f100 0001 	add.w	r0, r0, #1
 8003aa6:	bf08      	it	eq
 8003aa8:	2020      	moveq	r0, #32
 8003aaa:	4770      	bx	lr
 8003aac:	2000      	movs	r0, #0
 8003aae:	e7e5      	b.n	8003a7c <__hi0bits+0xc>

08003ab0 <__lo0bits>:
 8003ab0:	6803      	ldr	r3, [r0, #0]
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	f013 0007 	ands.w	r0, r3, #7
 8003ab8:	d00b      	beq.n	8003ad2 <__lo0bits+0x22>
 8003aba:	07d9      	lsls	r1, r3, #31
 8003abc:	d422      	bmi.n	8003b04 <__lo0bits+0x54>
 8003abe:	0798      	lsls	r0, r3, #30
 8003ac0:	bf49      	itett	mi
 8003ac2:	085b      	lsrmi	r3, r3, #1
 8003ac4:	089b      	lsrpl	r3, r3, #2
 8003ac6:	2001      	movmi	r0, #1
 8003ac8:	6013      	strmi	r3, [r2, #0]
 8003aca:	bf5c      	itt	pl
 8003acc:	2002      	movpl	r0, #2
 8003ace:	6013      	strpl	r3, [r2, #0]
 8003ad0:	4770      	bx	lr
 8003ad2:	b299      	uxth	r1, r3
 8003ad4:	b909      	cbnz	r1, 8003ada <__lo0bits+0x2a>
 8003ad6:	2010      	movs	r0, #16
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003ade:	bf04      	itt	eq
 8003ae0:	0a1b      	lsreq	r3, r3, #8
 8003ae2:	3008      	addeq	r0, #8
 8003ae4:	0719      	lsls	r1, r3, #28
 8003ae6:	bf04      	itt	eq
 8003ae8:	091b      	lsreq	r3, r3, #4
 8003aea:	3004      	addeq	r0, #4
 8003aec:	0799      	lsls	r1, r3, #30
 8003aee:	bf04      	itt	eq
 8003af0:	089b      	lsreq	r3, r3, #2
 8003af2:	3002      	addeq	r0, #2
 8003af4:	07d9      	lsls	r1, r3, #31
 8003af6:	d403      	bmi.n	8003b00 <__lo0bits+0x50>
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	f100 0001 	add.w	r0, r0, #1
 8003afe:	d003      	beq.n	8003b08 <__lo0bits+0x58>
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4770      	bx	lr
 8003b04:	2000      	movs	r0, #0
 8003b06:	4770      	bx	lr
 8003b08:	2020      	movs	r0, #32
 8003b0a:	4770      	bx	lr

08003b0c <__i2b>:
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	460c      	mov	r4, r1
 8003b10:	2101      	movs	r1, #1
 8003b12:	f7ff ff01 	bl	8003918 <_Balloc>
 8003b16:	4602      	mov	r2, r0
 8003b18:	b928      	cbnz	r0, 8003b26 <__i2b+0x1a>
 8003b1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003b1e:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <__i2b+0x24>)
 8003b20:	4804      	ldr	r0, [pc, #16]	; (8003b34 <__i2b+0x28>)
 8003b22:	f7fe fdff 	bl	8002724 <__assert_func>
 8003b26:	2301      	movs	r3, #1
 8003b28:	6144      	str	r4, [r0, #20]
 8003b2a:	6103      	str	r3, [r0, #16]
 8003b2c:	bd10      	pop	{r4, pc}
 8003b2e:	bf00      	nop
 8003b30:	08004773 	.word	0x08004773
 8003b34:	080047e4 	.word	0x080047e4

08003b38 <__multiply>:
 8003b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	690a      	ldr	r2, [r1, #16]
 8003b40:	6923      	ldr	r3, [r4, #16]
 8003b42:	460d      	mov	r5, r1
 8003b44:	429a      	cmp	r2, r3
 8003b46:	bfbe      	ittt	lt
 8003b48:	460b      	movlt	r3, r1
 8003b4a:	4625      	movlt	r5, r4
 8003b4c:	461c      	movlt	r4, r3
 8003b4e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8003b52:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003b56:	68ab      	ldr	r3, [r5, #8]
 8003b58:	6869      	ldr	r1, [r5, #4]
 8003b5a:	eb0a 0709 	add.w	r7, sl, r9
 8003b5e:	42bb      	cmp	r3, r7
 8003b60:	b085      	sub	sp, #20
 8003b62:	bfb8      	it	lt
 8003b64:	3101      	addlt	r1, #1
 8003b66:	f7ff fed7 	bl	8003918 <_Balloc>
 8003b6a:	b930      	cbnz	r0, 8003b7a <__multiply+0x42>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	f240 115d 	movw	r1, #349	; 0x15d
 8003b72:	4b41      	ldr	r3, [pc, #260]	; (8003c78 <__multiply+0x140>)
 8003b74:	4841      	ldr	r0, [pc, #260]	; (8003c7c <__multiply+0x144>)
 8003b76:	f7fe fdd5 	bl	8002724 <__assert_func>
 8003b7a:	f100 0614 	add.w	r6, r0, #20
 8003b7e:	4633      	mov	r3, r6
 8003b80:	2200      	movs	r2, #0
 8003b82:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8003b86:	4543      	cmp	r3, r8
 8003b88:	d31e      	bcc.n	8003bc8 <__multiply+0x90>
 8003b8a:	f105 0c14 	add.w	ip, r5, #20
 8003b8e:	f104 0314 	add.w	r3, r4, #20
 8003b92:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003b96:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8003b9a:	9202      	str	r2, [sp, #8]
 8003b9c:	ebac 0205 	sub.w	r2, ip, r5
 8003ba0:	3a15      	subs	r2, #21
 8003ba2:	f022 0203 	bic.w	r2, r2, #3
 8003ba6:	3204      	adds	r2, #4
 8003ba8:	f105 0115 	add.w	r1, r5, #21
 8003bac:	458c      	cmp	ip, r1
 8003bae:	bf38      	it	cc
 8003bb0:	2204      	movcc	r2, #4
 8003bb2:	9201      	str	r2, [sp, #4]
 8003bb4:	9a02      	ldr	r2, [sp, #8]
 8003bb6:	9303      	str	r3, [sp, #12]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d808      	bhi.n	8003bce <__multiply+0x96>
 8003bbc:	2f00      	cmp	r7, #0
 8003bbe:	dc55      	bgt.n	8003c6c <__multiply+0x134>
 8003bc0:	6107      	str	r7, [r0, #16]
 8003bc2:	b005      	add	sp, #20
 8003bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc8:	f843 2b04 	str.w	r2, [r3], #4
 8003bcc:	e7db      	b.n	8003b86 <__multiply+0x4e>
 8003bce:	f8b3 a000 	ldrh.w	sl, [r3]
 8003bd2:	f1ba 0f00 	cmp.w	sl, #0
 8003bd6:	d020      	beq.n	8003c1a <__multiply+0xe2>
 8003bd8:	46b1      	mov	r9, r6
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f105 0e14 	add.w	lr, r5, #20
 8003be0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003be4:	f8d9 b000 	ldr.w	fp, [r9]
 8003be8:	b2a1      	uxth	r1, r4
 8003bea:	fa1f fb8b 	uxth.w	fp, fp
 8003bee:	fb0a b101 	mla	r1, sl, r1, fp
 8003bf2:	4411      	add	r1, r2
 8003bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8003bf8:	0c24      	lsrs	r4, r4, #16
 8003bfa:	0c12      	lsrs	r2, r2, #16
 8003bfc:	fb0a 2404 	mla	r4, sl, r4, r2
 8003c00:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8003c04:	b289      	uxth	r1, r1
 8003c06:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003c0a:	45f4      	cmp	ip, lr
 8003c0c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8003c10:	f849 1b04 	str.w	r1, [r9], #4
 8003c14:	d8e4      	bhi.n	8003be0 <__multiply+0xa8>
 8003c16:	9901      	ldr	r1, [sp, #4]
 8003c18:	5072      	str	r2, [r6, r1]
 8003c1a:	9a03      	ldr	r2, [sp, #12]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003c22:	f1b9 0f00 	cmp.w	r9, #0
 8003c26:	d01f      	beq.n	8003c68 <__multiply+0x130>
 8003c28:	46b6      	mov	lr, r6
 8003c2a:	f04f 0a00 	mov.w	sl, #0
 8003c2e:	6834      	ldr	r4, [r6, #0]
 8003c30:	f105 0114 	add.w	r1, r5, #20
 8003c34:	880a      	ldrh	r2, [r1, #0]
 8003c36:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003c3a:	b2a4      	uxth	r4, r4
 8003c3c:	fb09 b202 	mla	r2, r9, r2, fp
 8003c40:	4492      	add	sl, r2
 8003c42:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8003c46:	f84e 4b04 	str.w	r4, [lr], #4
 8003c4a:	f851 4b04 	ldr.w	r4, [r1], #4
 8003c4e:	f8be 2000 	ldrh.w	r2, [lr]
 8003c52:	0c24      	lsrs	r4, r4, #16
 8003c54:	fb09 2404 	mla	r4, r9, r4, r2
 8003c58:	458c      	cmp	ip, r1
 8003c5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8003c5e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003c62:	d8e7      	bhi.n	8003c34 <__multiply+0xfc>
 8003c64:	9a01      	ldr	r2, [sp, #4]
 8003c66:	50b4      	str	r4, [r6, r2]
 8003c68:	3604      	adds	r6, #4
 8003c6a:	e7a3      	b.n	8003bb4 <__multiply+0x7c>
 8003c6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1a5      	bne.n	8003bc0 <__multiply+0x88>
 8003c74:	3f01      	subs	r7, #1
 8003c76:	e7a1      	b.n	8003bbc <__multiply+0x84>
 8003c78:	08004773 	.word	0x08004773
 8003c7c:	080047e4 	.word	0x080047e4

08003c80 <__pow5mult>:
 8003c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c84:	4615      	mov	r5, r2
 8003c86:	f012 0203 	ands.w	r2, r2, #3
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	460f      	mov	r7, r1
 8003c8e:	d007      	beq.n	8003ca0 <__pow5mult+0x20>
 8003c90:	4c25      	ldr	r4, [pc, #148]	; (8003d28 <__pow5mult+0xa8>)
 8003c92:	3a01      	subs	r2, #1
 8003c94:	2300      	movs	r3, #0
 8003c96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003c9a:	f7ff fe9f 	bl	80039dc <__multadd>
 8003c9e:	4607      	mov	r7, r0
 8003ca0:	10ad      	asrs	r5, r5, #2
 8003ca2:	d03d      	beq.n	8003d20 <__pow5mult+0xa0>
 8003ca4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003ca6:	b97c      	cbnz	r4, 8003cc8 <__pow5mult+0x48>
 8003ca8:	2010      	movs	r0, #16
 8003caa:	f7fd fec7 	bl	8001a3c <malloc>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6270      	str	r0, [r6, #36]	; 0x24
 8003cb2:	b928      	cbnz	r0, 8003cc0 <__pow5mult+0x40>
 8003cb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003cb8:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <__pow5mult+0xac>)
 8003cba:	481d      	ldr	r0, [pc, #116]	; (8003d30 <__pow5mult+0xb0>)
 8003cbc:	f7fe fd32 	bl	8002724 <__assert_func>
 8003cc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003cc4:	6004      	str	r4, [r0, #0]
 8003cc6:	60c4      	str	r4, [r0, #12]
 8003cc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003ccc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003cd0:	b94c      	cbnz	r4, 8003ce6 <__pow5mult+0x66>
 8003cd2:	f240 2171 	movw	r1, #625	; 0x271
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f7ff ff18 	bl	8003b0c <__i2b>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	4604      	mov	r4, r0
 8003ce0:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ce4:	6003      	str	r3, [r0, #0]
 8003ce6:	f04f 0900 	mov.w	r9, #0
 8003cea:	07eb      	lsls	r3, r5, #31
 8003cec:	d50a      	bpl.n	8003d04 <__pow5mult+0x84>
 8003cee:	4639      	mov	r1, r7
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	f7ff ff20 	bl	8003b38 <__multiply>
 8003cf8:	4680      	mov	r8, r0
 8003cfa:	4639      	mov	r1, r7
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f7ff fe4b 	bl	8003998 <_Bfree>
 8003d02:	4647      	mov	r7, r8
 8003d04:	106d      	asrs	r5, r5, #1
 8003d06:	d00b      	beq.n	8003d20 <__pow5mult+0xa0>
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	b938      	cbnz	r0, 8003d1c <__pow5mult+0x9c>
 8003d0c:	4622      	mov	r2, r4
 8003d0e:	4621      	mov	r1, r4
 8003d10:	4630      	mov	r0, r6
 8003d12:	f7ff ff11 	bl	8003b38 <__multiply>
 8003d16:	6020      	str	r0, [r4, #0]
 8003d18:	f8c0 9000 	str.w	r9, [r0]
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	e7e4      	b.n	8003cea <__pow5mult+0x6a>
 8003d20:	4638      	mov	r0, r7
 8003d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d26:	bf00      	nop
 8003d28:	08004938 	.word	0x08004938
 8003d2c:	080046fd 	.word	0x080046fd
 8003d30:	080047e4 	.word	0x080047e4

08003d34 <__lshift>:
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	460c      	mov	r4, r1
 8003d3a:	4607      	mov	r7, r0
 8003d3c:	4691      	mov	r9, r2
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	6849      	ldr	r1, [r1, #4]
 8003d42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003d46:	68a3      	ldr	r3, [r4, #8]
 8003d48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003d4c:	f108 0601 	add.w	r6, r8, #1
 8003d50:	42b3      	cmp	r3, r6
 8003d52:	db0b      	blt.n	8003d6c <__lshift+0x38>
 8003d54:	4638      	mov	r0, r7
 8003d56:	f7ff fddf 	bl	8003918 <_Balloc>
 8003d5a:	4605      	mov	r5, r0
 8003d5c:	b948      	cbnz	r0, 8003d72 <__lshift+0x3e>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <__lshift+0xd0>)
 8003d66:	4828      	ldr	r0, [pc, #160]	; (8003e08 <__lshift+0xd4>)
 8003d68:	f7fe fcdc 	bl	8002724 <__assert_func>
 8003d6c:	3101      	adds	r1, #1
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	e7ee      	b.n	8003d50 <__lshift+0x1c>
 8003d72:	2300      	movs	r3, #0
 8003d74:	f100 0114 	add.w	r1, r0, #20
 8003d78:	f100 0210 	add.w	r2, r0, #16
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	4553      	cmp	r3, sl
 8003d80:	db33      	blt.n	8003dea <__lshift+0xb6>
 8003d82:	6920      	ldr	r0, [r4, #16]
 8003d84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003d88:	f104 0314 	add.w	r3, r4, #20
 8003d8c:	f019 091f 	ands.w	r9, r9, #31
 8003d90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003d94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003d98:	d02b      	beq.n	8003df2 <__lshift+0xbe>
 8003d9a:	468a      	mov	sl, r1
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f1c9 0e20 	rsb	lr, r9, #32
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	fa00 f009 	lsl.w	r0, r0, r9
 8003da8:	4302      	orrs	r2, r0
 8003daa:	f84a 2b04 	str.w	r2, [sl], #4
 8003dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db2:	459c      	cmp	ip, r3
 8003db4:	fa22 f20e 	lsr.w	r2, r2, lr
 8003db8:	d8f3      	bhi.n	8003da2 <__lshift+0x6e>
 8003dba:	ebac 0304 	sub.w	r3, ip, r4
 8003dbe:	3b15      	subs	r3, #21
 8003dc0:	f023 0303 	bic.w	r3, r3, #3
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	f104 0015 	add.w	r0, r4, #21
 8003dca:	4584      	cmp	ip, r0
 8003dcc:	bf38      	it	cc
 8003dce:	2304      	movcc	r3, #4
 8003dd0:	50ca      	str	r2, [r1, r3]
 8003dd2:	b10a      	cbz	r2, 8003dd8 <__lshift+0xa4>
 8003dd4:	f108 0602 	add.w	r6, r8, #2
 8003dd8:	3e01      	subs	r6, #1
 8003dda:	4638      	mov	r0, r7
 8003ddc:	4621      	mov	r1, r4
 8003dde:	612e      	str	r6, [r5, #16]
 8003de0:	f7ff fdda 	bl	8003998 <_Bfree>
 8003de4:	4628      	mov	r0, r5
 8003de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dea:	f842 0f04 	str.w	r0, [r2, #4]!
 8003dee:	3301      	adds	r3, #1
 8003df0:	e7c5      	b.n	8003d7e <__lshift+0x4a>
 8003df2:	3904      	subs	r1, #4
 8003df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003df8:	459c      	cmp	ip, r3
 8003dfa:	f841 2f04 	str.w	r2, [r1, #4]!
 8003dfe:	d8f9      	bhi.n	8003df4 <__lshift+0xc0>
 8003e00:	e7ea      	b.n	8003dd8 <__lshift+0xa4>
 8003e02:	bf00      	nop
 8003e04:	08004773 	.word	0x08004773
 8003e08:	080047e4 	.word	0x080047e4

08003e0c <__mcmp>:
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	690a      	ldr	r2, [r1, #16]
 8003e10:	6900      	ldr	r0, [r0, #16]
 8003e12:	b530      	push	{r4, r5, lr}
 8003e14:	1a80      	subs	r0, r0, r2
 8003e16:	d10d      	bne.n	8003e34 <__mcmp+0x28>
 8003e18:	3314      	adds	r3, #20
 8003e1a:	3114      	adds	r1, #20
 8003e1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003e20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003e24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003e28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003e2c:	4295      	cmp	r5, r2
 8003e2e:	d002      	beq.n	8003e36 <__mcmp+0x2a>
 8003e30:	d304      	bcc.n	8003e3c <__mcmp+0x30>
 8003e32:	2001      	movs	r0, #1
 8003e34:	bd30      	pop	{r4, r5, pc}
 8003e36:	42a3      	cmp	r3, r4
 8003e38:	d3f4      	bcc.n	8003e24 <__mcmp+0x18>
 8003e3a:	e7fb      	b.n	8003e34 <__mcmp+0x28>
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e40:	e7f8      	b.n	8003e34 <__mcmp+0x28>
	...

08003e44 <__mdiff>:
 8003e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e48:	460c      	mov	r4, r1
 8003e4a:	4606      	mov	r6, r0
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4620      	mov	r0, r4
 8003e50:	4692      	mov	sl, r2
 8003e52:	f7ff ffdb 	bl	8003e0c <__mcmp>
 8003e56:	1e05      	subs	r5, r0, #0
 8003e58:	d111      	bne.n	8003e7e <__mdiff+0x3a>
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	f7ff fd5b 	bl	8003918 <_Balloc>
 8003e62:	4602      	mov	r2, r0
 8003e64:	b928      	cbnz	r0, 8003e72 <__mdiff+0x2e>
 8003e66:	f240 2132 	movw	r1, #562	; 0x232
 8003e6a:	4b3c      	ldr	r3, [pc, #240]	; (8003f5c <__mdiff+0x118>)
 8003e6c:	483c      	ldr	r0, [pc, #240]	; (8003f60 <__mdiff+0x11c>)
 8003e6e:	f7fe fc59 	bl	8002724 <__assert_func>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003e78:	4610      	mov	r0, r2
 8003e7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e7e:	bfa4      	itt	ge
 8003e80:	4653      	movge	r3, sl
 8003e82:	46a2      	movge	sl, r4
 8003e84:	4630      	mov	r0, r6
 8003e86:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003e8a:	bfa6      	itte	ge
 8003e8c:	461c      	movge	r4, r3
 8003e8e:	2500      	movge	r5, #0
 8003e90:	2501      	movlt	r5, #1
 8003e92:	f7ff fd41 	bl	8003918 <_Balloc>
 8003e96:	4602      	mov	r2, r0
 8003e98:	b918      	cbnz	r0, 8003ea2 <__mdiff+0x5e>
 8003e9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003e9e:	4b2f      	ldr	r3, [pc, #188]	; (8003f5c <__mdiff+0x118>)
 8003ea0:	e7e4      	b.n	8003e6c <__mdiff+0x28>
 8003ea2:	f100 0814 	add.w	r8, r0, #20
 8003ea6:	f8da 7010 	ldr.w	r7, [sl, #16]
 8003eaa:	60c5      	str	r5, [r0, #12]
 8003eac:	f04f 0c00 	mov.w	ip, #0
 8003eb0:	f10a 0514 	add.w	r5, sl, #20
 8003eb4:	f10a 0010 	add.w	r0, sl, #16
 8003eb8:	46c2      	mov	sl, r8
 8003eba:	6926      	ldr	r6, [r4, #16]
 8003ebc:	f104 0914 	add.w	r9, r4, #20
 8003ec0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8003ec4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003ec8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8003ecc:	f859 3b04 	ldr.w	r3, [r9], #4
 8003ed0:	fa1f f18b 	uxth.w	r1, fp
 8003ed4:	4461      	add	r1, ip
 8003ed6:	fa1f fc83 	uxth.w	ip, r3
 8003eda:	0c1b      	lsrs	r3, r3, #16
 8003edc:	eba1 010c 	sub.w	r1, r1, ip
 8003ee0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003ee4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003ee8:	b289      	uxth	r1, r1
 8003eea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003eee:	454e      	cmp	r6, r9
 8003ef0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003ef4:	f84a 3b04 	str.w	r3, [sl], #4
 8003ef8:	d8e6      	bhi.n	8003ec8 <__mdiff+0x84>
 8003efa:	1b33      	subs	r3, r6, r4
 8003efc:	3b15      	subs	r3, #21
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	3415      	adds	r4, #21
 8003f04:	3304      	adds	r3, #4
 8003f06:	42a6      	cmp	r6, r4
 8003f08:	bf38      	it	cc
 8003f0a:	2304      	movcc	r3, #4
 8003f0c:	441d      	add	r5, r3
 8003f0e:	4443      	add	r3, r8
 8003f10:	461e      	mov	r6, r3
 8003f12:	462c      	mov	r4, r5
 8003f14:	4574      	cmp	r4, lr
 8003f16:	d30e      	bcc.n	8003f36 <__mdiff+0xf2>
 8003f18:	f10e 0103 	add.w	r1, lr, #3
 8003f1c:	1b49      	subs	r1, r1, r5
 8003f1e:	f021 0103 	bic.w	r1, r1, #3
 8003f22:	3d03      	subs	r5, #3
 8003f24:	45ae      	cmp	lr, r5
 8003f26:	bf38      	it	cc
 8003f28:	2100      	movcc	r1, #0
 8003f2a:	4419      	add	r1, r3
 8003f2c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003f30:	b18b      	cbz	r3, 8003f56 <__mdiff+0x112>
 8003f32:	6117      	str	r7, [r2, #16]
 8003f34:	e7a0      	b.n	8003e78 <__mdiff+0x34>
 8003f36:	f854 8b04 	ldr.w	r8, [r4], #4
 8003f3a:	fa1f f188 	uxth.w	r1, r8
 8003f3e:	4461      	add	r1, ip
 8003f40:	1408      	asrs	r0, r1, #16
 8003f42:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8003f46:	b289      	uxth	r1, r1
 8003f48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003f4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003f50:	f846 1b04 	str.w	r1, [r6], #4
 8003f54:	e7de      	b.n	8003f14 <__mdiff+0xd0>
 8003f56:	3f01      	subs	r7, #1
 8003f58:	e7e8      	b.n	8003f2c <__mdiff+0xe8>
 8003f5a:	bf00      	nop
 8003f5c:	08004773 	.word	0x08004773
 8003f60:	080047e4 	.word	0x080047e4

08003f64 <__d2b>:
 8003f64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003f68:	2101      	movs	r1, #1
 8003f6a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8003f6e:	4690      	mov	r8, r2
 8003f70:	461d      	mov	r5, r3
 8003f72:	f7ff fcd1 	bl	8003918 <_Balloc>
 8003f76:	4604      	mov	r4, r0
 8003f78:	b930      	cbnz	r0, 8003f88 <__d2b+0x24>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	f240 310a 	movw	r1, #778	; 0x30a
 8003f80:	4b24      	ldr	r3, [pc, #144]	; (8004014 <__d2b+0xb0>)
 8003f82:	4825      	ldr	r0, [pc, #148]	; (8004018 <__d2b+0xb4>)
 8003f84:	f7fe fbce 	bl	8002724 <__assert_func>
 8003f88:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8003f8c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8003f90:	bb2d      	cbnz	r5, 8003fde <__d2b+0x7a>
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	f1b8 0300 	subs.w	r3, r8, #0
 8003f98:	d026      	beq.n	8003fe8 <__d2b+0x84>
 8003f9a:	4668      	mov	r0, sp
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	f7ff fd87 	bl	8003ab0 <__lo0bits>
 8003fa2:	9900      	ldr	r1, [sp, #0]
 8003fa4:	b1f0      	cbz	r0, 8003fe4 <__d2b+0x80>
 8003fa6:	9a01      	ldr	r2, [sp, #4]
 8003fa8:	f1c0 0320 	rsb	r3, r0, #32
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	40c2      	lsrs	r2, r0
 8003fb4:	6163      	str	r3, [r4, #20]
 8003fb6:	9201      	str	r2, [sp, #4]
 8003fb8:	9b01      	ldr	r3, [sp, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf14      	ite	ne
 8003fbe:	2102      	movne	r1, #2
 8003fc0:	2101      	moveq	r1, #1
 8003fc2:	61a3      	str	r3, [r4, #24]
 8003fc4:	6121      	str	r1, [r4, #16]
 8003fc6:	b1c5      	cbz	r5, 8003ffa <__d2b+0x96>
 8003fc8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003fcc:	4405      	add	r5, r0
 8003fce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003fd2:	603d      	str	r5, [r7, #0]
 8003fd4:	6030      	str	r0, [r6, #0]
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	b002      	add	sp, #8
 8003fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fe2:	e7d6      	b.n	8003f92 <__d2b+0x2e>
 8003fe4:	6161      	str	r1, [r4, #20]
 8003fe6:	e7e7      	b.n	8003fb8 <__d2b+0x54>
 8003fe8:	a801      	add	r0, sp, #4
 8003fea:	f7ff fd61 	bl	8003ab0 <__lo0bits>
 8003fee:	2101      	movs	r1, #1
 8003ff0:	9b01      	ldr	r3, [sp, #4]
 8003ff2:	6121      	str	r1, [r4, #16]
 8003ff4:	6163      	str	r3, [r4, #20]
 8003ff6:	3020      	adds	r0, #32
 8003ff8:	e7e5      	b.n	8003fc6 <__d2b+0x62>
 8003ffa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8003ffe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004002:	6038      	str	r0, [r7, #0]
 8004004:	6918      	ldr	r0, [r3, #16]
 8004006:	f7ff fd33 	bl	8003a70 <__hi0bits>
 800400a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800400e:	6031      	str	r1, [r6, #0]
 8004010:	e7e1      	b.n	8003fd6 <__d2b+0x72>
 8004012:	bf00      	nop
 8004014:	08004773 	.word	0x08004773
 8004018:	080047e4 	.word	0x080047e4

0800401c <_calloc_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	fb02 f501 	mul.w	r5, r2, r1
 8004022:	4629      	mov	r1, r5
 8004024:	f7fd fd66 	bl	8001af4 <_malloc_r>
 8004028:	4604      	mov	r4, r0
 800402a:	b118      	cbz	r0, 8004034 <_calloc_r+0x18>
 800402c:	462a      	mov	r2, r5
 800402e:	2100      	movs	r1, #0
 8004030:	f7fd fd0c 	bl	8001a4c <memset>
 8004034:	4620      	mov	r0, r4
 8004036:	bd38      	pop	{r3, r4, r5, pc}

08004038 <__sfputc_r>:
 8004038:	6893      	ldr	r3, [r2, #8]
 800403a:	b410      	push	{r4}
 800403c:	3b01      	subs	r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	6093      	str	r3, [r2, #8]
 8004042:	da07      	bge.n	8004054 <__sfputc_r+0x1c>
 8004044:	6994      	ldr	r4, [r2, #24]
 8004046:	42a3      	cmp	r3, r4
 8004048:	db01      	blt.n	800404e <__sfputc_r+0x16>
 800404a:	290a      	cmp	r1, #10
 800404c:	d102      	bne.n	8004054 <__sfputc_r+0x1c>
 800404e:	bc10      	pop	{r4}
 8004050:	f7fe baa8 	b.w	80025a4 <__swbuf_r>
 8004054:	6813      	ldr	r3, [r2, #0]
 8004056:	1c58      	adds	r0, r3, #1
 8004058:	6010      	str	r0, [r2, #0]
 800405a:	7019      	strb	r1, [r3, #0]
 800405c:	4608      	mov	r0, r1
 800405e:	bc10      	pop	{r4}
 8004060:	4770      	bx	lr

08004062 <__sfputs_r>:
 8004062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004064:	4606      	mov	r6, r0
 8004066:	460f      	mov	r7, r1
 8004068:	4614      	mov	r4, r2
 800406a:	18d5      	adds	r5, r2, r3
 800406c:	42ac      	cmp	r4, r5
 800406e:	d101      	bne.n	8004074 <__sfputs_r+0x12>
 8004070:	2000      	movs	r0, #0
 8004072:	e007      	b.n	8004084 <__sfputs_r+0x22>
 8004074:	463a      	mov	r2, r7
 8004076:	4630      	mov	r0, r6
 8004078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800407c:	f7ff ffdc 	bl	8004038 <__sfputc_r>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d1f3      	bne.n	800406c <__sfputs_r+0xa>
 8004084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004088 <_vfiprintf_r>:
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	460d      	mov	r5, r1
 800408e:	4614      	mov	r4, r2
 8004090:	4698      	mov	r8, r3
 8004092:	4606      	mov	r6, r0
 8004094:	b09d      	sub	sp, #116	; 0x74
 8004096:	b118      	cbz	r0, 80040a0 <_vfiprintf_r+0x18>
 8004098:	6983      	ldr	r3, [r0, #24]
 800409a:	b90b      	cbnz	r3, 80040a0 <_vfiprintf_r+0x18>
 800409c:	f7ff faf8 	bl	8003690 <__sinit>
 80040a0:	4b89      	ldr	r3, [pc, #548]	; (80042c8 <_vfiprintf_r+0x240>)
 80040a2:	429d      	cmp	r5, r3
 80040a4:	d11b      	bne.n	80040de <_vfiprintf_r+0x56>
 80040a6:	6875      	ldr	r5, [r6, #4]
 80040a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040aa:	07d9      	lsls	r1, r3, #31
 80040ac:	d405      	bmi.n	80040ba <_vfiprintf_r+0x32>
 80040ae:	89ab      	ldrh	r3, [r5, #12]
 80040b0:	059a      	lsls	r2, r3, #22
 80040b2:	d402      	bmi.n	80040ba <_vfiprintf_r+0x32>
 80040b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040b6:	f7ff fba0 	bl	80037fa <__retarget_lock_acquire_recursive>
 80040ba:	89ab      	ldrh	r3, [r5, #12]
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	d501      	bpl.n	80040c4 <_vfiprintf_r+0x3c>
 80040c0:	692b      	ldr	r3, [r5, #16]
 80040c2:	b9eb      	cbnz	r3, 8004100 <_vfiprintf_r+0x78>
 80040c4:	4629      	mov	r1, r5
 80040c6:	4630      	mov	r0, r6
 80040c8:	f7fe fabe 	bl	8002648 <__swsetup_r>
 80040cc:	b1c0      	cbz	r0, 8004100 <_vfiprintf_r+0x78>
 80040ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040d0:	07dc      	lsls	r4, r3, #31
 80040d2:	d50e      	bpl.n	80040f2 <_vfiprintf_r+0x6a>
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295
 80040d8:	b01d      	add	sp, #116	; 0x74
 80040da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040de:	4b7b      	ldr	r3, [pc, #492]	; (80042cc <_vfiprintf_r+0x244>)
 80040e0:	429d      	cmp	r5, r3
 80040e2:	d101      	bne.n	80040e8 <_vfiprintf_r+0x60>
 80040e4:	68b5      	ldr	r5, [r6, #8]
 80040e6:	e7df      	b.n	80040a8 <_vfiprintf_r+0x20>
 80040e8:	4b79      	ldr	r3, [pc, #484]	; (80042d0 <_vfiprintf_r+0x248>)
 80040ea:	429d      	cmp	r5, r3
 80040ec:	bf08      	it	eq
 80040ee:	68f5      	ldreq	r5, [r6, #12]
 80040f0:	e7da      	b.n	80040a8 <_vfiprintf_r+0x20>
 80040f2:	89ab      	ldrh	r3, [r5, #12]
 80040f4:	0598      	lsls	r0, r3, #22
 80040f6:	d4ed      	bmi.n	80040d4 <_vfiprintf_r+0x4c>
 80040f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040fa:	f7ff fb7f 	bl	80037fc <__retarget_lock_release_recursive>
 80040fe:	e7e9      	b.n	80040d4 <_vfiprintf_r+0x4c>
 8004100:	2300      	movs	r3, #0
 8004102:	9309      	str	r3, [sp, #36]	; 0x24
 8004104:	2320      	movs	r3, #32
 8004106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800410a:	2330      	movs	r3, #48	; 0x30
 800410c:	f04f 0901 	mov.w	r9, #1
 8004110:	f8cd 800c 	str.w	r8, [sp, #12]
 8004114:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80042d4 <_vfiprintf_r+0x24c>
 8004118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800411c:	4623      	mov	r3, r4
 800411e:	469a      	mov	sl, r3
 8004120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004124:	b10a      	cbz	r2, 800412a <_vfiprintf_r+0xa2>
 8004126:	2a25      	cmp	r2, #37	; 0x25
 8004128:	d1f9      	bne.n	800411e <_vfiprintf_r+0x96>
 800412a:	ebba 0b04 	subs.w	fp, sl, r4
 800412e:	d00b      	beq.n	8004148 <_vfiprintf_r+0xc0>
 8004130:	465b      	mov	r3, fp
 8004132:	4622      	mov	r2, r4
 8004134:	4629      	mov	r1, r5
 8004136:	4630      	mov	r0, r6
 8004138:	f7ff ff93 	bl	8004062 <__sfputs_r>
 800413c:	3001      	adds	r0, #1
 800413e:	f000 80aa 	beq.w	8004296 <_vfiprintf_r+0x20e>
 8004142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004144:	445a      	add	r2, fp
 8004146:	9209      	str	r2, [sp, #36]	; 0x24
 8004148:	f89a 3000 	ldrb.w	r3, [sl]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80a2 	beq.w	8004296 <_vfiprintf_r+0x20e>
 8004152:	2300      	movs	r3, #0
 8004154:	f04f 32ff 	mov.w	r2, #4294967295
 8004158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800415c:	f10a 0a01 	add.w	sl, sl, #1
 8004160:	9304      	str	r3, [sp, #16]
 8004162:	9307      	str	r3, [sp, #28]
 8004164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004168:	931a      	str	r3, [sp, #104]	; 0x68
 800416a:	4654      	mov	r4, sl
 800416c:	2205      	movs	r2, #5
 800416e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004172:	4858      	ldr	r0, [pc, #352]	; (80042d4 <_vfiprintf_r+0x24c>)
 8004174:	f7ff fba8 	bl	80038c8 <memchr>
 8004178:	9a04      	ldr	r2, [sp, #16]
 800417a:	b9d8      	cbnz	r0, 80041b4 <_vfiprintf_r+0x12c>
 800417c:	06d1      	lsls	r1, r2, #27
 800417e:	bf44      	itt	mi
 8004180:	2320      	movmi	r3, #32
 8004182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004186:	0713      	lsls	r3, r2, #28
 8004188:	bf44      	itt	mi
 800418a:	232b      	movmi	r3, #43	; 0x2b
 800418c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004190:	f89a 3000 	ldrb.w	r3, [sl]
 8004194:	2b2a      	cmp	r3, #42	; 0x2a
 8004196:	d015      	beq.n	80041c4 <_vfiprintf_r+0x13c>
 8004198:	4654      	mov	r4, sl
 800419a:	2000      	movs	r0, #0
 800419c:	f04f 0c0a 	mov.w	ip, #10
 80041a0:	9a07      	ldr	r2, [sp, #28]
 80041a2:	4621      	mov	r1, r4
 80041a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041a8:	3b30      	subs	r3, #48	; 0x30
 80041aa:	2b09      	cmp	r3, #9
 80041ac:	d94e      	bls.n	800424c <_vfiprintf_r+0x1c4>
 80041ae:	b1b0      	cbz	r0, 80041de <_vfiprintf_r+0x156>
 80041b0:	9207      	str	r2, [sp, #28]
 80041b2:	e014      	b.n	80041de <_vfiprintf_r+0x156>
 80041b4:	eba0 0308 	sub.w	r3, r0, r8
 80041b8:	fa09 f303 	lsl.w	r3, r9, r3
 80041bc:	4313      	orrs	r3, r2
 80041be:	46a2      	mov	sl, r4
 80041c0:	9304      	str	r3, [sp, #16]
 80041c2:	e7d2      	b.n	800416a <_vfiprintf_r+0xe2>
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	1d19      	adds	r1, r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	9103      	str	r1, [sp, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bfbb      	ittet	lt
 80041d0:	425b      	neglt	r3, r3
 80041d2:	f042 0202 	orrlt.w	r2, r2, #2
 80041d6:	9307      	strge	r3, [sp, #28]
 80041d8:	9307      	strlt	r3, [sp, #28]
 80041da:	bfb8      	it	lt
 80041dc:	9204      	strlt	r2, [sp, #16]
 80041de:	7823      	ldrb	r3, [r4, #0]
 80041e0:	2b2e      	cmp	r3, #46	; 0x2e
 80041e2:	d10c      	bne.n	80041fe <_vfiprintf_r+0x176>
 80041e4:	7863      	ldrb	r3, [r4, #1]
 80041e6:	2b2a      	cmp	r3, #42	; 0x2a
 80041e8:	d135      	bne.n	8004256 <_vfiprintf_r+0x1ce>
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	3402      	adds	r4, #2
 80041ee:	1d1a      	adds	r2, r3, #4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	9203      	str	r2, [sp, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bfb8      	it	lt
 80041f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80041fc:	9305      	str	r3, [sp, #20]
 80041fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80042e4 <_vfiprintf_r+0x25c>
 8004202:	2203      	movs	r2, #3
 8004204:	4650      	mov	r0, sl
 8004206:	7821      	ldrb	r1, [r4, #0]
 8004208:	f7ff fb5e 	bl	80038c8 <memchr>
 800420c:	b140      	cbz	r0, 8004220 <_vfiprintf_r+0x198>
 800420e:	2340      	movs	r3, #64	; 0x40
 8004210:	eba0 000a 	sub.w	r0, r0, sl
 8004214:	fa03 f000 	lsl.w	r0, r3, r0
 8004218:	9b04      	ldr	r3, [sp, #16]
 800421a:	3401      	adds	r4, #1
 800421c:	4303      	orrs	r3, r0
 800421e:	9304      	str	r3, [sp, #16]
 8004220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004224:	2206      	movs	r2, #6
 8004226:	482c      	ldr	r0, [pc, #176]	; (80042d8 <_vfiprintf_r+0x250>)
 8004228:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800422c:	f7ff fb4c 	bl	80038c8 <memchr>
 8004230:	2800      	cmp	r0, #0
 8004232:	d03f      	beq.n	80042b4 <_vfiprintf_r+0x22c>
 8004234:	4b29      	ldr	r3, [pc, #164]	; (80042dc <_vfiprintf_r+0x254>)
 8004236:	bb1b      	cbnz	r3, 8004280 <_vfiprintf_r+0x1f8>
 8004238:	9b03      	ldr	r3, [sp, #12]
 800423a:	3307      	adds	r3, #7
 800423c:	f023 0307 	bic.w	r3, r3, #7
 8004240:	3308      	adds	r3, #8
 8004242:	9303      	str	r3, [sp, #12]
 8004244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004246:	443b      	add	r3, r7
 8004248:	9309      	str	r3, [sp, #36]	; 0x24
 800424a:	e767      	b.n	800411c <_vfiprintf_r+0x94>
 800424c:	460c      	mov	r4, r1
 800424e:	2001      	movs	r0, #1
 8004250:	fb0c 3202 	mla	r2, ip, r2, r3
 8004254:	e7a5      	b.n	80041a2 <_vfiprintf_r+0x11a>
 8004256:	2300      	movs	r3, #0
 8004258:	f04f 0c0a 	mov.w	ip, #10
 800425c:	4619      	mov	r1, r3
 800425e:	3401      	adds	r4, #1
 8004260:	9305      	str	r3, [sp, #20]
 8004262:	4620      	mov	r0, r4
 8004264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004268:	3a30      	subs	r2, #48	; 0x30
 800426a:	2a09      	cmp	r2, #9
 800426c:	d903      	bls.n	8004276 <_vfiprintf_r+0x1ee>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0c5      	beq.n	80041fe <_vfiprintf_r+0x176>
 8004272:	9105      	str	r1, [sp, #20]
 8004274:	e7c3      	b.n	80041fe <_vfiprintf_r+0x176>
 8004276:	4604      	mov	r4, r0
 8004278:	2301      	movs	r3, #1
 800427a:	fb0c 2101 	mla	r1, ip, r1, r2
 800427e:	e7f0      	b.n	8004262 <_vfiprintf_r+0x1da>
 8004280:	ab03      	add	r3, sp, #12
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	462a      	mov	r2, r5
 8004286:	4630      	mov	r0, r6
 8004288:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <_vfiprintf_r+0x258>)
 800428a:	a904      	add	r1, sp, #16
 800428c:	f7fd fd2a 	bl	8001ce4 <_printf_float>
 8004290:	4607      	mov	r7, r0
 8004292:	1c78      	adds	r0, r7, #1
 8004294:	d1d6      	bne.n	8004244 <_vfiprintf_r+0x1bc>
 8004296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004298:	07d9      	lsls	r1, r3, #31
 800429a:	d405      	bmi.n	80042a8 <_vfiprintf_r+0x220>
 800429c:	89ab      	ldrh	r3, [r5, #12]
 800429e:	059a      	lsls	r2, r3, #22
 80042a0:	d402      	bmi.n	80042a8 <_vfiprintf_r+0x220>
 80042a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042a4:	f7ff faaa 	bl	80037fc <__retarget_lock_release_recursive>
 80042a8:	89ab      	ldrh	r3, [r5, #12]
 80042aa:	065b      	lsls	r3, r3, #25
 80042ac:	f53f af12 	bmi.w	80040d4 <_vfiprintf_r+0x4c>
 80042b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042b2:	e711      	b.n	80040d8 <_vfiprintf_r+0x50>
 80042b4:	ab03      	add	r3, sp, #12
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	462a      	mov	r2, r5
 80042ba:	4630      	mov	r0, r6
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <_vfiprintf_r+0x258>)
 80042be:	a904      	add	r1, sp, #16
 80042c0:	f7fd ffac 	bl	800221c <_printf_i>
 80042c4:	e7e4      	b.n	8004290 <_vfiprintf_r+0x208>
 80042c6:	bf00      	nop
 80042c8:	080047a4 	.word	0x080047a4
 80042cc:	080047c4 	.word	0x080047c4
 80042d0:	08004784 	.word	0x08004784
 80042d4:	08004944 	.word	0x08004944
 80042d8:	0800494e 	.word	0x0800494e
 80042dc:	08001ce5 	.word	0x08001ce5
 80042e0:	08004063 	.word	0x08004063
 80042e4:	0800494a 	.word	0x0800494a

080042e8 <__sread>:
 80042e8:	b510      	push	{r4, lr}
 80042ea:	460c      	mov	r4, r1
 80042ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f0:	f000 f8ae 	bl	8004450 <_read_r>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	bfab      	itete	ge
 80042f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042fa:	89a3      	ldrhlt	r3, [r4, #12]
 80042fc:	181b      	addge	r3, r3, r0
 80042fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004302:	bfac      	ite	ge
 8004304:	6563      	strge	r3, [r4, #84]	; 0x54
 8004306:	81a3      	strhlt	r3, [r4, #12]
 8004308:	bd10      	pop	{r4, pc}

0800430a <__swrite>:
 800430a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800430e:	461f      	mov	r7, r3
 8004310:	898b      	ldrh	r3, [r1, #12]
 8004312:	4605      	mov	r5, r0
 8004314:	05db      	lsls	r3, r3, #23
 8004316:	460c      	mov	r4, r1
 8004318:	4616      	mov	r6, r2
 800431a:	d505      	bpl.n	8004328 <__swrite+0x1e>
 800431c:	2302      	movs	r3, #2
 800431e:	2200      	movs	r2, #0
 8004320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004324:	f000 f870 	bl	8004408 <_lseek_r>
 8004328:	89a3      	ldrh	r3, [r4, #12]
 800432a:	4632      	mov	r2, r6
 800432c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004330:	81a3      	strh	r3, [r4, #12]
 8004332:	4628      	mov	r0, r5
 8004334:	463b      	mov	r3, r7
 8004336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800433a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800433e:	f000 b817 	b.w	8004370 <_write_r>

08004342 <__sseek>:
 8004342:	b510      	push	{r4, lr}
 8004344:	460c      	mov	r4, r1
 8004346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434a:	f000 f85d 	bl	8004408 <_lseek_r>
 800434e:	1c43      	adds	r3, r0, #1
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	bf15      	itete	ne
 8004354:	6560      	strne	r0, [r4, #84]	; 0x54
 8004356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800435a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800435e:	81a3      	strheq	r3, [r4, #12]
 8004360:	bf18      	it	ne
 8004362:	81a3      	strhne	r3, [r4, #12]
 8004364:	bd10      	pop	{r4, pc}

08004366 <__sclose>:
 8004366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800436a:	f000 b81b 	b.w	80043a4 <_close_r>
	...

08004370 <_write_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4604      	mov	r4, r0
 8004374:	4608      	mov	r0, r1
 8004376:	4611      	mov	r1, r2
 8004378:	2200      	movs	r2, #0
 800437a:	4d05      	ldr	r5, [pc, #20]	; (8004390 <_write_r+0x20>)
 800437c:	602a      	str	r2, [r5, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	f7fc febd 	bl	80010fe <_write>
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	d102      	bne.n	800438e <_write_r+0x1e>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	b103      	cbz	r3, 800438e <_write_r+0x1e>
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	bd38      	pop	{r3, r4, r5, pc}
 8004390:	20000208 	.word	0x20000208

08004394 <abort>:
 8004394:	2006      	movs	r0, #6
 8004396:	b508      	push	{r3, lr}
 8004398:	f000 f894 	bl	80044c4 <raise>
 800439c:	2001      	movs	r0, #1
 800439e:	f000 f901 	bl	80045a4 <_exit>
	...

080043a4 <_close_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	2300      	movs	r3, #0
 80043a8:	4d05      	ldr	r5, [pc, #20]	; (80043c0 <_close_r+0x1c>)
 80043aa:	4604      	mov	r4, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	602b      	str	r3, [r5, #0]
 80043b0:	f000 f8b2 	bl	8004518 <_close>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_close_r+0x1a>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b103      	cbz	r3, 80043be <_close_r+0x1a>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	20000208 	.word	0x20000208

080043c4 <_fstat_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	2300      	movs	r3, #0
 80043c8:	4d06      	ldr	r5, [pc, #24]	; (80043e4 <_fstat_r+0x20>)
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	f000 f8a9 	bl	8004528 <_fstat>
 80043d6:	1c43      	adds	r3, r0, #1
 80043d8:	d102      	bne.n	80043e0 <_fstat_r+0x1c>
 80043da:	682b      	ldr	r3, [r5, #0]
 80043dc:	b103      	cbz	r3, 80043e0 <_fstat_r+0x1c>
 80043de:	6023      	str	r3, [r4, #0]
 80043e0:	bd38      	pop	{r3, r4, r5, pc}
 80043e2:	bf00      	nop
 80043e4:	20000208 	.word	0x20000208

080043e8 <_isatty_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	2300      	movs	r3, #0
 80043ec:	4d05      	ldr	r5, [pc, #20]	; (8004404 <_isatty_r+0x1c>)
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	f000 f8a8 	bl	8004548 <_isatty>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d102      	bne.n	8004402 <_isatty_r+0x1a>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	b103      	cbz	r3, 8004402 <_isatty_r+0x1a>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	20000208 	.word	0x20000208

08004408 <_lseek_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4604      	mov	r4, r0
 800440c:	4608      	mov	r0, r1
 800440e:	4611      	mov	r1, r2
 8004410:	2200      	movs	r2, #0
 8004412:	4d05      	ldr	r5, [pc, #20]	; (8004428 <_lseek_r+0x20>)
 8004414:	602a      	str	r2, [r5, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	f000 f8a6 	bl	8004568 <_lseek>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d102      	bne.n	8004426 <_lseek_r+0x1e>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b103      	cbz	r3, 8004426 <_lseek_r+0x1e>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	bd38      	pop	{r3, r4, r5, pc}
 8004428:	20000208 	.word	0x20000208

0800442c <__ascii_mbtowc>:
 800442c:	b082      	sub	sp, #8
 800442e:	b901      	cbnz	r1, 8004432 <__ascii_mbtowc+0x6>
 8004430:	a901      	add	r1, sp, #4
 8004432:	b142      	cbz	r2, 8004446 <__ascii_mbtowc+0x1a>
 8004434:	b14b      	cbz	r3, 800444a <__ascii_mbtowc+0x1e>
 8004436:	7813      	ldrb	r3, [r2, #0]
 8004438:	600b      	str	r3, [r1, #0]
 800443a:	7812      	ldrb	r2, [r2, #0]
 800443c:	1e10      	subs	r0, r2, #0
 800443e:	bf18      	it	ne
 8004440:	2001      	movne	r0, #1
 8004442:	b002      	add	sp, #8
 8004444:	4770      	bx	lr
 8004446:	4610      	mov	r0, r2
 8004448:	e7fb      	b.n	8004442 <__ascii_mbtowc+0x16>
 800444a:	f06f 0001 	mvn.w	r0, #1
 800444e:	e7f8      	b.n	8004442 <__ascii_mbtowc+0x16>

08004450 <_read_r>:
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	4604      	mov	r4, r0
 8004454:	4608      	mov	r0, r1
 8004456:	4611      	mov	r1, r2
 8004458:	2200      	movs	r2, #0
 800445a:	4d05      	ldr	r5, [pc, #20]	; (8004470 <_read_r+0x20>)
 800445c:	602a      	str	r2, [r5, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	f000 f88a 	bl	8004578 <_read>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d102      	bne.n	800446e <_read_r+0x1e>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	b103      	cbz	r3, 800446e <_read_r+0x1e>
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	20000208 	.word	0x20000208

08004474 <_raise_r>:
 8004474:	291f      	cmp	r1, #31
 8004476:	b538      	push	{r3, r4, r5, lr}
 8004478:	4604      	mov	r4, r0
 800447a:	460d      	mov	r5, r1
 800447c:	d904      	bls.n	8004488 <_raise_r+0x14>
 800447e:	2316      	movs	r3, #22
 8004480:	6003      	str	r3, [r0, #0]
 8004482:	f04f 30ff 	mov.w	r0, #4294967295
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800448a:	b112      	cbz	r2, 8004492 <_raise_r+0x1e>
 800448c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004490:	b94b      	cbnz	r3, 80044a6 <_raise_r+0x32>
 8004492:	4620      	mov	r0, r4
 8004494:	f000 f830 	bl	80044f8 <_getpid_r>
 8004498:	462a      	mov	r2, r5
 800449a:	4601      	mov	r1, r0
 800449c:	4620      	mov	r0, r4
 800449e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044a2:	f000 b817 	b.w	80044d4 <_kill_r>
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d00a      	beq.n	80044c0 <_raise_r+0x4c>
 80044aa:	1c59      	adds	r1, r3, #1
 80044ac:	d103      	bne.n	80044b6 <_raise_r+0x42>
 80044ae:	2316      	movs	r3, #22
 80044b0:	6003      	str	r3, [r0, #0]
 80044b2:	2001      	movs	r0, #1
 80044b4:	e7e7      	b.n	8004486 <_raise_r+0x12>
 80044b6:	2400      	movs	r4, #0
 80044b8:	4628      	mov	r0, r5
 80044ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80044be:	4798      	blx	r3
 80044c0:	2000      	movs	r0, #0
 80044c2:	e7e0      	b.n	8004486 <_raise_r+0x12>

080044c4 <raise>:
 80044c4:	4b02      	ldr	r3, [pc, #8]	; (80044d0 <raise+0xc>)
 80044c6:	4601      	mov	r1, r0
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f7ff bfd3 	b.w	8004474 <_raise_r>
 80044ce:	bf00      	nop
 80044d0:	20000000 	.word	0x20000000

080044d4 <_kill_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	2300      	movs	r3, #0
 80044d8:	4d06      	ldr	r5, [pc, #24]	; (80044f4 <_kill_r+0x20>)
 80044da:	4604      	mov	r4, r0
 80044dc:	4608      	mov	r0, r1
 80044de:	4611      	mov	r1, r2
 80044e0:	602b      	str	r3, [r5, #0]
 80044e2:	f000 f839 	bl	8004558 <_kill>
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	d102      	bne.n	80044f0 <_kill_r+0x1c>
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	b103      	cbz	r3, 80044f0 <_kill_r+0x1c>
 80044ee:	6023      	str	r3, [r4, #0]
 80044f0:	bd38      	pop	{r3, r4, r5, pc}
 80044f2:	bf00      	nop
 80044f4:	20000208 	.word	0x20000208

080044f8 <_getpid_r>:
 80044f8:	f000 b81e 	b.w	8004538 <_getpid>

080044fc <__ascii_wctomb>:
 80044fc:	4603      	mov	r3, r0
 80044fe:	4608      	mov	r0, r1
 8004500:	b141      	cbz	r1, 8004514 <__ascii_wctomb+0x18>
 8004502:	2aff      	cmp	r2, #255	; 0xff
 8004504:	d904      	bls.n	8004510 <__ascii_wctomb+0x14>
 8004506:	228a      	movs	r2, #138	; 0x8a
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	4770      	bx	lr
 8004510:	2001      	movs	r0, #1
 8004512:	700a      	strb	r2, [r1, #0]
 8004514:	4770      	bx	lr
	...

08004518 <_close>:
 8004518:	2258      	movs	r2, #88	; 0x58
 800451a:	4b02      	ldr	r3, [pc, #8]	; (8004524 <_close+0xc>)
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	4770      	bx	lr
 8004524:	20000208 	.word	0x20000208

08004528 <_fstat>:
 8004528:	2258      	movs	r2, #88	; 0x58
 800452a:	4b02      	ldr	r3, [pc, #8]	; (8004534 <_fstat+0xc>)
 800452c:	f04f 30ff 	mov.w	r0, #4294967295
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	4770      	bx	lr
 8004534:	20000208 	.word	0x20000208

08004538 <_getpid>:
 8004538:	2258      	movs	r2, #88	; 0x58
 800453a:	4b02      	ldr	r3, [pc, #8]	; (8004544 <_getpid+0xc>)
 800453c:	f04f 30ff 	mov.w	r0, #4294967295
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	4770      	bx	lr
 8004544:	20000208 	.word	0x20000208

08004548 <_isatty>:
 8004548:	2258      	movs	r2, #88	; 0x58
 800454a:	4b02      	ldr	r3, [pc, #8]	; (8004554 <_isatty+0xc>)
 800454c:	2000      	movs	r0, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000208 	.word	0x20000208

08004558 <_kill>:
 8004558:	2258      	movs	r2, #88	; 0x58
 800455a:	4b02      	ldr	r3, [pc, #8]	; (8004564 <_kill+0xc>)
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	4770      	bx	lr
 8004564:	20000208 	.word	0x20000208

08004568 <_lseek>:
 8004568:	2258      	movs	r2, #88	; 0x58
 800456a:	4b02      	ldr	r3, [pc, #8]	; (8004574 <_lseek+0xc>)
 800456c:	f04f 30ff 	mov.w	r0, #4294967295
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	4770      	bx	lr
 8004574:	20000208 	.word	0x20000208

08004578 <_read>:
 8004578:	2258      	movs	r2, #88	; 0x58
 800457a:	4b02      	ldr	r3, [pc, #8]	; (8004584 <_read+0xc>)
 800457c:	f04f 30ff 	mov.w	r0, #4294967295
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	4770      	bx	lr
 8004584:	20000208 	.word	0x20000208

08004588 <_sbrk>:
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <_sbrk+0x14>)
 800458a:	4602      	mov	r2, r0
 800458c:	6819      	ldr	r1, [r3, #0]
 800458e:	b909      	cbnz	r1, 8004594 <_sbrk+0xc>
 8004590:	4903      	ldr	r1, [pc, #12]	; (80045a0 <_sbrk+0x18>)
 8004592:	6019      	str	r1, [r3, #0]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	4402      	add	r2, r0
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	4770      	bx	lr
 800459c:	200001f8 	.word	0x200001f8
 80045a0:	20000210 	.word	0x20000210

080045a4 <_exit>:
 80045a4:	e7fe      	b.n	80045a4 <_exit>
	...

080045a8 <_init>:
 80045a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045aa:	bf00      	nop
 80045ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ae:	bc08      	pop	{r3}
 80045b0:	469e      	mov	lr, r3
 80045b2:	4770      	bx	lr

080045b4 <_fini>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	bf00      	nop
 80045b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ba:	bc08      	pop	{r3}
 80045bc:	469e      	mov	lr, r3
 80045be:	4770      	bx	lr
