
0_LFR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004210  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08004320  08004320  00014320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004704  08004704  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08004704  08004704  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004704  08004704  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800470c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200001d0  080048dc  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080048dc  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b35  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015bd  00000000  00000000  00028d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e8  00000000  00000000  0002a2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000340  00000000  00000000  0002a6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001777  00000000  00000000  0002aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000068c0  00000000  00000000  0002c18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005eee7  00000000  00000000  00032a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00091936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec0  00000000  00000000  0009198c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0009384c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00093918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004308 	.word	0x08004308

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	08004308 	.word	0x08004308

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
//osThreadId WriteIOHandle;
//void ReadIRSensorHandler(void const *argument);
//void WriteIOHandler(void const *argument);

int main()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  // Configure 64MHz clock
  rcc_config();
 8000a8c:	f000 fc82 	bl	8001394 <rcc_config>
  systick_config();
 8000a90:	f000 fd06 	bl	80014a0 <systick_config>
  gpio_config();
 8000a94:	f000 fc1c 	bl	80012d0 <gpio_config>
  tim_config();
 8000a98:	f000 fe9c 	bl	80017d4 <tim_config>
  adc_config();
 8000a9c:	f000 fa3e 	bl	8000f1c <adc_config>
  dma_config(adcValue);
 8000aa0:	4822      	ldr	r0, [pc, #136]	; (8000b2c <main+0xa4>)
 8000aa2:	f000 fb87 	bl	80011b4 <dma_config>

  mode = 1;
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <main+0xa8>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
//
//  // Start scheduler
//  osKernelStart();
  while(1)
  {
    if(tcFlag)
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <main+0xac>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0fb      	beq.n	8000aac <main+0x24>
    {
      // Clear flag
      tcFlag = false;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <main+0xac>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
      // Get and sort analog value
      sensorValue[9] =  adcValue[0] & 0x0000FFFF;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <main+0xa4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <main+0xb0>)
 8000ac2:	825a      	strh	r2, [r3, #18]
      sensorValue[8] = (adcValue[0] & 0xFFFF0000) >> 16;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <main+0xa4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	0c1b      	lsrs	r3, r3, #16
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <main+0xb0>)
 8000ace:	821a      	strh	r2, [r3, #16]
      sensorValue[6] =  adcValue[1] & 0x0000FFFF;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <main+0xa4>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <main+0xb0>)
 8000ad8:	819a      	strh	r2, [r3, #12]
      sensorValue[3] = (adcValue[1] & 0xFFFF0000) >> 16;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <main+0xa4>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	0c1b      	lsrs	r3, r3, #16
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <main+0xb0>)
 8000ae4:	80da      	strh	r2, [r3, #6]
      sensorValue[5] =  adcValue[2] & 0x0000FFFF;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <main+0xa4>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <main+0xb0>)
 8000aee:	815a      	strh	r2, [r3, #10]
      sensorValue[7] = (adcValue[2] & 0xFFFF0000) >> 16;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <main+0xa4>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	0c1b      	lsrs	r3, r3, #16
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <main+0xb0>)
 8000afa:	81da      	strh	r2, [r3, #14]
      sensorValue[4] =  adcValue[3] & 0x0000FFFF;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <main+0xa4>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <main+0xb0>)
 8000b04:	811a      	strh	r2, [r3, #8]
      sensorValue[2] = (adcValue[3] & 0xFFFF0000) >> 16;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <main+0xa4>)
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	0c1b      	lsrs	r3, r3, #16
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <main+0xb0>)
 8000b10:	809a      	strh	r2, [r3, #4]
      sensorValue[0] =  adcValue[4] & 0x0000FFFF;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <main+0xa4>)
 8000b14:	691b      	ldr	r3, [r3, #16]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <main+0xb0>)
 8000b1a:	801a      	strh	r2, [r3, #0]
      sensorValue[1] = (adcValue[4] & 0xFFFF0000) >> 16;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <main+0xa4>)
 8000b1e:	691b      	ldr	r3, [r3, #16]
 8000b20:	0c1b      	lsrs	r3, r3, #16
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <main+0xb0>)
 8000b26:	805a      	strh	r2, [r3, #2]
    if(tcFlag)
 8000b28:	e7c0      	b.n	8000aac <main+0x24>
 8000b2a:	bf00      	nop
 8000b2c:	200002cc 	.word	0x200002cc
 8000b30:	200002b6 	.word	0x200002b6
 8000b34:	200002a0 	.word	0x200002a0
 8000b38:	200002b8 	.word	0x200002b8

08000b3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b085      	sub	sp, #20
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	6892      	ldr	r2, [r2, #8]
 8000ba4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	6852      	ldr	r2, [r2, #4]
 8000bae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d103      	bne.n	8000bc2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	1e5a      	subs	r2, r3, #1
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000bea:	4b51      	ldr	r3, [pc, #324]	; (8000d30 <xTaskIncrementTick+0x150>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 808d 	bne.w	8000d0e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000bf4:	4b4f      	ldr	r3, [pc, #316]	; (8000d34 <xTaskIncrementTick+0x154>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000bfc:	4a4d      	ldr	r2, [pc, #308]	; (8000d34 <xTaskIncrementTick+0x154>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d120      	bne.n	8000c4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8000c08:	4b4b      	ldr	r3, [pc, #300]	; (8000d38 <xTaskIncrementTick+0x158>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00a      	beq.n	8000c28 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c16:	f383 8811 	msr	BASEPRI, r3
 8000c1a:	f3bf 8f6f 	isb	sy
 8000c1e:	f3bf 8f4f 	dsb	sy
 8000c22:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000c24:	bf00      	nop
 8000c26:	e7fe      	b.n	8000c26 <xTaskIncrementTick+0x46>
 8000c28:	4b43      	ldr	r3, [pc, #268]	; (8000d38 <xTaskIncrementTick+0x158>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b43      	ldr	r3, [pc, #268]	; (8000d3c <xTaskIncrementTick+0x15c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a41      	ldr	r2, [pc, #260]	; (8000d38 <xTaskIncrementTick+0x158>)
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4a41      	ldr	r2, [pc, #260]	; (8000d3c <xTaskIncrementTick+0x15c>)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <xTaskIncrementTick+0x160>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	4a3f      	ldr	r2, [pc, #252]	; (8000d40 <xTaskIncrementTick+0x160>)
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	f000 f8e3 	bl	8000e10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000c4a:	4b3e      	ldr	r3, [pc, #248]	; (8000d44 <xTaskIncrementTick+0x164>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d34d      	bcc.n	8000cf0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c54:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <xTaskIncrementTick+0x158>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <xTaskIncrementTick+0x82>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e000      	b.n	8000c64 <xTaskIncrementTick+0x84>
 8000c62:	2300      	movs	r3, #0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d004      	beq.n	8000c72 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c68:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <xTaskIncrementTick+0x164>)
 8000c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6e:	601a      	str	r2, [r3, #0]
					break;
 8000c70:	e03e      	b.n	8000cf0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000c72:	4b31      	ldr	r3, [pc, #196]	; (8000d38 <xTaskIncrementTick+0x158>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d203      	bcs.n	8000c92 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000c8a:	4a2e      	ldr	r2, [pc, #184]	; (8000d44 <xTaskIncrementTick+0x164>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6013      	str	r3, [r2, #0]
						break;
 8000c90:	e02e      	b.n	8000cf0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	3304      	adds	r3, #4
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff79 	bl	8000b8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d004      	beq.n	8000cae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3318      	adds	r3, #24
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff70 	bl	8000b8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <xTaskIncrementTick+0x168>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	4a22      	ldr	r2, [pc, #136]	; (8000d48 <xTaskIncrementTick+0x168>)
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <xTaskIncrementTick+0x16c>)
 8000cce:	441a      	add	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	f7ff ff36 	bl	8000b48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <xTaskIncrementTick+0x170>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d3b4      	bcc.n	8000c54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8000cea:	2301      	movs	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000cee:	e7b1      	b.n	8000c54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <xTaskIncrementTick+0x170>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf6:	4915      	ldr	r1, [pc, #84]	; (8000d4c <xTaskIncrementTick+0x16c>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	440b      	add	r3, r1
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d907      	bls.n	8000d18 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	e004      	b.n	8000d18 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <xTaskIncrementTick+0x174>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3301      	adds	r3, #1
 8000d14:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <xTaskIncrementTick+0x174>)
 8000d16:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <xTaskIncrementTick+0x178>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8000d20:	2301      	movs	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000d24:	697b      	ldr	r3, [r7, #20]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000029c 	.word	0x2000029c
 8000d34:	20000284 	.word	0x20000284
 8000d38:	2000027c 	.word	0x2000027c
 8000d3c:	20000280 	.word	0x20000280
 8000d40:	20000294 	.word	0x20000294
 8000d44:	20000298 	.word	0x20000298
 8000d48:	20000288 	.word	0x20000288
 8000d4c:	200001f0 	.word	0x200001f0
 8000d50:	200001ec 	.word	0x200001ec
 8000d54:	2000028c 	.word	0x2000028c
 8000d58:	20000290 	.word	0x20000290

08000d5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <vTaskSwitchContext+0xa0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000d6a:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <vTaskSwitchContext+0xa4>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000d70:	e03f      	b.n	8000df2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8000d72:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <vTaskSwitchContext+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <vTaskSwitchContext+0xa8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	fab3 f383 	clz	r3, r3
 8000d84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	f1c3 031f 	rsb	r3, r3, #31
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	491e      	ldr	r1, [pc, #120]	; (8000e08 <vTaskSwitchContext+0xac>)
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10a      	bne.n	8000db8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8000da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da6:	f383 8811 	msr	BASEPRI, r3
 8000daa:	f3bf 8f6f 	isb	sy
 8000dae:	f3bf 8f4f 	dsb	sy
 8000db2:	607b      	str	r3, [r7, #4]
}
 8000db4:	bf00      	nop
 8000db6:	e7fe      	b.n	8000db6 <vTaskSwitchContext+0x5a>
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <vTaskSwitchContext+0xac>)
 8000dc4:	4413      	add	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	3308      	adds	r3, #8
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d104      	bne.n	8000de8 <vTaskSwitchContext+0x8c>
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <vTaskSwitchContext+0xb0>)
 8000df0:	6013      	str	r3, [r2, #0]
}
 8000df2:	bf00      	nop
 8000df4:	371c      	adds	r7, #28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	2000029c 	.word	0x2000029c
 8000e00:	20000290 	.word	0x20000290
 8000e04:	20000288 	.word	0x20000288
 8000e08:	200001f0 	.word	0x200001f0
 8000e0c:	200001ec 	.word	0x200001ec

08000e10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <prvResetNextTaskUnblockTime+0x40>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <prvResetNextTaskUnblockTime+0x14>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <prvResetNextTaskUnblockTime+0x16>
 8000e24:	2300      	movs	r3, #0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d004      	beq.n	8000e34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <prvResetNextTaskUnblockTime+0x44>)
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000e32:	e008      	b.n	8000e46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <prvResetNextTaskUnblockTime+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <prvResetNextTaskUnblockTime+0x44>)
 8000e44:	6013      	str	r3, [r2, #0]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	2000027c 	.word	0x2000027c
 8000e54:	20000298 	.word	0x20000298
	...

08000e60 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <pxCurrentTCBConst2>)
 8000e62:	6819      	ldr	r1, [r3, #0]
 8000e64:	6808      	ldr	r0, [r1, #0]
 8000e66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e6a:	f380 8809 	msr	PSP, r0
 8000e6e:	f3bf 8f6f 	isb	sy
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	f380 8811 	msr	BASEPRI, r0
 8000e7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000e7e:	4770      	bx	lr

08000e80 <pxCurrentTCBConst2>:
 8000e80:	200001ec 	.word	0x200001ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
	...

08000e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000e90:	f3ef 8009 	mrs	r0, PSP
 8000e94:	f3bf 8f6f 	isb	sy
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <pxCurrentTCBConst>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ea0:	6010      	str	r0, [r2, #0]
 8000ea2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000ea6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000eaa:	f380 8811 	msr	BASEPRI, r0
 8000eae:	f7ff ff55 	bl	8000d5c <vTaskSwitchContext>
 8000eb2:	f04f 0000 	mov.w	r0, #0
 8000eb6:	f380 8811 	msr	BASEPRI, r0
 8000eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	6808      	ldr	r0, [r1, #0]
 8000ec2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ec6:	f380 8809 	msr	PSP, r0
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	4770      	bx	lr

08000ed0 <pxCurrentTCBConst>:
 8000ed0:	200001ec 	.word	0x200001ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop

08000ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	__asm volatile
 8000ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee2:	f383 8811 	msr	BASEPRI, r3
 8000ee6:	f3bf 8f6f 	isb	sy
 8000eea:	f3bf 8f4f 	dsb	sy
 8000eee:	607b      	str	r3, [r7, #4]
}
 8000ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000ef2:	f7ff fe75 	bl	8000be0 <xTaskIncrementTick>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SysTick_Handler+0x40>)
 8000efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	e000ed04 	.word	0xe000ed04

08000f1c <adc_config>:

/**
 * @brief ADC1 and ADC2 configuration
 */
void adc_config()
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  // Enable clocks
  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN | RCC_APB2ENR_ADC2EN;
 8000f20:	4b6b      	ldr	r3, [pc, #428]	; (80010d0 <adc_config+0x1b4>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a6a      	ldr	r2, [pc, #424]	; (80010d0 <adc_config+0x1b4>)
 8000f26:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000f2a:	6193      	str	r3, [r2, #24]
  // Right alignment
  ADC1->CR2 &= ~(ADC_CR2_ALIGN);
 8000f2c:	4b69      	ldr	r3, [pc, #420]	; (80010d4 <adc_config+0x1b8>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	4a68      	ldr	r2, [pc, #416]	; (80010d4 <adc_config+0x1b8>)
 8000f32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f36:	6093      	str	r3, [r2, #8]
  ADC2->CR2 &= ~(ADC_CR2_ALIGN);
 8000f38:	4b67      	ldr	r3, [pc, #412]	; (80010d8 <adc_config+0x1bc>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	4a66      	ldr	r2, [pc, #408]	; (80010d8 <adc_config+0x1bc>)
 8000f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f42:	6093      	str	r3, [r2, #8]
  // Continuous conversion mode
  ADC1->CR2 |= ADC_CR2_CONT;
 8000f44:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <adc_config+0x1b8>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	4a62      	ldr	r2, [pc, #392]	; (80010d4 <adc_config+0x1b8>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_CONT;
 8000f50:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <adc_config+0x1bc>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	4a60      	ldr	r2, [pc, #384]	; (80010d8 <adc_config+0x1bc>)
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	6093      	str	r3, [r2, #8]
  // Software trigger
  ADC1->CR2 |= ADC_CR2_EXTSEL;
 8000f5c:	4b5d      	ldr	r3, [pc, #372]	; (80010d4 <adc_config+0x1b8>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	4a5c      	ldr	r2, [pc, #368]	; (80010d4 <adc_config+0x1b8>)
 8000f62:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000f66:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_EXTSEL;
 8000f68:	4b5b      	ldr	r3, [pc, #364]	; (80010d8 <adc_config+0x1bc>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	4a5a      	ldr	r2, [pc, #360]	; (80010d8 <adc_config+0x1bc>)
 8000f6e:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000f72:	6093      	str	r3, [r2, #8]
  // Set all sample time to 239.5 cycles
  // Sample time = (12.5 + 239.5)*6/64MHz = 23.625us
  ADC1->SMPR2 |= ADC_SMPR2_SMP0 | ADC_SMPR2_SMP1 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP3 | ADC_SMPR2_SMP8;
 8000f74:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <adc_config+0x1b8>)
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	4956      	ldr	r1, [pc, #344]	; (80010d4 <adc_config+0x1b8>)
 8000f7a:	4b58      	ldr	r3, [pc, #352]	; (80010dc <adc_config+0x1c0>)
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	610b      	str	r3, [r1, #16]
  ADC2->SMPR2 |= ADC_SMPR2_SMP4 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP6 | ADC_SMPR2_SMP7 | ADC_SMPR2_SMP9;
 8000f80:	4b55      	ldr	r3, [pc, #340]	; (80010d8 <adc_config+0x1bc>)
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	4954      	ldr	r1, [pc, #336]	; (80010d8 <adc_config+0x1bc>)
 8000f86:	4b56      	ldr	r3, [pc, #344]	; (80010e0 <adc_config+0x1c4>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	610b      	str	r3, [r1, #16]
  // Number of conversion = 5 for each ADC
  ADC1->SQR1 &= ~(ADC_SQR1_L);
 8000f8c:	4b51      	ldr	r3, [pc, #324]	; (80010d4 <adc_config+0x1b8>)
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	4a50      	ldr	r2, [pc, #320]	; (80010d4 <adc_config+0x1b8>)
 8000f92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000f96:	62d3      	str	r3, [r2, #44]	; 0x2c
  ADC1->SQR1 |= ADC_SQR1_L_2;
 8000f98:	4b4e      	ldr	r3, [pc, #312]	; (80010d4 <adc_config+0x1b8>)
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	4a4d      	ldr	r2, [pc, #308]	; (80010d4 <adc_config+0x1b8>)
 8000f9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
  ADC2->SQR1 &= ~(ADC_SQR1_L);
 8000fa4:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <adc_config+0x1bc>)
 8000fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa8:	4a4b      	ldr	r2, [pc, #300]	; (80010d8 <adc_config+0x1bc>)
 8000faa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000fae:	62d3      	str	r3, [r2, #44]	; 0x2c
  ADC2->SQR1 |= ADC_SQR1_L_2;
 8000fb0:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <adc_config+0x1bc>)
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	4a48      	ldr	r2, [pc, #288]	; (80010d8 <adc_config+0x1bc>)
 8000fb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fba:	62d3      	str	r3, [r2, #44]	; 0x2c
  // Sequencer
  ADC1->SQR3 = 0;
 8000fbc:	4b45      	ldr	r3, [pc, #276]	; (80010d4 <adc_config+0x1b8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
  ADC2->SQR3 = 0;
 8000fc2:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <adc_config+0x1bc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34
  // ADC1: Rank 1 - Channel0, Rank 2 - Channel1, Rank 3 - Channel2, Rank 4 - Channel3, Rank 5 - Channel8
  ADC1->SQR3 |= (0UL << 0U) | (1UL << 5U) | (2UL << 10U) | (3UL << 15U) | (8UL << 20U);
 8000fc8:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <adc_config+0x1b8>)
 8000fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fcc:	4941      	ldr	r1, [pc, #260]	; (80010d4 <adc_config+0x1b8>)
 8000fce:	4b45      	ldr	r3, [pc, #276]	; (80010e4 <adc_config+0x1c8>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	634b      	str	r3, [r1, #52]	; 0x34
  // ADC2: Rank 1 - Channel4, Rank 2 - Channel5, Rank 3 - Channel6, Rank 4 - Channel7, Rank 5 - Channel9
  ADC2->SQR3 |= (4UL << 0U) | (5UL << 5U) | (6UL << 10U) | (7UL << 15U) | (9UL << 20U);
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <adc_config+0x1bc>)
 8000fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd8:	493f      	ldr	r1, [pc, #252]	; (80010d8 <adc_config+0x1bc>)
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <adc_config+0x1cc>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	634b      	str	r3, [r1, #52]	; 0x34
  // Enable scan mode
  ADC1->CR1 |= ADC_CR1_SCAN;
 8000fe0:	4b3c      	ldr	r3, [pc, #240]	; (80010d4 <adc_config+0x1b8>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <adc_config+0x1b8>)
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fea:	6053      	str	r3, [r2, #4]
  ADC2->CR1 |= ADC_CR1_SCAN;
 8000fec:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <adc_config+0x1bc>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	4a39      	ldr	r2, [pc, #228]	; (80010d8 <adc_config+0x1bc>)
 8000ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff6:	6053      	str	r3, [r2, #4]
  // Enable DMA - ADC registers
  ADC1->CR2 |= ADC_CR2_DMA;
 8000ff8:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <adc_config+0x1b8>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a35      	ldr	r2, [pc, #212]	; (80010d4 <adc_config+0x1b8>)
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001002:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_DMA;
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <adc_config+0x1bc>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	4a33      	ldr	r2, [pc, #204]	; (80010d8 <adc_config+0x1bc>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100e:	6093      	str	r3, [r2, #8]
  // Power up ADC
  ADC1->CR2 |= ADC_CR2_ADON;
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <adc_config+0x1b8>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4a2f      	ldr	r2, [pc, #188]	; (80010d4 <adc_config+0x1b8>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_ADON;
 800101c:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <adc_config+0x1bc>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a2d      	ldr	r2, [pc, #180]	; (80010d8 <adc_config+0x1bc>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6093      	str	r3, [r2, #8]
  // Wait for ADC to stabilize by calibrate it
  ADC1->CR2 |= ADC_CR2_RSTCAL;
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <adc_config+0x1b8>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <adc_config+0x1b8>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_RSTCAL;
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <adc_config+0x1bc>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <adc_config+0x1bc>)
 800103a:	f043 0308 	orr.w	r3, r3, #8
 800103e:	6093      	str	r3, [r2, #8]
  while((ADC1->CR2 & ADC_CR2_RSTCAL) || (ADC2->CR2 & ADC_CR2_RSTCAL));
 8001040:	bf00      	nop
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <adc_config+0x1b8>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f9      	bne.n	8001042 <adc_config+0x126>
 800104e:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <adc_config+0x1bc>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f3      	bne.n	8001042 <adc_config+0x126>
  ADC1->CR2 |= ADC_CR2_CAL;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <adc_config+0x1b8>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <adc_config+0x1b8>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_CAL;
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <adc_config+0x1bc>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <adc_config+0x1bc>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6093      	str	r3, [r2, #8]
  while((ADC1->CR2 & ADC_CR2_CAL) || (ADC2->CR2 & ADC_CR2_CAL));
 8001072:	bf00      	nop
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <adc_config+0x1b8>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f9      	bne.n	8001074 <adc_config+0x158>
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <adc_config+0x1bc>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f3      	bne.n	8001074 <adc_config+0x158>
  // Clear SR
  ADC1->SR = 0;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <adc_config+0x1b8>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
  ADC2->SR = 0;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <adc_config+0x1bc>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
  // Generate software start
  ADC1->CR2 |= ADC_CR2_SWSTART;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <adc_config+0x1b8>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <adc_config+0x1b8>)
 800109e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010a2:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_SWSTART;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <adc_config+0x1bc>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <adc_config+0x1bc>)
 80010aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ae:	6093      	str	r3, [r2, #8]
  ADC1->CR2 |= ADC_CR2_ADON;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <adc_config+0x1b8>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <adc_config+0x1b8>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6093      	str	r3, [r2, #8]
  ADC2->CR2 |= ADC_CR2_ADON;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <adc_config+0x1bc>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <adc_config+0x1bc>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6093      	str	r3, [r2, #8]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40012400 	.word	0x40012400
 80010d8:	40012800 	.word	0x40012800
 80010dc:	07000fff 	.word	0x07000fff
 80010e0:	38fff000 	.word	0x38fff000
 80010e4:	00818820 	.word	0x00818820
 80010e8:	009398a4 	.word	0x009398a4

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4906      	ldr	r1, [pc, #24]	; (8001120 <__NVIC_EnableIRQ+0x34>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0c      	blt.n	8001150 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_ClearPendingIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	3360      	adds	r3, #96	; 0x60
 800114c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <dma_config>:

/**
 * @brief DMA configuration
 */
void dma_config(uint32_t *pADCBuffer)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  // DMA1 - Channel1
  // Enable DMA1 clock
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80011bc:	4b33      	ldr	r3, [pc, #204]	; (800128c <dma_config+0xd8>)
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	4a32      	ldr	r2, [pc, #200]	; (800128c <dma_config+0xd8>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6153      	str	r3, [r2, #20]
  // Clear DMA1 - Channel1 status flags
  DMA1->IFCR |= 0xFUL;
 80011c8:	4b31      	ldr	r3, [pc, #196]	; (8001290 <dma_config+0xdc>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a30      	ldr	r2, [pc, #192]	; (8001290 <dma_config+0xdc>)
 80011ce:	f043 030f 	orr.w	r3, r3, #15
 80011d2:	6053      	str	r3, [r2, #4]
  // Peripherals address (src)
  DMA1_Channel1->CPAR = (uint32_t)(&(ADC1->DR));
 80011d4:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <dma_config+0xe0>)
 80011d6:	4a30      	ldr	r2, [pc, #192]	; (8001298 <dma_config+0xe4>)
 80011d8:	609a      	str	r2, [r3, #8]
  // Memory address (dst)
  DMA1_Channel1->CMAR = (uint32_t)pADCBuffer;
 80011da:	4a2e      	ldr	r2, [pc, #184]	; (8001294 <dma_config+0xe0>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	60d3      	str	r3, [r2, #12]
  // Number of transfer
  DMA1_Channel1->CNDTR = 5UL;
 80011e0:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <dma_config+0xe0>)
 80011e2:	2205      	movs	r2, #5
 80011e4:	605a      	str	r2, [r3, #4]
  // Disable M2M mode
  DMA1_Channel1->CCR &= ~(DMA_CCR_MEM2MEM);
 80011e6:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <dma_config+0xe0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a2a      	ldr	r2, [pc, #168]	; (8001294 <dma_config+0xe0>)
 80011ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011f0:	6013      	str	r3, [r2, #0]
  // Set channel priority low
  DMA1_Channel1->CCR &= ~(DMA_CCR_PL);
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <dma_config+0xe0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a27      	ldr	r2, [pc, #156]	; (8001294 <dma_config+0xe0>)
 80011f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011fc:	6013      	str	r3, [r2, #0]
  // Circular/normal mode
  DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 80011fe:	4b25      	ldr	r3, [pc, #148]	; (8001294 <dma_config+0xe0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a24      	ldr	r2, [pc, #144]	; (8001294 <dma_config+0xe0>)
 8001204:	f043 0320 	orr.w	r3, r3, #32
 8001208:	6013      	str	r3, [r2, #0]
  // Enable memory increment
  DMA1_Channel1->CCR |= DMA_CCR_MINC;
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <dma_config+0xe0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a21      	ldr	r2, [pc, #132]	; (8001294 <dma_config+0xe0>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	6013      	str	r3, [r2, #0]
  // Disable peripheral increment
  DMA1_Channel1->CCR &= ~(DMA_CCR_PINC);
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <dma_config+0xe0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <dma_config+0xe0>)
 800121c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001220:	6013      	str	r3, [r2, #0]
  // Peripherals 32-bit
  DMA1_Channel1->CCR &= ~(DMA_CCR_PSIZE);
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <dma_config+0xe0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <dma_config+0xe0>)
 8001228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800122c:	6013      	str	r3, [r2, #0]
  DMA1_Channel1->CCR |= DMA_CCR_PSIZE_1;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <dma_config+0xe0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <dma_config+0xe0>)
 8001234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001238:	6013      	str	r3, [r2, #0]
  // Memory 32-bit
  DMA1_Channel1->CCR &= ~(DMA_CCR_MSIZE);
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <dma_config+0xe0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <dma_config+0xe0>)
 8001240:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001244:	6013      	str	r3, [r2, #0]
  DMA1_Channel1->CCR |= DMA_CCR_MSIZE_1;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <dma_config+0xe0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <dma_config+0xe0>)
 800124c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001250:	6013      	str	r3, [r2, #0]
  // Direction = src -> dst
  DMA1_Channel1->CCR &= ~(DMA_CCR_DIR);
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <dma_config+0xe0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <dma_config+0xe0>)
 8001258:	f023 0310 	bic.w	r3, r3, #16
 800125c:	6013      	str	r3, [r2, #0]
  // Enable DMA
  DMA1_Channel1->CCR |= DMA_CCR_EN;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <dma_config+0xe0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <dma_config+0xe0>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6013      	str	r3, [r2, #0]
  // Enable transfer complete interrupt of DMA
  DMA1_Channel1->CCR |= DMA_CCR_TCIE;
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <dma_config+0xe0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <dma_config+0xe0>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6013      	str	r3, [r2, #0]

  // NVIC configuration
  NVIC_SetPriority(DMA1_Channel1_IRQn, 1);
 8001276:	2101      	movs	r1, #1
 8001278:	200b      	movs	r0, #11
 800127a:	f7ff ff71 	bl	8001160 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800127e:	200b      	movs	r0, #11
 8001280:	f7ff ff34 	bl	80010ec <__NVIC_EnableIRQ>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	40020000 	.word	0x40020000
 8001294:	40020008 	.word	0x40020008
 8001298:	4001244c 	.word	0x4001244c

0800129c <DMA1_Channel1_IRQHandler>:

// DMA transfer complete interrupt
void DMA1_Channel1_IRQHandler()
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  if(DMA1->ISR & DMA_ISR_TCIF1)
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <DMA1_Channel1_IRQHandler+0x2c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00b      	beq.n	80012c4 <DMA1_Channel1_IRQHandler+0x28>
  {
    // Clear flags
    NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 80012ac:	200b      	movs	r0, #11
 80012ae:	f7ff ff39 	bl	8001124 <__NVIC_ClearPendingIRQ>
    DMA1->IFCR |= DMA_IFCR_CTCIF1;
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <DMA1_Channel1_IRQHandler+0x2c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <DMA1_Channel1_IRQHandler+0x2c>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6053      	str	r3, [r2, #4]
    tcFlag = true;
 80012be:	4b03      	ldr	r3, [pc, #12]	; (80012cc <DMA1_Channel1_IRQHandler+0x30>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
  }
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40020000 	.word	0x40020000
 80012cc:	200002a0 	.word	0x200002a0

080012d0 <gpio_config>:

/**
 * @brief GPIO configuration
 */
void gpio_config()
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  // Enable clocks
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <gpio_config+0x48>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <gpio_config+0x48>)
 80012da:	f043 031d 	orr.w	r3, r3, #29
 80012de:	6193      	str	r3, [r2, #24]
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <gpio_config+0x48>)
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <gpio_config+0x48>)
 80012e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ea:	61d3      	str	r3, [r2, #28]
  // Remap
  AFIO->MAPR = 0x07000102UL;
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <gpio_config+0x4c>)
 80012ee:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <gpio_config+0x50>)
 80012f0:	605a      	str	r2, [r3, #4]


  GPIOA->CRL = 0x00000000;
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <gpio_config+0x54>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
  GPIOA->CRH = 0xA8822222;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <gpio_config+0x54>)
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <gpio_config+0x58>)
 80012fc:	605a      	str	r2, [r3, #4]
  GPIOB->CRL = 0xAA44A400;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <gpio_config+0x5c>)
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <gpio_config+0x60>)
 8001302:	601a      	str	r2, [r3, #0]
  GPIOB->CRH = 0x222242DD;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <gpio_config+0x5c>)
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <gpio_config+0x64>)
 8001308:	605a      	str	r2, [r3, #4]
  GPIOC->CRH = 0x44244444;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <gpio_config+0x68>)
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <gpio_config+0x6c>)
 800130e:	605a      	str	r2, [r3, #4]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000
 800131c:	40010000 	.word	0x40010000
 8001320:	07000102 	.word	0x07000102
 8001324:	40010800 	.word	0x40010800
 8001328:	a8822222 	.word	0xa8822222
 800132c:	40010c00 	.word	0x40010c00
 8001330:	aa44a400 	.word	0xaa44a400
 8001334:	222242dd 	.word	0x222242dd
 8001338:	40011000 	.word	0x40011000
 800133c:	44244444 	.word	0x44244444

08001340 <__NVIC_SetPriority>:
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <rcc_config>:

/**
 * @brief RCC configuration
 */
void rcc_config()
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* PLL Configuration */
  // Set bitfields [21:18] -> PLL_M = 16
  RCC->CFGR |= RCC_CFGR_PLLMULL;
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <rcc_config+0x104>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a3e      	ldr	r2, [pc, #248]	; (8001498 <rcc_config+0x104>)
 800139e:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 80013a2:	6053      	str	r3, [r2, #4]
  // USB Divider
  RCC->CFGR &= ~(RCC_CFGR_USBPRE);
 80013a4:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <rcc_config+0x104>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a3b      	ldr	r2, [pc, #236]	; (8001498 <rcc_config+0x104>)
 80013aa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013ae:	6053      	str	r3, [r2, #4]

  /* HSI Oscillator */
  // Enable HSI Oscillator
  RCC->CR |= RCC_CR_HSION;
 80013b0:	4b39      	ldr	r3, [pc, #228]	; (8001498 <rcc_config+0x104>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a38      	ldr	r2, [pc, #224]	; (8001498 <rcc_config+0x104>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]
  // Wait for it to stabilize
  while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80013bc:	bf00      	nop
 80013be:	4b36      	ldr	r3, [pc, #216]	; (8001498 <rcc_config+0x104>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f9      	beq.n	80013be <rcc_config+0x2a>
  // Select HSI as PLL source
  RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <rcc_config+0x104>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a32      	ldr	r2, [pc, #200]	; (8001498 <rcc_config+0x104>)
 80013d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d4:	6053      	str	r3, [r2, #4]
  // Enable PLL
  RCC->CR |= RCC_CR_PLLON;
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <rcc_config+0x104>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a2f      	ldr	r2, [pc, #188]	; (8001498 <rcc_config+0x104>)
 80013dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013e0:	6013      	str	r3, [r2, #0]
  // Wait for PLL ready
  while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80013e2:	bf00      	nop
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <rcc_config+0x104>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f9      	beq.n	80013e4 <rcc_config+0x50>

  // Flash prefetch and wait state
  // Clear latency fields
  FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <rcc_config+0x108>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a29      	ldr	r2, [pc, #164]	; (800149c <rcc_config+0x108>)
 80013f6:	f023 0307 	bic.w	r3, r3, #7
 80013fa:	6013      	str	r3, [r2, #0]
  // 2 wait state for 64MHz
  FLASH->ACR |= FLASH_ACR_LATENCY_1;
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <rcc_config+0x108>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <rcc_config+0x108>)
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	6013      	str	r3, [r2, #0]
  // Enable prefetch buffer
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <rcc_config+0x108>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a23      	ldr	r2, [pc, #140]	; (800149c <rcc_config+0x108>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6013      	str	r3, [r2, #0]

  // Select system clock
  // Clear SW bits
  RCC->CFGR &= ~(RCC_CFGR_SW);
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <rcc_config+0x104>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <rcc_config+0x104>)
 800141a:	f023 0303 	bic.w	r3, r3, #3
 800141e:	6053      	str	r3, [r2, #4]
  // PLL selected as system clock
  RCC->CFGR |= RCC_CFGR_SW_1;
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <rcc_config+0x104>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <rcc_config+0x104>)
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	6053      	str	r3, [r2, #4]
  // Wait for PLL to be the active clock source
  while((RCC->CFGR & RCC_CFGR_SWS_1) == 0);
 800142c:	bf00      	nop
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <rcc_config+0x104>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f9      	beq.n	800142e <rcc_config+0x9a>

  // Peripherals clock setup
  // AHB Prescaler
  RCC->CFGR &= ~(RCC_CFGR_HPRE);
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <rcc_config+0x104>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a16      	ldr	r2, [pc, #88]	; (8001498 <rcc_config+0x104>)
 8001440:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001444:	6053      	str	r3, [r2, #4]
  // APB1 Prescaler
  RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <rcc_config+0x104>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <rcc_config+0x104>)
 800144c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001450:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PPRE1_2;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <rcc_config+0x104>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <rcc_config+0x104>)
 8001458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800145c:	6053      	str	r3, [r2, #4]
  // APB2 Prescaler
  RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <rcc_config+0x104>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <rcc_config+0x104>)
 8001464:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001468:	6053      	str	r3, [r2, #4]
  // ADC Prescaler
  RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <rcc_config+0x104>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <rcc_config+0x104>)
 8001470:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001474:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <rcc_config+0x104>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a07      	ldr	r2, [pc, #28]	; (8001498 <rcc_config+0x104>)
 800147c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001480:	6053      	str	r3, [r2, #4]
  // Enable peripheral clock
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <rcc_config+0x104>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <rcc_config+0x104>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148c:	61d3      	str	r3, [r2, #28]
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	40022000 	.word	0x40022000

080014a0 <systick_config>:

/**
 * @brief SysTick configuration
 */
void systick_config()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  // Reset CTRL register
  SysTick->CTRL = 0;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <systick_config+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
  // Set the Reload value
  SysTick->LOAD = 63999;
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <systick_config+0x4c>)
 80014ac:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80014b0:	605a      	str	r2, [r3, #4]
  // It has always enabled
  // Set priority to SysTick Interrupt (NVIC)
  NVIC_SetPriority(SysTick_IRQn, 0);
 80014b2:	2100      	movs	r1, #0
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f7ff ff42 	bl	8001340 <__NVIC_SetPriority>
  // Reset SysTick value to 0
  SysTick->VAL = 0;
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <systick_config+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  // Enable SysTick from CTRL register
  SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <systick_config+0x4c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <systick_config+0x4c>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <systick_config+0x4c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a06      	ldr	r2, [pc, #24]	; (80014ec <systick_config+0x4c>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <systick_config+0x4c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a03      	ldr	r2, [pc, #12]	; (80014ec <systick_config+0x4c>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6013      	str	r3, [r2, #0]
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <__NVIC_EnableIRQ>:
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db0b      	blt.n	800151a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	4906      	ldr	r1, [pc, #24]	; (8001524 <__NVIC_EnableIRQ+0x34>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2001      	movs	r0, #1
 8001512:	fa00 f202 	lsl.w	r2, r0, r2
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_ClearPendingIRQ>:
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0c      	blt.n	8001554 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <__NVIC_ClearPendingIRQ+0x38>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	3360      	adds	r3, #96	; 0x60
 8001550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	; (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <tim_TIM3_initTicks>:

/**
 * @brief TIM3 - Time Base ticks/delay
 */
void tim_TIM3_initTicks(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  // Enable TIM3
  RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <tim_TIM3_initTicks+0x78>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <tim_TIM3_initTicks+0x78>)
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	61d3      	str	r3, [r2, #28]
  // Count up mode
  TIM3->CR1 &= ~(TIM_CR1_DIR);
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a19      	ldr	r2, [pc, #100]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 80015ce:	f023 0310 	bic.w	r3, r3, #16
 80015d2:	6013      	str	r3, [r2, #0]
  // Periodic
  TIM3->CR1 &= ~(TIM_CR1_OPM);
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a16      	ldr	r2, [pc, #88]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 80015da:	f023 0308 	bic.w	r3, r3, #8
 80015de:	6013      	str	r3, [r2, #0]
  // Mode: RESET
  TIM3->CR2 &= ~(TIM_CR2_MMS);
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a13      	ldr	r2, [pc, #76]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 80015e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ea:	6053      	str	r3, [r2, #4]
  // Prescaler
  TIM3->PSC = 64 - 1;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 80015ee:	223f      	movs	r2, #63	; 0x3f
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28
  // Period
  TIM3->ARR = 1000 - 1; // 1KHz
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 80015f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c

  // Clear update interrupt
  TIM3->SR &= ~(TIM_SR_UIF);
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6113      	str	r3, [r2, #16]
  // Enable update interrupt
  TIM3->DIER |= TIM_DIER_UIE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	60d3      	str	r3, [r2, #12]
  // Enable NVIC
  NVIC_SetPriority(TIM3_IRQn, 5);
 8001612:	2105      	movs	r1, #5
 8001614:	201d      	movs	r0, #29
 8001616:	f7ff ffa5 	bl	8001564 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800161a:	201d      	movs	r0, #29
 800161c:	f7ff ff68 	bl	80014f0 <__NVIC_EnableIRQ>
  // Start TIM3
  TIM3->CR1 |= TIM_CR1_CEN;
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a03      	ldr	r2, [pc, #12]	; (8001634 <tim_TIM3_initTicks+0x7c>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	40000400 	.word	0x40000400

08001638 <tim_PWM_config>:

/**
 * @brief TIM2 & TIM4 PWM configuration
 */
void tim_PWM_config()
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  // Enable TIM2 and TIM4
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM4EN;
 800163c:	4b63      	ldr	r3, [pc, #396]	; (80017cc <tim_PWM_config+0x194>)
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	4a62      	ldr	r2, [pc, #392]	; (80017cc <tim_PWM_config+0x194>)
 8001642:	f043 0305 	orr.w	r3, r3, #5
 8001646:	61d3      	str	r3, [r2, #28]
  // Count up mode
  TIM2->CR1 &= ~(TIM_CR1_DIR);
 8001648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001652:	f023 0310 	bic.w	r3, r3, #16
 8001656:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~(TIM_CR1_DIR);
 8001658:	4b5d      	ldr	r3, [pc, #372]	; (80017d0 <tim_PWM_config+0x198>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a5c      	ldr	r2, [pc, #368]	; (80017d0 <tim_PWM_config+0x198>)
 800165e:	f023 0310 	bic.w	r3, r3, #16
 8001662:	6013      	str	r3, [r2, #0]
  // Periodic
  TIM2->CR1 &= ~(TIM_CR1_OPM);
 8001664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166e:	f023 0308 	bic.w	r3, r3, #8
 8001672:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~(TIM_CR1_OPM);
 8001674:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <tim_PWM_config+0x198>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a55      	ldr	r2, [pc, #340]	; (80017d0 <tim_PWM_config+0x198>)
 800167a:	f023 0308 	bic.w	r3, r3, #8
 800167e:	6013      	str	r3, [r2, #0]
  // Mode: RESET
  TIM2->CR2 &= ~(TIM_CR2_MMS);
 8001680:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800168e:	6053      	str	r3, [r2, #4]
  TIM4->CR2 &= ~(TIM_CR2_MMS);
 8001690:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <tim_PWM_config+0x198>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <tim_PWM_config+0x198>)
 8001696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800169a:	6053      	str	r3, [r2, #4]
  // Prescaler
  TIM2->PSC = 0U;
 800169c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a0:	2200      	movs	r2, #0
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
  TIM4->PSC = 0U;
 80016a4:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <tim_PWM_config+0x198>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
  // Period
  TIM2->ARR = 6399U; // 10KHz
 80016aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ae:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM4->ARR = 6399U; //
 80016b4:	4b46      	ldr	r3, [pc, #280]	; (80017d0 <tim_PWM_config+0x198>)
 80016b6:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  // Clear update interrupt
  TIM2->SR &= ~(TIM_SR_UIF);
 80016bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6113      	str	r3, [r2, #16]
  TIM4->SR &= ~(TIM_SR_UIF);
 80016cc:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <tim_PWM_config+0x198>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	4a3f      	ldr	r2, [pc, #252]	; (80017d0 <tim_PWM_config+0x198>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6113      	str	r3, [r2, #16]

  /* PWM: TIM2_CH1, TIM2_CH2, TIM4_CH1, TIM4_CH2 */
  // Disable OC
  TIM2->CCER = 0;
 80016d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  TIM4->CCER = 0;
 80016e0:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <tim_PWM_config+0x198>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
  // Set mode to output
  TIM2->CCMR1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80016e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016f4:	f023 0303 	bic.w	r3, r3, #3
 80016f8:	6193      	str	r3, [r2, #24]
  TIM4->CCMR1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80016fa:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <tim_PWM_config+0x198>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4a34      	ldr	r2, [pc, #208]	; (80017d0 <tim_PWM_config+0x198>)
 8001700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001704:	f023 0303 	bic.w	r3, r3, #3
 8001708:	6193      	str	r3, [r2, #24]
  // PWM mode 1
  TIM2->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 800170a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800171c:	6193      	str	r3, [r2, #24]
  TIM4->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 800171e:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <tim_PWM_config+0x198>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4a2b      	ldr	r2, [pc, #172]	; (80017d0 <tim_PWM_config+0x198>)
 8001724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800172c:	6193      	str	r3, [r2, #24]
  TIM2->CCMR1 |= (0x6UL << 4U) | (0x6UL << 12U);
 800172e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001738:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800173c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001740:	6193      	str	r3, [r2, #24]
  TIM4->CCMR1 |= (0x6UL << 4U) | (0x6UL << 12U);
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <tim_PWM_config+0x198>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <tim_PWM_config+0x198>)
 8001748:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800174c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001750:	6193      	str	r3, [r2, #24]
  // Polarity
  TIM2->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800175c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001760:	6213      	str	r3, [r2, #32]
  TIM4->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <tim_PWM_config+0x198>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a1a      	ldr	r2, [pc, #104]	; (80017d0 <tim_PWM_config+0x198>)
 8001768:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800176c:	6213      	str	r3, [r2, #32]
  // Set pulse width - duty cycles
  TIM2->CCR1 = 0;
 800176e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001772:	2200      	movs	r2, #0
 8001774:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 0;
 8001776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800177a:	2200      	movs	r2, #0
 800177c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR1 = 0;
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <tim_PWM_config+0x198>)
 8001780:	2200      	movs	r2, #0
 8001782:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 0;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <tim_PWM_config+0x198>)
 8001786:	2200      	movs	r2, #0
 8001788:	639a      	str	r2, [r3, #56]	; 0x38
  // Enable channels
  TIM2->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 800178a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001794:	f043 0311 	orr.w	r3, r3, #17
 8001798:	6213      	str	r3, [r2, #32]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <tim_PWM_config+0x198>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <tim_PWM_config+0x198>)
 80017a0:	f043 0311 	orr.w	r3, r3, #17
 80017a4:	6213      	str	r3, [r2, #32]
  // Start TIM2 and TIM4
  TIM2->CR1 |= TIM_CR1_CEN;
 80017a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6013      	str	r3, [r2, #0]
  TIM4->CR1 |= TIM_CR1_CEN;
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <tim_PWM_config+0x198>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <tim_PWM_config+0x198>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6013      	str	r3, [r2, #0]
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40000800 	.word	0x40000800

080017d4 <tim_config>:

/**
 * @brief TIM Configuration
 */
void tim_config()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  tim_TIM3_initTicks();
 80017d8:	f7ff feee 	bl	80015b8 <tim_TIM3_initTicks>
  tim_PWM_config();
 80017dc:	f7ff ff2c 	bl	8001638 <tim_PWM_config>
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <TIM3_IRQHandler>:

void TIM3_IRQHandler()
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  if(TIM3->SR & TIM_SR_UIF)
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <TIM3_IRQHandler+0x30>)
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00d      	beq.n	8001810 <TIM3_IRQHandler+0x2c>
  {
    // Clear flag
    TIM3->SR &= ~TIM_SR_UIF;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <TIM3_IRQHandler+0x30>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <TIM3_IRQHandler+0x30>)
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	6113      	str	r3, [r2, #16]
    NVIC_ClearPendingIRQ(TIM3_IRQn);
 8001800:	201d      	movs	r0, #29
 8001802:	f7ff fe91 	bl	8001528 <__NVIC_ClearPendingIRQ>
    // Increase tick
    msTick++;
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <TIM3_IRQHandler+0x34>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	4a02      	ldr	r2, [pc, #8]	; (8001818 <TIM3_IRQHandler+0x34>)
 800180e:	6013      	str	r3, [r2, #0]
  }
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40000400 	.word	0x40000400
 8001818:	200002a4 	.word	0x200002a4

0800181c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181e:	490d      	ldr	r1, [pc, #52]	; (8001854 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001834:	4c0a      	ldr	r4, [pc, #40]	; (8001860 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001842:	f7ff f97b 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f000 f80f 	bl	8001868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800184a:	f7ff f91d 	bl	8000a88 <main>
  bx lr
 800184e:	4770      	bx	lr
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001858:	0800470c 	.word	0x0800470c
  ldr r2, =_sbss
 800185c:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001860:	200002f0 	.word	0x200002f0

08001864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC1_2_IRQHandler>
	...

08001868 <__libc_init_array>:
 8001868:	b570      	push	{r4, r5, r6, lr}
 800186a:	2600      	movs	r6, #0
 800186c:	4d0c      	ldr	r5, [pc, #48]	; (80018a0 <__libc_init_array+0x38>)
 800186e:	4c0d      	ldr	r4, [pc, #52]	; (80018a4 <__libc_init_array+0x3c>)
 8001870:	1b64      	subs	r4, r4, r5
 8001872:	10a4      	asrs	r4, r4, #2
 8001874:	42a6      	cmp	r6, r4
 8001876:	d109      	bne.n	800188c <__libc_init_array+0x24>
 8001878:	f002 fd46 	bl	8004308 <_init>
 800187c:	2600      	movs	r6, #0
 800187e:	4d0a      	ldr	r5, [pc, #40]	; (80018a8 <__libc_init_array+0x40>)
 8001880:	4c0a      	ldr	r4, [pc, #40]	; (80018ac <__libc_init_array+0x44>)
 8001882:	1b64      	subs	r4, r4, r5
 8001884:	10a4      	asrs	r4, r4, #2
 8001886:	42a6      	cmp	r6, r4
 8001888:	d105      	bne.n	8001896 <__libc_init_array+0x2e>
 800188a:	bd70      	pop	{r4, r5, r6, pc}
 800188c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001890:	4798      	blx	r3
 8001892:	3601      	adds	r6, #1
 8001894:	e7ee      	b.n	8001874 <__libc_init_array+0xc>
 8001896:	f855 3b04 	ldr.w	r3, [r5], #4
 800189a:	4798      	blx	r3
 800189c:	3601      	adds	r6, #1
 800189e:	e7f2      	b.n	8001886 <__libc_init_array+0x1e>
 80018a0:	08004704 	.word	0x08004704
 80018a4:	08004704 	.word	0x08004704
 80018a8:	08004704 	.word	0x08004704
 80018ac:	08004708 	.word	0x08004708

080018b0 <memcpy>:
 80018b0:	440a      	add	r2, r1
 80018b2:	4291      	cmp	r1, r2
 80018b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80018b8:	d100      	bne.n	80018bc <memcpy+0xc>
 80018ba:	4770      	bx	lr
 80018bc:	b510      	push	{r4, lr}
 80018be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018c2:	4291      	cmp	r1, r2
 80018c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018c8:	d1f9      	bne.n	80018be <memcpy+0xe>
 80018ca:	bd10      	pop	{r4, pc}

080018cc <memset>:
 80018cc:	4603      	mov	r3, r0
 80018ce:	4402      	add	r2, r0
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d100      	bne.n	80018d6 <memset+0xa>
 80018d4:	4770      	bx	lr
 80018d6:	f803 1b01 	strb.w	r1, [r3], #1
 80018da:	e7f9      	b.n	80018d0 <memset+0x4>

080018dc <__cvt>:
 80018dc:	2b00      	cmp	r3, #0
 80018de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018e2:	461f      	mov	r7, r3
 80018e4:	bfbb      	ittet	lt
 80018e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80018ea:	461f      	movlt	r7, r3
 80018ec:	2300      	movge	r3, #0
 80018ee:	232d      	movlt	r3, #45	; 0x2d
 80018f0:	b088      	sub	sp, #32
 80018f2:	4614      	mov	r4, r2
 80018f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80018f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80018f8:	7013      	strb	r3, [r2, #0]
 80018fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80018fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8001900:	f023 0820 	bic.w	r8, r3, #32
 8001904:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001908:	d005      	beq.n	8001916 <__cvt+0x3a>
 800190a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800190e:	d100      	bne.n	8001912 <__cvt+0x36>
 8001910:	3501      	adds	r5, #1
 8001912:	2302      	movs	r3, #2
 8001914:	e000      	b.n	8001918 <__cvt+0x3c>
 8001916:	2303      	movs	r3, #3
 8001918:	aa07      	add	r2, sp, #28
 800191a:	9204      	str	r2, [sp, #16]
 800191c:	aa06      	add	r2, sp, #24
 800191e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8001922:	e9cd 3500 	strd	r3, r5, [sp]
 8001926:	4622      	mov	r2, r4
 8001928:	463b      	mov	r3, r7
 800192a:	f000 fcc5 	bl	80022b8 <_dtoa_r>
 800192e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001932:	4606      	mov	r6, r0
 8001934:	d102      	bne.n	800193c <__cvt+0x60>
 8001936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001938:	07db      	lsls	r3, r3, #31
 800193a:	d522      	bpl.n	8001982 <__cvt+0xa6>
 800193c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001940:	eb06 0905 	add.w	r9, r6, r5
 8001944:	d110      	bne.n	8001968 <__cvt+0x8c>
 8001946:	7833      	ldrb	r3, [r6, #0]
 8001948:	2b30      	cmp	r3, #48	; 0x30
 800194a:	d10a      	bne.n	8001962 <__cvt+0x86>
 800194c:	2200      	movs	r2, #0
 800194e:	2300      	movs	r3, #0
 8001950:	4620      	mov	r0, r4
 8001952:	4639      	mov	r1, r7
 8001954:	f7ff f828 	bl	80009a8 <__aeabi_dcmpeq>
 8001958:	b918      	cbnz	r0, 8001962 <__cvt+0x86>
 800195a:	f1c5 0501 	rsb	r5, r5, #1
 800195e:	f8ca 5000 	str.w	r5, [sl]
 8001962:	f8da 3000 	ldr.w	r3, [sl]
 8001966:	4499      	add	r9, r3
 8001968:	2200      	movs	r2, #0
 800196a:	2300      	movs	r3, #0
 800196c:	4620      	mov	r0, r4
 800196e:	4639      	mov	r1, r7
 8001970:	f7ff f81a 	bl	80009a8 <__aeabi_dcmpeq>
 8001974:	b108      	cbz	r0, 800197a <__cvt+0x9e>
 8001976:	f8cd 901c 	str.w	r9, [sp, #28]
 800197a:	2230      	movs	r2, #48	; 0x30
 800197c:	9b07      	ldr	r3, [sp, #28]
 800197e:	454b      	cmp	r3, r9
 8001980:	d307      	bcc.n	8001992 <__cvt+0xb6>
 8001982:	4630      	mov	r0, r6
 8001984:	9b07      	ldr	r3, [sp, #28]
 8001986:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001988:	1b9b      	subs	r3, r3, r6
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	b008      	add	sp, #32
 800198e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001992:	1c59      	adds	r1, r3, #1
 8001994:	9107      	str	r1, [sp, #28]
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	e7f0      	b.n	800197c <__cvt+0xa0>

0800199a <__exponent>:
 800199a:	4603      	mov	r3, r0
 800199c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800199e:	2900      	cmp	r1, #0
 80019a0:	f803 2b02 	strb.w	r2, [r3], #2
 80019a4:	bfb6      	itet	lt
 80019a6:	222d      	movlt	r2, #45	; 0x2d
 80019a8:	222b      	movge	r2, #43	; 0x2b
 80019aa:	4249      	neglt	r1, r1
 80019ac:	2909      	cmp	r1, #9
 80019ae:	7042      	strb	r2, [r0, #1]
 80019b0:	dd2b      	ble.n	8001a0a <__exponent+0x70>
 80019b2:	f10d 0407 	add.w	r4, sp, #7
 80019b6:	46a4      	mov	ip, r4
 80019b8:	270a      	movs	r7, #10
 80019ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80019be:	460a      	mov	r2, r1
 80019c0:	46a6      	mov	lr, r4
 80019c2:	fb07 1516 	mls	r5, r7, r6, r1
 80019c6:	2a63      	cmp	r2, #99	; 0x63
 80019c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80019cc:	4631      	mov	r1, r6
 80019ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80019d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80019d6:	dcf0      	bgt.n	80019ba <__exponent+0x20>
 80019d8:	3130      	adds	r1, #48	; 0x30
 80019da:	f1ae 0502 	sub.w	r5, lr, #2
 80019de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80019e2:	4629      	mov	r1, r5
 80019e4:	1c44      	adds	r4, r0, #1
 80019e6:	4561      	cmp	r1, ip
 80019e8:	d30a      	bcc.n	8001a00 <__exponent+0x66>
 80019ea:	f10d 0209 	add.w	r2, sp, #9
 80019ee:	eba2 020e 	sub.w	r2, r2, lr
 80019f2:	4565      	cmp	r5, ip
 80019f4:	bf88      	it	hi
 80019f6:	2200      	movhi	r2, #0
 80019f8:	4413      	add	r3, r2
 80019fa:	1a18      	subs	r0, r3, r0
 80019fc:	b003      	add	sp, #12
 80019fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a04:	f804 2f01 	strb.w	r2, [r4, #1]!
 8001a08:	e7ed      	b.n	80019e6 <__exponent+0x4c>
 8001a0a:	2330      	movs	r3, #48	; 0x30
 8001a0c:	3130      	adds	r1, #48	; 0x30
 8001a0e:	7083      	strb	r3, [r0, #2]
 8001a10:	70c1      	strb	r1, [r0, #3]
 8001a12:	1d03      	adds	r3, r0, #4
 8001a14:	e7f1      	b.n	80019fa <__exponent+0x60>
	...

08001a18 <_printf_float>:
 8001a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a1c:	b091      	sub	sp, #68	; 0x44
 8001a1e:	460c      	mov	r4, r1
 8001a20:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8001a24:	4616      	mov	r6, r2
 8001a26:	461f      	mov	r7, r3
 8001a28:	4605      	mov	r5, r0
 8001a2a:	f001 fa33 	bl	8002e94 <_localeconv_r>
 8001a2e:	6803      	ldr	r3, [r0, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	9309      	str	r3, [sp, #36]	; 0x24
 8001a34:	f7fe fb8c 	bl	8000150 <strlen>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	930e      	str	r3, [sp, #56]	; 0x38
 8001a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8001a40:	900a      	str	r0, [sp, #40]	; 0x28
 8001a42:	3307      	adds	r3, #7
 8001a44:	f023 0307 	bic.w	r3, r3, #7
 8001a48:	f103 0208 	add.w	r2, r3, #8
 8001a4c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8001a50:	f8d4 b000 	ldr.w	fp, [r4]
 8001a54:	f8c8 2000 	str.w	r2, [r8]
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8001a60:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8001a64:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8001a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6e:	4640      	mov	r0, r8
 8001a70:	4b9c      	ldr	r3, [pc, #624]	; (8001ce4 <_printf_float+0x2cc>)
 8001a72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001a74:	f7fe ffca 	bl	8000a0c <__aeabi_dcmpun>
 8001a78:	bb70      	cbnz	r0, 8001ad8 <_printf_float+0xc0>
 8001a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7e:	4640      	mov	r0, r8
 8001a80:	4b98      	ldr	r3, [pc, #608]	; (8001ce4 <_printf_float+0x2cc>)
 8001a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001a84:	f7fe ffa4 	bl	80009d0 <__aeabi_dcmple>
 8001a88:	bb30      	cbnz	r0, 8001ad8 <_printf_float+0xc0>
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4640      	mov	r0, r8
 8001a90:	4651      	mov	r1, sl
 8001a92:	f7fe ff93 	bl	80009bc <__aeabi_dcmplt>
 8001a96:	b110      	cbz	r0, 8001a9e <_printf_float+0x86>
 8001a98:	232d      	movs	r3, #45	; 0x2d
 8001a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a9e:	4b92      	ldr	r3, [pc, #584]	; (8001ce8 <_printf_float+0x2d0>)
 8001aa0:	4892      	ldr	r0, [pc, #584]	; (8001cec <_printf_float+0x2d4>)
 8001aa2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8001aa6:	bf94      	ite	ls
 8001aa8:	4698      	movls	r8, r3
 8001aaa:	4680      	movhi	r8, r0
 8001aac:	2303      	movs	r3, #3
 8001aae:	f04f 0a00 	mov.w	sl, #0
 8001ab2:	6123      	str	r3, [r4, #16]
 8001ab4:	f02b 0304 	bic.w	r3, fp, #4
 8001ab8:	6023      	str	r3, [r4, #0]
 8001aba:	4633      	mov	r3, r6
 8001abc:	4621      	mov	r1, r4
 8001abe:	4628      	mov	r0, r5
 8001ac0:	9700      	str	r7, [sp, #0]
 8001ac2:	aa0f      	add	r2, sp, #60	; 0x3c
 8001ac4:	f000 f9d4 	bl	8001e70 <_printf_common>
 8001ac8:	3001      	adds	r0, #1
 8001aca:	f040 8090 	bne.w	8001bee <_printf_float+0x1d6>
 8001ace:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad2:	b011      	add	sp, #68	; 0x44
 8001ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ad8:	4642      	mov	r2, r8
 8001ada:	4653      	mov	r3, sl
 8001adc:	4640      	mov	r0, r8
 8001ade:	4651      	mov	r1, sl
 8001ae0:	f7fe ff94 	bl	8000a0c <__aeabi_dcmpun>
 8001ae4:	b148      	cbz	r0, 8001afa <_printf_float+0xe2>
 8001ae6:	f1ba 0f00 	cmp.w	sl, #0
 8001aea:	bfb8      	it	lt
 8001aec:	232d      	movlt	r3, #45	; 0x2d
 8001aee:	4880      	ldr	r0, [pc, #512]	; (8001cf0 <_printf_float+0x2d8>)
 8001af0:	bfb8      	it	lt
 8001af2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8001af6:	4b7f      	ldr	r3, [pc, #508]	; (8001cf4 <_printf_float+0x2dc>)
 8001af8:	e7d3      	b.n	8001aa2 <_printf_float+0x8a>
 8001afa:	6863      	ldr	r3, [r4, #4]
 8001afc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	d142      	bne.n	8001b8a <_printf_float+0x172>
 8001b04:	2306      	movs	r3, #6
 8001b06:	6063      	str	r3, [r4, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	9206      	str	r2, [sp, #24]
 8001b0c:	aa0e      	add	r2, sp, #56	; 0x38
 8001b0e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8001b12:	aa0d      	add	r2, sp, #52	; 0x34
 8001b14:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8001b18:	9203      	str	r2, [sp, #12]
 8001b1a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8001b1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001b22:	6023      	str	r3, [r4, #0]
 8001b24:	6863      	ldr	r3, [r4, #4]
 8001b26:	4642      	mov	r2, r8
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4628      	mov	r0, r5
 8001b2c:	4653      	mov	r3, sl
 8001b2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8001b30:	f7ff fed4 	bl	80018dc <__cvt>
 8001b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001b36:	4680      	mov	r8, r0
 8001b38:	2947      	cmp	r1, #71	; 0x47
 8001b3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001b3c:	d108      	bne.n	8001b50 <_printf_float+0x138>
 8001b3e:	1cc8      	adds	r0, r1, #3
 8001b40:	db02      	blt.n	8001b48 <_printf_float+0x130>
 8001b42:	6863      	ldr	r3, [r4, #4]
 8001b44:	4299      	cmp	r1, r3
 8001b46:	dd40      	ble.n	8001bca <_printf_float+0x1b2>
 8001b48:	f1a9 0902 	sub.w	r9, r9, #2
 8001b4c:	fa5f f989 	uxtb.w	r9, r9
 8001b50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8001b54:	d81f      	bhi.n	8001b96 <_printf_float+0x17e>
 8001b56:	464a      	mov	r2, r9
 8001b58:	3901      	subs	r1, #1
 8001b5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001b5e:	910d      	str	r1, [sp, #52]	; 0x34
 8001b60:	f7ff ff1b 	bl	800199a <__exponent>
 8001b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001b66:	4682      	mov	sl, r0
 8001b68:	1813      	adds	r3, r2, r0
 8001b6a:	2a01      	cmp	r2, #1
 8001b6c:	6123      	str	r3, [r4, #16]
 8001b6e:	dc02      	bgt.n	8001b76 <_printf_float+0x15e>
 8001b70:	6822      	ldr	r2, [r4, #0]
 8001b72:	07d2      	lsls	r2, r2, #31
 8001b74:	d501      	bpl.n	8001b7a <_printf_float+0x162>
 8001b76:	3301      	adds	r3, #1
 8001b78:	6123      	str	r3, [r4, #16]
 8001b7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d09b      	beq.n	8001aba <_printf_float+0xa2>
 8001b82:	232d      	movs	r3, #45	; 0x2d
 8001b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b88:	e797      	b.n	8001aba <_printf_float+0xa2>
 8001b8a:	2947      	cmp	r1, #71	; 0x47
 8001b8c:	d1bc      	bne.n	8001b08 <_printf_float+0xf0>
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ba      	bne.n	8001b08 <_printf_float+0xf0>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e7b7      	b.n	8001b06 <_printf_float+0xee>
 8001b96:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8001b9a:	d118      	bne.n	8001bce <_printf_float+0x1b6>
 8001b9c:	2900      	cmp	r1, #0
 8001b9e:	6863      	ldr	r3, [r4, #4]
 8001ba0:	dd0b      	ble.n	8001bba <_printf_float+0x1a2>
 8001ba2:	6121      	str	r1, [r4, #16]
 8001ba4:	b913      	cbnz	r3, 8001bac <_printf_float+0x194>
 8001ba6:	6822      	ldr	r2, [r4, #0]
 8001ba8:	07d0      	lsls	r0, r2, #31
 8001baa:	d502      	bpl.n	8001bb2 <_printf_float+0x19a>
 8001bac:	3301      	adds	r3, #1
 8001bae:	440b      	add	r3, r1
 8001bb0:	6123      	str	r3, [r4, #16]
 8001bb2:	f04f 0a00 	mov.w	sl, #0
 8001bb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8001bb8:	e7df      	b.n	8001b7a <_printf_float+0x162>
 8001bba:	b913      	cbnz	r3, 8001bc2 <_printf_float+0x1aa>
 8001bbc:	6822      	ldr	r2, [r4, #0]
 8001bbe:	07d2      	lsls	r2, r2, #31
 8001bc0:	d501      	bpl.n	8001bc6 <_printf_float+0x1ae>
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	e7f4      	b.n	8001bb0 <_printf_float+0x198>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e7f2      	b.n	8001bb0 <_printf_float+0x198>
 8001bca:	f04f 0967 	mov.w	r9, #103	; 0x67
 8001bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001bd0:	4299      	cmp	r1, r3
 8001bd2:	db05      	blt.n	8001be0 <_printf_float+0x1c8>
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	6121      	str	r1, [r4, #16]
 8001bd8:	07d8      	lsls	r0, r3, #31
 8001bda:	d5ea      	bpl.n	8001bb2 <_printf_float+0x19a>
 8001bdc:	1c4b      	adds	r3, r1, #1
 8001bde:	e7e7      	b.n	8001bb0 <_printf_float+0x198>
 8001be0:	2900      	cmp	r1, #0
 8001be2:	bfcc      	ite	gt
 8001be4:	2201      	movgt	r2, #1
 8001be6:	f1c1 0202 	rsble	r2, r1, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	e7e0      	b.n	8001bb0 <_printf_float+0x198>
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	055a      	lsls	r2, r3, #21
 8001bf2:	d407      	bmi.n	8001c04 <_printf_float+0x1ec>
 8001bf4:	6923      	ldr	r3, [r4, #16]
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	4631      	mov	r1, r6
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	47b8      	blx	r7
 8001bfe:	3001      	adds	r0, #1
 8001c00:	d12b      	bne.n	8001c5a <_printf_float+0x242>
 8001c02:	e764      	b.n	8001ace <_printf_float+0xb6>
 8001c04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8001c08:	f240 80dd 	bls.w	8001dc6 <_printf_float+0x3ae>
 8001c0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001c10:	2200      	movs	r2, #0
 8001c12:	2300      	movs	r3, #0
 8001c14:	f7fe fec8 	bl	80009a8 <__aeabi_dcmpeq>
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	d033      	beq.n	8001c84 <_printf_float+0x26c>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	4631      	mov	r1, r6
 8001c20:	4628      	mov	r0, r5
 8001c22:	4a35      	ldr	r2, [pc, #212]	; (8001cf8 <_printf_float+0x2e0>)
 8001c24:	47b8      	blx	r7
 8001c26:	3001      	adds	r0, #1
 8001c28:	f43f af51 	beq.w	8001ace <_printf_float+0xb6>
 8001c2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001c30:	429a      	cmp	r2, r3
 8001c32:	db02      	blt.n	8001c3a <_printf_float+0x222>
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	07d8      	lsls	r0, r3, #31
 8001c38:	d50f      	bpl.n	8001c5a <_printf_float+0x242>
 8001c3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001c3e:	4631      	mov	r1, r6
 8001c40:	4628      	mov	r0, r5
 8001c42:	47b8      	blx	r7
 8001c44:	3001      	adds	r0, #1
 8001c46:	f43f af42 	beq.w	8001ace <_printf_float+0xb6>
 8001c4a:	f04f 0800 	mov.w	r8, #0
 8001c4e:	f104 091a 	add.w	r9, r4, #26
 8001c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c54:	3b01      	subs	r3, #1
 8001c56:	4543      	cmp	r3, r8
 8001c58:	dc09      	bgt.n	8001c6e <_printf_float+0x256>
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	079b      	lsls	r3, r3, #30
 8001c5e:	f100 8102 	bmi.w	8001e66 <_printf_float+0x44e>
 8001c62:	68e0      	ldr	r0, [r4, #12]
 8001c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001c66:	4298      	cmp	r0, r3
 8001c68:	bfb8      	it	lt
 8001c6a:	4618      	movlt	r0, r3
 8001c6c:	e731      	b.n	8001ad2 <_printf_float+0xba>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	464a      	mov	r2, r9
 8001c72:	4631      	mov	r1, r6
 8001c74:	4628      	mov	r0, r5
 8001c76:	47b8      	blx	r7
 8001c78:	3001      	adds	r0, #1
 8001c7a:	f43f af28 	beq.w	8001ace <_printf_float+0xb6>
 8001c7e:	f108 0801 	add.w	r8, r8, #1
 8001c82:	e7e6      	b.n	8001c52 <_printf_float+0x23a>
 8001c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	dc38      	bgt.n	8001cfc <_printf_float+0x2e4>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	4631      	mov	r1, r6
 8001c8e:	4628      	mov	r0, r5
 8001c90:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <_printf_float+0x2e0>)
 8001c92:	47b8      	blx	r7
 8001c94:	3001      	adds	r0, #1
 8001c96:	f43f af1a 	beq.w	8001ace <_printf_float+0xb6>
 8001c9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	d102      	bne.n	8001ca8 <_printf_float+0x290>
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	07d9      	lsls	r1, r3, #31
 8001ca6:	d5d8      	bpl.n	8001c5a <_printf_float+0x242>
 8001ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001cac:	4631      	mov	r1, r6
 8001cae:	4628      	mov	r0, r5
 8001cb0:	47b8      	blx	r7
 8001cb2:	3001      	adds	r0, #1
 8001cb4:	f43f af0b 	beq.w	8001ace <_printf_float+0xb6>
 8001cb8:	f04f 0900 	mov.w	r9, #0
 8001cbc:	f104 0a1a 	add.w	sl, r4, #26
 8001cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001cc2:	425b      	negs	r3, r3
 8001cc4:	454b      	cmp	r3, r9
 8001cc6:	dc01      	bgt.n	8001ccc <_printf_float+0x2b4>
 8001cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001cca:	e794      	b.n	8001bf6 <_printf_float+0x1de>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	4652      	mov	r2, sl
 8001cd0:	4631      	mov	r1, r6
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	47b8      	blx	r7
 8001cd6:	3001      	adds	r0, #1
 8001cd8:	f43f aef9 	beq.w	8001ace <_printf_float+0xb6>
 8001cdc:	f109 0901 	add.w	r9, r9, #1
 8001ce0:	e7ee      	b.n	8001cc0 <_printf_float+0x2a8>
 8001ce2:	bf00      	nop
 8001ce4:	7fefffff 	.word	0x7fefffff
 8001ce8:	08004324 	.word	0x08004324
 8001cec:	08004328 	.word	0x08004328
 8001cf0:	08004330 	.word	0x08004330
 8001cf4:	0800432c 	.word	0x0800432c
 8001cf8:	08004334 	.word	0x08004334
 8001cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d00:	429a      	cmp	r2, r3
 8001d02:	bfa8      	it	ge
 8001d04:	461a      	movge	r2, r3
 8001d06:	2a00      	cmp	r2, #0
 8001d08:	4691      	mov	r9, r2
 8001d0a:	dc37      	bgt.n	8001d7c <_printf_float+0x364>
 8001d0c:	f04f 0b00 	mov.w	fp, #0
 8001d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001d14:	f104 021a 	add.w	r2, r4, #26
 8001d18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8001d1c:	ebaa 0309 	sub.w	r3, sl, r9
 8001d20:	455b      	cmp	r3, fp
 8001d22:	dc33      	bgt.n	8001d8c <_printf_float+0x374>
 8001d24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	db3b      	blt.n	8001da4 <_printf_float+0x38c>
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	07da      	lsls	r2, r3, #31
 8001d30:	d438      	bmi.n	8001da4 <_printf_float+0x38c>
 8001d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001d34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001d36:	eba2 030a 	sub.w	r3, r2, sl
 8001d3a:	eba2 0901 	sub.w	r9, r2, r1
 8001d3e:	4599      	cmp	r9, r3
 8001d40:	bfa8      	it	ge
 8001d42:	4699      	movge	r9, r3
 8001d44:	f1b9 0f00 	cmp.w	r9, #0
 8001d48:	dc34      	bgt.n	8001db4 <_printf_float+0x39c>
 8001d4a:	f04f 0800 	mov.w	r8, #0
 8001d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001d52:	f104 0a1a 	add.w	sl, r4, #26
 8001d56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	eba3 0309 	sub.w	r3, r3, r9
 8001d60:	4543      	cmp	r3, r8
 8001d62:	f77f af7a 	ble.w	8001c5a <_printf_float+0x242>
 8001d66:	2301      	movs	r3, #1
 8001d68:	4652      	mov	r2, sl
 8001d6a:	4631      	mov	r1, r6
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	47b8      	blx	r7
 8001d70:	3001      	adds	r0, #1
 8001d72:	f43f aeac 	beq.w	8001ace <_printf_float+0xb6>
 8001d76:	f108 0801 	add.w	r8, r8, #1
 8001d7a:	e7ec      	b.n	8001d56 <_printf_float+0x33e>
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	4631      	mov	r1, r6
 8001d80:	4642      	mov	r2, r8
 8001d82:	4628      	mov	r0, r5
 8001d84:	47b8      	blx	r7
 8001d86:	3001      	adds	r0, #1
 8001d88:	d1c0      	bne.n	8001d0c <_printf_float+0x2f4>
 8001d8a:	e6a0      	b.n	8001ace <_printf_float+0xb6>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	4631      	mov	r1, r6
 8001d90:	4628      	mov	r0, r5
 8001d92:	920b      	str	r2, [sp, #44]	; 0x2c
 8001d94:	47b8      	blx	r7
 8001d96:	3001      	adds	r0, #1
 8001d98:	f43f ae99 	beq.w	8001ace <_printf_float+0xb6>
 8001d9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d9e:	f10b 0b01 	add.w	fp, fp, #1
 8001da2:	e7b9      	b.n	8001d18 <_printf_float+0x300>
 8001da4:	4631      	mov	r1, r6
 8001da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001daa:	4628      	mov	r0, r5
 8001dac:	47b8      	blx	r7
 8001dae:	3001      	adds	r0, #1
 8001db0:	d1bf      	bne.n	8001d32 <_printf_float+0x31a>
 8001db2:	e68c      	b.n	8001ace <_printf_float+0xb6>
 8001db4:	464b      	mov	r3, r9
 8001db6:	4631      	mov	r1, r6
 8001db8:	4628      	mov	r0, r5
 8001dba:	eb08 020a 	add.w	r2, r8, sl
 8001dbe:	47b8      	blx	r7
 8001dc0:	3001      	adds	r0, #1
 8001dc2:	d1c2      	bne.n	8001d4a <_printf_float+0x332>
 8001dc4:	e683      	b.n	8001ace <_printf_float+0xb6>
 8001dc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001dc8:	2a01      	cmp	r2, #1
 8001dca:	dc01      	bgt.n	8001dd0 <_printf_float+0x3b8>
 8001dcc:	07db      	lsls	r3, r3, #31
 8001dce:	d537      	bpl.n	8001e40 <_printf_float+0x428>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	4642      	mov	r2, r8
 8001dd4:	4631      	mov	r1, r6
 8001dd6:	4628      	mov	r0, r5
 8001dd8:	47b8      	blx	r7
 8001dda:	3001      	adds	r0, #1
 8001ddc:	f43f ae77 	beq.w	8001ace <_printf_float+0xb6>
 8001de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001de4:	4631      	mov	r1, r6
 8001de6:	4628      	mov	r0, r5
 8001de8:	47b8      	blx	r7
 8001dea:	3001      	adds	r0, #1
 8001dec:	f43f ae6f 	beq.w	8001ace <_printf_float+0xb6>
 8001df0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001df4:	2200      	movs	r2, #0
 8001df6:	2300      	movs	r3, #0
 8001df8:	f7fe fdd6 	bl	80009a8 <__aeabi_dcmpeq>
 8001dfc:	b9d8      	cbnz	r0, 8001e36 <_printf_float+0x41e>
 8001dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001e00:	f108 0201 	add.w	r2, r8, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4631      	mov	r1, r6
 8001e08:	4628      	mov	r0, r5
 8001e0a:	47b8      	blx	r7
 8001e0c:	3001      	adds	r0, #1
 8001e0e:	d10e      	bne.n	8001e2e <_printf_float+0x416>
 8001e10:	e65d      	b.n	8001ace <_printf_float+0xb6>
 8001e12:	2301      	movs	r3, #1
 8001e14:	464a      	mov	r2, r9
 8001e16:	4631      	mov	r1, r6
 8001e18:	4628      	mov	r0, r5
 8001e1a:	47b8      	blx	r7
 8001e1c:	3001      	adds	r0, #1
 8001e1e:	f43f ae56 	beq.w	8001ace <_printf_float+0xb6>
 8001e22:	f108 0801 	add.w	r8, r8, #1
 8001e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	4543      	cmp	r3, r8
 8001e2c:	dcf1      	bgt.n	8001e12 <_printf_float+0x3fa>
 8001e2e:	4653      	mov	r3, sl
 8001e30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8001e34:	e6e0      	b.n	8001bf8 <_printf_float+0x1e0>
 8001e36:	f04f 0800 	mov.w	r8, #0
 8001e3a:	f104 091a 	add.w	r9, r4, #26
 8001e3e:	e7f2      	b.n	8001e26 <_printf_float+0x40e>
 8001e40:	2301      	movs	r3, #1
 8001e42:	4642      	mov	r2, r8
 8001e44:	e7df      	b.n	8001e06 <_printf_float+0x3ee>
 8001e46:	2301      	movs	r3, #1
 8001e48:	464a      	mov	r2, r9
 8001e4a:	4631      	mov	r1, r6
 8001e4c:	4628      	mov	r0, r5
 8001e4e:	47b8      	blx	r7
 8001e50:	3001      	adds	r0, #1
 8001e52:	f43f ae3c 	beq.w	8001ace <_printf_float+0xb6>
 8001e56:	f108 0801 	add.w	r8, r8, #1
 8001e5a:	68e3      	ldr	r3, [r4, #12]
 8001e5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001e5e:	1a5b      	subs	r3, r3, r1
 8001e60:	4543      	cmp	r3, r8
 8001e62:	dcf0      	bgt.n	8001e46 <_printf_float+0x42e>
 8001e64:	e6fd      	b.n	8001c62 <_printf_float+0x24a>
 8001e66:	f04f 0800 	mov.w	r8, #0
 8001e6a:	f104 0919 	add.w	r9, r4, #25
 8001e6e:	e7f4      	b.n	8001e5a <_printf_float+0x442>

08001e70 <_printf_common>:
 8001e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e74:	4616      	mov	r6, r2
 8001e76:	4699      	mov	r9, r3
 8001e78:	688a      	ldr	r2, [r1, #8]
 8001e7a:	690b      	ldr	r3, [r1, #16]
 8001e7c:	4607      	mov	r7, r0
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	bfb8      	it	lt
 8001e82:	4613      	movlt	r3, r2
 8001e84:	6033      	str	r3, [r6, #0]
 8001e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e8a:	460c      	mov	r4, r1
 8001e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e90:	b10a      	cbz	r2, 8001e96 <_printf_common+0x26>
 8001e92:	3301      	adds	r3, #1
 8001e94:	6033      	str	r3, [r6, #0]
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	0699      	lsls	r1, r3, #26
 8001e9a:	bf42      	ittt	mi
 8001e9c:	6833      	ldrmi	r3, [r6, #0]
 8001e9e:	3302      	addmi	r3, #2
 8001ea0:	6033      	strmi	r3, [r6, #0]
 8001ea2:	6825      	ldr	r5, [r4, #0]
 8001ea4:	f015 0506 	ands.w	r5, r5, #6
 8001ea8:	d106      	bne.n	8001eb8 <_printf_common+0x48>
 8001eaa:	f104 0a19 	add.w	sl, r4, #25
 8001eae:	68e3      	ldr	r3, [r4, #12]
 8001eb0:	6832      	ldr	r2, [r6, #0]
 8001eb2:	1a9b      	subs	r3, r3, r2
 8001eb4:	42ab      	cmp	r3, r5
 8001eb6:	dc28      	bgt.n	8001f0a <_printf_common+0x9a>
 8001eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ebc:	1e13      	subs	r3, r2, #0
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	bf18      	it	ne
 8001ec2:	2301      	movne	r3, #1
 8001ec4:	0692      	lsls	r2, r2, #26
 8001ec6:	d42d      	bmi.n	8001f24 <_printf_common+0xb4>
 8001ec8:	4649      	mov	r1, r9
 8001eca:	4638      	mov	r0, r7
 8001ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ed0:	47c0      	blx	r8
 8001ed2:	3001      	adds	r0, #1
 8001ed4:	d020      	beq.n	8001f18 <_printf_common+0xa8>
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	68e5      	ldr	r5, [r4, #12]
 8001eda:	f003 0306 	and.w	r3, r3, #6
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf18      	it	ne
 8001ee2:	2500      	movne	r5, #0
 8001ee4:	6832      	ldr	r2, [r6, #0]
 8001ee6:	f04f 0600 	mov.w	r6, #0
 8001eea:	68a3      	ldr	r3, [r4, #8]
 8001eec:	bf08      	it	eq
 8001eee:	1aad      	subeq	r5, r5, r2
 8001ef0:	6922      	ldr	r2, [r4, #16]
 8001ef2:	bf08      	it	eq
 8001ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	bfc4      	itt	gt
 8001efc:	1a9b      	subgt	r3, r3, r2
 8001efe:	18ed      	addgt	r5, r5, r3
 8001f00:	341a      	adds	r4, #26
 8001f02:	42b5      	cmp	r5, r6
 8001f04:	d11a      	bne.n	8001f3c <_printf_common+0xcc>
 8001f06:	2000      	movs	r0, #0
 8001f08:	e008      	b.n	8001f1c <_printf_common+0xac>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	4652      	mov	r2, sl
 8001f0e:	4649      	mov	r1, r9
 8001f10:	4638      	mov	r0, r7
 8001f12:	47c0      	blx	r8
 8001f14:	3001      	adds	r0, #1
 8001f16:	d103      	bne.n	8001f20 <_printf_common+0xb0>
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f20:	3501      	adds	r5, #1
 8001f22:	e7c4      	b.n	8001eae <_printf_common+0x3e>
 8001f24:	2030      	movs	r0, #48	; 0x30
 8001f26:	18e1      	adds	r1, r4, r3
 8001f28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f32:	4422      	add	r2, r4
 8001f34:	3302      	adds	r3, #2
 8001f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f3a:	e7c5      	b.n	8001ec8 <_printf_common+0x58>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	4622      	mov	r2, r4
 8001f40:	4649      	mov	r1, r9
 8001f42:	4638      	mov	r0, r7
 8001f44:	47c0      	blx	r8
 8001f46:	3001      	adds	r0, #1
 8001f48:	d0e6      	beq.n	8001f18 <_printf_common+0xa8>
 8001f4a:	3601      	adds	r6, #1
 8001f4c:	e7d9      	b.n	8001f02 <_printf_common+0x92>
	...

08001f50 <_printf_i>:
 8001f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f54:	460c      	mov	r4, r1
 8001f56:	7e27      	ldrb	r7, [r4, #24]
 8001f58:	4691      	mov	r9, r2
 8001f5a:	2f78      	cmp	r7, #120	; 0x78
 8001f5c:	4680      	mov	r8, r0
 8001f5e:	469a      	mov	sl, r3
 8001f60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001f62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f66:	d807      	bhi.n	8001f78 <_printf_i+0x28>
 8001f68:	2f62      	cmp	r7, #98	; 0x62
 8001f6a:	d80a      	bhi.n	8001f82 <_printf_i+0x32>
 8001f6c:	2f00      	cmp	r7, #0
 8001f6e:	f000 80d9 	beq.w	8002124 <_printf_i+0x1d4>
 8001f72:	2f58      	cmp	r7, #88	; 0x58
 8001f74:	f000 80a4 	beq.w	80020c0 <_printf_i+0x170>
 8001f78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f80:	e03a      	b.n	8001ff8 <_printf_i+0xa8>
 8001f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f86:	2b15      	cmp	r3, #21
 8001f88:	d8f6      	bhi.n	8001f78 <_printf_i+0x28>
 8001f8a:	a001      	add	r0, pc, #4	; (adr r0, 8001f90 <_printf_i+0x40>)
 8001f8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001f90:	08001fe9 	.word	0x08001fe9
 8001f94:	08001ffd 	.word	0x08001ffd
 8001f98:	08001f79 	.word	0x08001f79
 8001f9c:	08001f79 	.word	0x08001f79
 8001fa0:	08001f79 	.word	0x08001f79
 8001fa4:	08001f79 	.word	0x08001f79
 8001fa8:	08001ffd 	.word	0x08001ffd
 8001fac:	08001f79 	.word	0x08001f79
 8001fb0:	08001f79 	.word	0x08001f79
 8001fb4:	08001f79 	.word	0x08001f79
 8001fb8:	08001f79 	.word	0x08001f79
 8001fbc:	0800210b 	.word	0x0800210b
 8001fc0:	0800202d 	.word	0x0800202d
 8001fc4:	080020ed 	.word	0x080020ed
 8001fc8:	08001f79 	.word	0x08001f79
 8001fcc:	08001f79 	.word	0x08001f79
 8001fd0:	0800212d 	.word	0x0800212d
 8001fd4:	08001f79 	.word	0x08001f79
 8001fd8:	0800202d 	.word	0x0800202d
 8001fdc:	08001f79 	.word	0x08001f79
 8001fe0:	08001f79 	.word	0x08001f79
 8001fe4:	080020f5 	.word	0x080020f5
 8001fe8:	680b      	ldr	r3, [r1, #0]
 8001fea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001fee:	1d1a      	adds	r2, r3, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	600a      	str	r2, [r1, #0]
 8001ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0a4      	b.n	8002146 <_printf_i+0x1f6>
 8001ffc:	6825      	ldr	r5, [r4, #0]
 8001ffe:	6808      	ldr	r0, [r1, #0]
 8002000:	062e      	lsls	r6, r5, #24
 8002002:	f100 0304 	add.w	r3, r0, #4
 8002006:	d50a      	bpl.n	800201e <_printf_i+0xce>
 8002008:	6805      	ldr	r5, [r0, #0]
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	2d00      	cmp	r5, #0
 800200e:	da03      	bge.n	8002018 <_printf_i+0xc8>
 8002010:	232d      	movs	r3, #45	; 0x2d
 8002012:	426d      	negs	r5, r5
 8002014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002018:	230a      	movs	r3, #10
 800201a:	485e      	ldr	r0, [pc, #376]	; (8002194 <_printf_i+0x244>)
 800201c:	e019      	b.n	8002052 <_printf_i+0x102>
 800201e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002022:	6805      	ldr	r5, [r0, #0]
 8002024:	600b      	str	r3, [r1, #0]
 8002026:	bf18      	it	ne
 8002028:	b22d      	sxthne	r5, r5
 800202a:	e7ef      	b.n	800200c <_printf_i+0xbc>
 800202c:	680b      	ldr	r3, [r1, #0]
 800202e:	6825      	ldr	r5, [r4, #0]
 8002030:	1d18      	adds	r0, r3, #4
 8002032:	6008      	str	r0, [r1, #0]
 8002034:	0628      	lsls	r0, r5, #24
 8002036:	d501      	bpl.n	800203c <_printf_i+0xec>
 8002038:	681d      	ldr	r5, [r3, #0]
 800203a:	e002      	b.n	8002042 <_printf_i+0xf2>
 800203c:	0669      	lsls	r1, r5, #25
 800203e:	d5fb      	bpl.n	8002038 <_printf_i+0xe8>
 8002040:	881d      	ldrh	r5, [r3, #0]
 8002042:	2f6f      	cmp	r7, #111	; 0x6f
 8002044:	bf0c      	ite	eq
 8002046:	2308      	moveq	r3, #8
 8002048:	230a      	movne	r3, #10
 800204a:	4852      	ldr	r0, [pc, #328]	; (8002194 <_printf_i+0x244>)
 800204c:	2100      	movs	r1, #0
 800204e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002052:	6866      	ldr	r6, [r4, #4]
 8002054:	2e00      	cmp	r6, #0
 8002056:	bfa8      	it	ge
 8002058:	6821      	ldrge	r1, [r4, #0]
 800205a:	60a6      	str	r6, [r4, #8]
 800205c:	bfa4      	itt	ge
 800205e:	f021 0104 	bicge.w	r1, r1, #4
 8002062:	6021      	strge	r1, [r4, #0]
 8002064:	b90d      	cbnz	r5, 800206a <_printf_i+0x11a>
 8002066:	2e00      	cmp	r6, #0
 8002068:	d04d      	beq.n	8002106 <_printf_i+0x1b6>
 800206a:	4616      	mov	r6, r2
 800206c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002070:	fb03 5711 	mls	r7, r3, r1, r5
 8002074:	5dc7      	ldrb	r7, [r0, r7]
 8002076:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800207a:	462f      	mov	r7, r5
 800207c:	42bb      	cmp	r3, r7
 800207e:	460d      	mov	r5, r1
 8002080:	d9f4      	bls.n	800206c <_printf_i+0x11c>
 8002082:	2b08      	cmp	r3, #8
 8002084:	d10b      	bne.n	800209e <_printf_i+0x14e>
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	07df      	lsls	r7, r3, #31
 800208a:	d508      	bpl.n	800209e <_printf_i+0x14e>
 800208c:	6923      	ldr	r3, [r4, #16]
 800208e:	6861      	ldr	r1, [r4, #4]
 8002090:	4299      	cmp	r1, r3
 8002092:	bfde      	ittt	le
 8002094:	2330      	movle	r3, #48	; 0x30
 8002096:	f806 3c01 	strble.w	r3, [r6, #-1]
 800209a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800209e:	1b92      	subs	r2, r2, r6
 80020a0:	6122      	str	r2, [r4, #16]
 80020a2:	464b      	mov	r3, r9
 80020a4:	4621      	mov	r1, r4
 80020a6:	4640      	mov	r0, r8
 80020a8:	f8cd a000 	str.w	sl, [sp]
 80020ac:	aa03      	add	r2, sp, #12
 80020ae:	f7ff fedf 	bl	8001e70 <_printf_common>
 80020b2:	3001      	adds	r0, #1
 80020b4:	d14c      	bne.n	8002150 <_printf_i+0x200>
 80020b6:	f04f 30ff 	mov.w	r0, #4294967295
 80020ba:	b004      	add	sp, #16
 80020bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020c0:	4834      	ldr	r0, [pc, #208]	; (8002194 <_printf_i+0x244>)
 80020c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80020c6:	680e      	ldr	r6, [r1, #0]
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80020ce:	061f      	lsls	r7, r3, #24
 80020d0:	600e      	str	r6, [r1, #0]
 80020d2:	d514      	bpl.n	80020fe <_printf_i+0x1ae>
 80020d4:	07d9      	lsls	r1, r3, #31
 80020d6:	bf44      	itt	mi
 80020d8:	f043 0320 	orrmi.w	r3, r3, #32
 80020dc:	6023      	strmi	r3, [r4, #0]
 80020de:	b91d      	cbnz	r5, 80020e8 <_printf_i+0x198>
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	f023 0320 	bic.w	r3, r3, #32
 80020e6:	6023      	str	r3, [r4, #0]
 80020e8:	2310      	movs	r3, #16
 80020ea:	e7af      	b.n	800204c <_printf_i+0xfc>
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	f043 0320 	orr.w	r3, r3, #32
 80020f2:	6023      	str	r3, [r4, #0]
 80020f4:	2378      	movs	r3, #120	; 0x78
 80020f6:	4828      	ldr	r0, [pc, #160]	; (8002198 <_printf_i+0x248>)
 80020f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80020fc:	e7e3      	b.n	80020c6 <_printf_i+0x176>
 80020fe:	065e      	lsls	r6, r3, #25
 8002100:	bf48      	it	mi
 8002102:	b2ad      	uxthmi	r5, r5
 8002104:	e7e6      	b.n	80020d4 <_printf_i+0x184>
 8002106:	4616      	mov	r6, r2
 8002108:	e7bb      	b.n	8002082 <_printf_i+0x132>
 800210a:	680b      	ldr	r3, [r1, #0]
 800210c:	6826      	ldr	r6, [r4, #0]
 800210e:	1d1d      	adds	r5, r3, #4
 8002110:	6960      	ldr	r0, [r4, #20]
 8002112:	600d      	str	r5, [r1, #0]
 8002114:	0635      	lsls	r5, r6, #24
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	d501      	bpl.n	800211e <_printf_i+0x1ce>
 800211a:	6018      	str	r0, [r3, #0]
 800211c:	e002      	b.n	8002124 <_printf_i+0x1d4>
 800211e:	0671      	lsls	r1, r6, #25
 8002120:	d5fb      	bpl.n	800211a <_printf_i+0x1ca>
 8002122:	8018      	strh	r0, [r3, #0]
 8002124:	2300      	movs	r3, #0
 8002126:	4616      	mov	r6, r2
 8002128:	6123      	str	r3, [r4, #16]
 800212a:	e7ba      	b.n	80020a2 <_printf_i+0x152>
 800212c:	680b      	ldr	r3, [r1, #0]
 800212e:	1d1a      	adds	r2, r3, #4
 8002130:	600a      	str	r2, [r1, #0]
 8002132:	681e      	ldr	r6, [r3, #0]
 8002134:	2100      	movs	r1, #0
 8002136:	4630      	mov	r0, r6
 8002138:	6862      	ldr	r2, [r4, #4]
 800213a:	f000 feb7 	bl	8002eac <memchr>
 800213e:	b108      	cbz	r0, 8002144 <_printf_i+0x1f4>
 8002140:	1b80      	subs	r0, r0, r6
 8002142:	6060      	str	r0, [r4, #4]
 8002144:	6863      	ldr	r3, [r4, #4]
 8002146:	6123      	str	r3, [r4, #16]
 8002148:	2300      	movs	r3, #0
 800214a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800214e:	e7a8      	b.n	80020a2 <_printf_i+0x152>
 8002150:	4632      	mov	r2, r6
 8002152:	4649      	mov	r1, r9
 8002154:	4640      	mov	r0, r8
 8002156:	6923      	ldr	r3, [r4, #16]
 8002158:	47d0      	blx	sl
 800215a:	3001      	adds	r0, #1
 800215c:	d0ab      	beq.n	80020b6 <_printf_i+0x166>
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	079b      	lsls	r3, r3, #30
 8002162:	d413      	bmi.n	800218c <_printf_i+0x23c>
 8002164:	68e0      	ldr	r0, [r4, #12]
 8002166:	9b03      	ldr	r3, [sp, #12]
 8002168:	4298      	cmp	r0, r3
 800216a:	bfb8      	it	lt
 800216c:	4618      	movlt	r0, r3
 800216e:	e7a4      	b.n	80020ba <_printf_i+0x16a>
 8002170:	2301      	movs	r3, #1
 8002172:	4632      	mov	r2, r6
 8002174:	4649      	mov	r1, r9
 8002176:	4640      	mov	r0, r8
 8002178:	47d0      	blx	sl
 800217a:	3001      	adds	r0, #1
 800217c:	d09b      	beq.n	80020b6 <_printf_i+0x166>
 800217e:	3501      	adds	r5, #1
 8002180:	68e3      	ldr	r3, [r4, #12]
 8002182:	9903      	ldr	r1, [sp, #12]
 8002184:	1a5b      	subs	r3, r3, r1
 8002186:	42ab      	cmp	r3, r5
 8002188:	dcf2      	bgt.n	8002170 <_printf_i+0x220>
 800218a:	e7eb      	b.n	8002164 <_printf_i+0x214>
 800218c:	2500      	movs	r5, #0
 800218e:	f104 0619 	add.w	r6, r4, #25
 8002192:	e7f5      	b.n	8002180 <_printf_i+0x230>
 8002194:	08004336 	.word	0x08004336
 8002198:	08004347 	.word	0x08004347

0800219c <quorem>:
 800219c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a0:	6903      	ldr	r3, [r0, #16]
 80021a2:	690c      	ldr	r4, [r1, #16]
 80021a4:	4607      	mov	r7, r0
 80021a6:	42a3      	cmp	r3, r4
 80021a8:	f2c0 8083 	blt.w	80022b2 <quorem+0x116>
 80021ac:	3c01      	subs	r4, #1
 80021ae:	f100 0514 	add.w	r5, r0, #20
 80021b2:	f101 0814 	add.w	r8, r1, #20
 80021b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80021c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80021c4:	3301      	adds	r3, #1
 80021c6:	429a      	cmp	r2, r3
 80021c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80021cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80021d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80021d4:	d332      	bcc.n	800223c <quorem+0xa0>
 80021d6:	f04f 0e00 	mov.w	lr, #0
 80021da:	4640      	mov	r0, r8
 80021dc:	46ac      	mov	ip, r5
 80021de:	46f2      	mov	sl, lr
 80021e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80021e4:	b293      	uxth	r3, r2
 80021e6:	fb06 e303 	mla	r3, r6, r3, lr
 80021ea:	0c12      	lsrs	r2, r2, #16
 80021ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80021f0:	fb06 e202 	mla	r2, r6, r2, lr
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	ebaa 0303 	sub.w	r3, sl, r3
 80021fa:	f8dc a000 	ldr.w	sl, [ip]
 80021fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002202:	fa1f fa8a 	uxth.w	sl, sl
 8002206:	4453      	add	r3, sl
 8002208:	fa1f fa82 	uxth.w	sl, r2
 800220c:	f8dc 2000 	ldr.w	r2, [ip]
 8002210:	4581      	cmp	r9, r0
 8002212:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8002216:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800221a:	b29b      	uxth	r3, r3
 800221c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002220:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002224:	f84c 3b04 	str.w	r3, [ip], #4
 8002228:	d2da      	bcs.n	80021e0 <quorem+0x44>
 800222a:	f855 300b 	ldr.w	r3, [r5, fp]
 800222e:	b92b      	cbnz	r3, 800223c <quorem+0xa0>
 8002230:	9b01      	ldr	r3, [sp, #4]
 8002232:	3b04      	subs	r3, #4
 8002234:	429d      	cmp	r5, r3
 8002236:	461a      	mov	r2, r3
 8002238:	d32f      	bcc.n	800229a <quorem+0xfe>
 800223a:	613c      	str	r4, [r7, #16]
 800223c:	4638      	mov	r0, r7
 800223e:	f001 f8bd 	bl	80033bc <__mcmp>
 8002242:	2800      	cmp	r0, #0
 8002244:	db25      	blt.n	8002292 <quorem+0xf6>
 8002246:	4628      	mov	r0, r5
 8002248:	f04f 0c00 	mov.w	ip, #0
 800224c:	3601      	adds	r6, #1
 800224e:	f858 1b04 	ldr.w	r1, [r8], #4
 8002252:	f8d0 e000 	ldr.w	lr, [r0]
 8002256:	b28b      	uxth	r3, r1
 8002258:	ebac 0303 	sub.w	r3, ip, r3
 800225c:	fa1f f28e 	uxth.w	r2, lr
 8002260:	4413      	add	r3, r2
 8002262:	0c0a      	lsrs	r2, r1, #16
 8002264:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002268:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800226c:	b29b      	uxth	r3, r3
 800226e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002272:	45c1      	cmp	r9, r8
 8002274:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002278:	f840 3b04 	str.w	r3, [r0], #4
 800227c:	d2e7      	bcs.n	800224e <quorem+0xb2>
 800227e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002286:	b922      	cbnz	r2, 8002292 <quorem+0xf6>
 8002288:	3b04      	subs	r3, #4
 800228a:	429d      	cmp	r5, r3
 800228c:	461a      	mov	r2, r3
 800228e:	d30a      	bcc.n	80022a6 <quorem+0x10a>
 8002290:	613c      	str	r4, [r7, #16]
 8002292:	4630      	mov	r0, r6
 8002294:	b003      	add	sp, #12
 8002296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	3b04      	subs	r3, #4
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d1cb      	bne.n	800223a <quorem+0x9e>
 80022a2:	3c01      	subs	r4, #1
 80022a4:	e7c6      	b.n	8002234 <quorem+0x98>
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	3b04      	subs	r3, #4
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	d1f0      	bne.n	8002290 <quorem+0xf4>
 80022ae:	3c01      	subs	r4, #1
 80022b0:	e7eb      	b.n	800228a <quorem+0xee>
 80022b2:	2000      	movs	r0, #0
 80022b4:	e7ee      	b.n	8002294 <quorem+0xf8>
	...

080022b8 <_dtoa_r>:
 80022b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022bc:	4616      	mov	r6, r2
 80022be:	461f      	mov	r7, r3
 80022c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80022c2:	b099      	sub	sp, #100	; 0x64
 80022c4:	4605      	mov	r5, r0
 80022c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80022ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80022ce:	b974      	cbnz	r4, 80022ee <_dtoa_r+0x36>
 80022d0:	2010      	movs	r0, #16
 80022d2:	f000 fde3 	bl	8002e9c <malloc>
 80022d6:	4602      	mov	r2, r0
 80022d8:	6268      	str	r0, [r5, #36]	; 0x24
 80022da:	b920      	cbnz	r0, 80022e6 <_dtoa_r+0x2e>
 80022dc:	21ea      	movs	r1, #234	; 0xea
 80022de:	4bae      	ldr	r3, [pc, #696]	; (8002598 <_dtoa_r+0x2e0>)
 80022e0:	48ae      	ldr	r0, [pc, #696]	; (800259c <_dtoa_r+0x2e4>)
 80022e2:	f001 fa37 	bl	8003754 <__assert_func>
 80022e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80022ea:	6004      	str	r4, [r0, #0]
 80022ec:	60c4      	str	r4, [r0, #12]
 80022ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80022f0:	6819      	ldr	r1, [r3, #0]
 80022f2:	b151      	cbz	r1, 800230a <_dtoa_r+0x52>
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	2301      	movs	r3, #1
 80022f8:	4093      	lsls	r3, r2
 80022fa:	604a      	str	r2, [r1, #4]
 80022fc:	608b      	str	r3, [r1, #8]
 80022fe:	4628      	mov	r0, r5
 8002300:	f000 fe22 	bl	8002f48 <_Bfree>
 8002304:	2200      	movs	r2, #0
 8002306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	1e3b      	subs	r3, r7, #0
 800230c:	bfaf      	iteee	ge
 800230e:	2300      	movge	r3, #0
 8002310:	2201      	movlt	r2, #1
 8002312:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002316:	9305      	strlt	r3, [sp, #20]
 8002318:	bfa8      	it	ge
 800231a:	f8c8 3000 	strge.w	r3, [r8]
 800231e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002322:	4b9f      	ldr	r3, [pc, #636]	; (80025a0 <_dtoa_r+0x2e8>)
 8002324:	bfb8      	it	lt
 8002326:	f8c8 2000 	strlt.w	r2, [r8]
 800232a:	ea33 0309 	bics.w	r3, r3, r9
 800232e:	d119      	bne.n	8002364 <_dtoa_r+0xac>
 8002330:	f242 730f 	movw	r3, #9999	; 0x270f
 8002334:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800233c:	4333      	orrs	r3, r6
 800233e:	f000 8580 	beq.w	8002e42 <_dtoa_r+0xb8a>
 8002342:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002344:	b953      	cbnz	r3, 800235c <_dtoa_r+0xa4>
 8002346:	4b97      	ldr	r3, [pc, #604]	; (80025a4 <_dtoa_r+0x2ec>)
 8002348:	e022      	b.n	8002390 <_dtoa_r+0xd8>
 800234a:	4b97      	ldr	r3, [pc, #604]	; (80025a8 <_dtoa_r+0x2f0>)
 800234c:	9308      	str	r3, [sp, #32]
 800234e:	3308      	adds	r3, #8
 8002350:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	9808      	ldr	r0, [sp, #32]
 8002356:	b019      	add	sp, #100	; 0x64
 8002358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800235c:	4b91      	ldr	r3, [pc, #580]	; (80025a4 <_dtoa_r+0x2ec>)
 800235e:	9308      	str	r3, [sp, #32]
 8002360:	3303      	adds	r3, #3
 8002362:	e7f5      	b.n	8002350 <_dtoa_r+0x98>
 8002364:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002368:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800236c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002370:	2200      	movs	r2, #0
 8002372:	2300      	movs	r3, #0
 8002374:	f7fe fb18 	bl	80009a8 <__aeabi_dcmpeq>
 8002378:	4680      	mov	r8, r0
 800237a:	b158      	cbz	r0, 8002394 <_dtoa_r+0xdc>
 800237c:	2301      	movs	r3, #1
 800237e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8559 	beq.w	8002e3c <_dtoa_r+0xb84>
 800238a:	4888      	ldr	r0, [pc, #544]	; (80025ac <_dtoa_r+0x2f4>)
 800238c:	6018      	str	r0, [r3, #0]
 800238e:	1e43      	subs	r3, r0, #1
 8002390:	9308      	str	r3, [sp, #32]
 8002392:	e7df      	b.n	8002354 <_dtoa_r+0x9c>
 8002394:	ab16      	add	r3, sp, #88	; 0x58
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	ab17      	add	r3, sp, #92	; 0x5c
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	4628      	mov	r0, r5
 800239e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80023a2:	f001 f8b7 	bl	8003514 <__d2b>
 80023a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80023aa:	4682      	mov	sl, r0
 80023ac:	2c00      	cmp	r4, #0
 80023ae:	d07e      	beq.n	80024ae <_dtoa_r+0x1f6>
 80023b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80023b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80023ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80023c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80023c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80023ca:	2200      	movs	r2, #0
 80023cc:	4b78      	ldr	r3, [pc, #480]	; (80025b0 <_dtoa_r+0x2f8>)
 80023ce:	f7fd fecb 	bl	8000168 <__aeabi_dsub>
 80023d2:	a36b      	add	r3, pc, #428	; (adr r3, 8002580 <_dtoa_r+0x2c8>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	f7fe f87e 	bl	80004d8 <__aeabi_dmul>
 80023dc:	a36a      	add	r3, pc, #424	; (adr r3, 8002588 <_dtoa_r+0x2d0>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	f7fd fec3 	bl	800016c <__adddf3>
 80023e6:	4606      	mov	r6, r0
 80023e8:	4620      	mov	r0, r4
 80023ea:	460f      	mov	r7, r1
 80023ec:	f7fe f80a 	bl	8000404 <__aeabi_i2d>
 80023f0:	a367      	add	r3, pc, #412	; (adr r3, 8002590 <_dtoa_r+0x2d8>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	f7fe f86f 	bl	80004d8 <__aeabi_dmul>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4630      	mov	r0, r6
 8002400:	4639      	mov	r1, r7
 8002402:	f7fd feb3 	bl	800016c <__adddf3>
 8002406:	4606      	mov	r6, r0
 8002408:	460f      	mov	r7, r1
 800240a:	f7fe fb15 	bl	8000a38 <__aeabi_d2iz>
 800240e:	2200      	movs	r2, #0
 8002410:	4681      	mov	r9, r0
 8002412:	2300      	movs	r3, #0
 8002414:	4630      	mov	r0, r6
 8002416:	4639      	mov	r1, r7
 8002418:	f7fe fad0 	bl	80009bc <__aeabi_dcmplt>
 800241c:	b148      	cbz	r0, 8002432 <_dtoa_r+0x17a>
 800241e:	4648      	mov	r0, r9
 8002420:	f7fd fff0 	bl	8000404 <__aeabi_i2d>
 8002424:	4632      	mov	r2, r6
 8002426:	463b      	mov	r3, r7
 8002428:	f7fe fabe 	bl	80009a8 <__aeabi_dcmpeq>
 800242c:	b908      	cbnz	r0, 8002432 <_dtoa_r+0x17a>
 800242e:	f109 39ff 	add.w	r9, r9, #4294967295
 8002432:	f1b9 0f16 	cmp.w	r9, #22
 8002436:	d857      	bhi.n	80024e8 <_dtoa_r+0x230>
 8002438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800243c:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <_dtoa_r+0x2fc>)
 800243e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	f7fe fab9 	bl	80009bc <__aeabi_dcmplt>
 800244a:	2800      	cmp	r0, #0
 800244c:	d04e      	beq.n	80024ec <_dtoa_r+0x234>
 800244e:	2300      	movs	r3, #0
 8002450:	f109 39ff 	add.w	r9, r9, #4294967295
 8002454:	930f      	str	r3, [sp, #60]	; 0x3c
 8002456:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002458:	1b1c      	subs	r4, r3, r4
 800245a:	1e63      	subs	r3, r4, #1
 800245c:	9309      	str	r3, [sp, #36]	; 0x24
 800245e:	bf49      	itett	mi
 8002460:	f1c4 0301 	rsbmi	r3, r4, #1
 8002464:	2300      	movpl	r3, #0
 8002466:	9306      	strmi	r3, [sp, #24]
 8002468:	2300      	movmi	r3, #0
 800246a:	bf54      	ite	pl
 800246c:	9306      	strpl	r3, [sp, #24]
 800246e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8002470:	f1b9 0f00 	cmp.w	r9, #0
 8002474:	db3c      	blt.n	80024f0 <_dtoa_r+0x238>
 8002476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002478:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800247c:	444b      	add	r3, r9
 800247e:	9309      	str	r3, [sp, #36]	; 0x24
 8002480:	2300      	movs	r3, #0
 8002482:	930a      	str	r3, [sp, #40]	; 0x28
 8002484:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002486:	2b09      	cmp	r3, #9
 8002488:	d86c      	bhi.n	8002564 <_dtoa_r+0x2ac>
 800248a:	2b05      	cmp	r3, #5
 800248c:	bfc4      	itt	gt
 800248e:	3b04      	subgt	r3, #4
 8002490:	9322      	strgt	r3, [sp, #136]	; 0x88
 8002492:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002494:	bfc8      	it	gt
 8002496:	2400      	movgt	r4, #0
 8002498:	f1a3 0302 	sub.w	r3, r3, #2
 800249c:	bfd8      	it	le
 800249e:	2401      	movle	r4, #1
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	f200 808b 	bhi.w	80025bc <_dtoa_r+0x304>
 80024a6:	e8df f003 	tbb	[pc, r3]
 80024aa:	4f2d      	.short	0x4f2d
 80024ac:	5b4d      	.short	0x5b4d
 80024ae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80024b2:	441c      	add	r4, r3
 80024b4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	bfc3      	ittte	gt
 80024bc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80024c0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80024c4:	fa09 f303 	lslgt.w	r3, r9, r3
 80024c8:	f1c3 0320 	rsble	r3, r3, #32
 80024cc:	bfc6      	itte	gt
 80024ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80024d2:	4318      	orrgt	r0, r3
 80024d4:	fa06 f003 	lslle.w	r0, r6, r3
 80024d8:	f7fd ff84 	bl	80003e4 <__aeabi_ui2d>
 80024dc:	2301      	movs	r3, #1
 80024de:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80024e2:	3c01      	subs	r4, #1
 80024e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80024e6:	e770      	b.n	80023ca <_dtoa_r+0x112>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e7b3      	b.n	8002454 <_dtoa_r+0x19c>
 80024ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80024ee:	e7b2      	b.n	8002456 <_dtoa_r+0x19e>
 80024f0:	9b06      	ldr	r3, [sp, #24]
 80024f2:	eba3 0309 	sub.w	r3, r3, r9
 80024f6:	9306      	str	r3, [sp, #24]
 80024f8:	f1c9 0300 	rsb	r3, r9, #0
 80024fc:	930a      	str	r3, [sp, #40]	; 0x28
 80024fe:	2300      	movs	r3, #0
 8002500:	930e      	str	r3, [sp, #56]	; 0x38
 8002502:	e7bf      	b.n	8002484 <_dtoa_r+0x1cc>
 8002504:	2300      	movs	r3, #0
 8002506:	930b      	str	r3, [sp, #44]	; 0x2c
 8002508:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800250a:	2b00      	cmp	r3, #0
 800250c:	dc59      	bgt.n	80025c2 <_dtoa_r+0x30a>
 800250e:	f04f 0b01 	mov.w	fp, #1
 8002512:	465b      	mov	r3, fp
 8002514:	f8cd b008 	str.w	fp, [sp, #8]
 8002518:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800251c:	2200      	movs	r2, #0
 800251e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002520:	6042      	str	r2, [r0, #4]
 8002522:	2204      	movs	r2, #4
 8002524:	f102 0614 	add.w	r6, r2, #20
 8002528:	429e      	cmp	r6, r3
 800252a:	6841      	ldr	r1, [r0, #4]
 800252c:	d94f      	bls.n	80025ce <_dtoa_r+0x316>
 800252e:	4628      	mov	r0, r5
 8002530:	f000 fcca 	bl	8002ec8 <_Balloc>
 8002534:	9008      	str	r0, [sp, #32]
 8002536:	2800      	cmp	r0, #0
 8002538:	d14d      	bne.n	80025d6 <_dtoa_r+0x31e>
 800253a:	4602      	mov	r2, r0
 800253c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <_dtoa_r+0x300>)
 8002542:	e6cd      	b.n	80022e0 <_dtoa_r+0x28>
 8002544:	2301      	movs	r3, #1
 8002546:	e7de      	b.n	8002506 <_dtoa_r+0x24e>
 8002548:	2300      	movs	r3, #0
 800254a:	930b      	str	r3, [sp, #44]	; 0x2c
 800254c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800254e:	eb09 0b03 	add.w	fp, r9, r3
 8002552:	f10b 0301 	add.w	r3, fp, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	9302      	str	r3, [sp, #8]
 800255a:	bfb8      	it	lt
 800255c:	2301      	movlt	r3, #1
 800255e:	e7dd      	b.n	800251c <_dtoa_r+0x264>
 8002560:	2301      	movs	r3, #1
 8002562:	e7f2      	b.n	800254a <_dtoa_r+0x292>
 8002564:	2401      	movs	r4, #1
 8002566:	2300      	movs	r3, #0
 8002568:	940b      	str	r4, [sp, #44]	; 0x2c
 800256a:	9322      	str	r3, [sp, #136]	; 0x88
 800256c:	f04f 3bff 	mov.w	fp, #4294967295
 8002570:	2200      	movs	r2, #0
 8002572:	2312      	movs	r3, #18
 8002574:	f8cd b008 	str.w	fp, [sp, #8]
 8002578:	9223      	str	r2, [sp, #140]	; 0x8c
 800257a:	e7cf      	b.n	800251c <_dtoa_r+0x264>
 800257c:	f3af 8000 	nop.w
 8002580:	636f4361 	.word	0x636f4361
 8002584:	3fd287a7 	.word	0x3fd287a7
 8002588:	8b60c8b3 	.word	0x8b60c8b3
 800258c:	3fc68a28 	.word	0x3fc68a28
 8002590:	509f79fb 	.word	0x509f79fb
 8002594:	3fd34413 	.word	0x3fd34413
 8002598:	08004365 	.word	0x08004365
 800259c:	0800437c 	.word	0x0800437c
 80025a0:	7ff00000 	.word	0x7ff00000
 80025a4:	08004361 	.word	0x08004361
 80025a8:	08004358 	.word	0x08004358
 80025ac:	08004335 	.word	0x08004335
 80025b0:	3ff80000 	.word	0x3ff80000
 80025b4:	08004478 	.word	0x08004478
 80025b8:	080043db 	.word	0x080043db
 80025bc:	2301      	movs	r3, #1
 80025be:	930b      	str	r3, [sp, #44]	; 0x2c
 80025c0:	e7d4      	b.n	800256c <_dtoa_r+0x2b4>
 80025c2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80025c6:	465b      	mov	r3, fp
 80025c8:	f8cd b008 	str.w	fp, [sp, #8]
 80025cc:	e7a6      	b.n	800251c <_dtoa_r+0x264>
 80025ce:	3101      	adds	r1, #1
 80025d0:	6041      	str	r1, [r0, #4]
 80025d2:	0052      	lsls	r2, r2, #1
 80025d4:	e7a6      	b.n	8002524 <_dtoa_r+0x26c>
 80025d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80025d8:	9a08      	ldr	r2, [sp, #32]
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	9b02      	ldr	r3, [sp, #8]
 80025de:	2b0e      	cmp	r3, #14
 80025e0:	f200 80a8 	bhi.w	8002734 <_dtoa_r+0x47c>
 80025e4:	2c00      	cmp	r4, #0
 80025e6:	f000 80a5 	beq.w	8002734 <_dtoa_r+0x47c>
 80025ea:	f1b9 0f00 	cmp.w	r9, #0
 80025ee:	dd34      	ble.n	800265a <_dtoa_r+0x3a2>
 80025f0:	4a9a      	ldr	r2, [pc, #616]	; (800285c <_dtoa_r+0x5a4>)
 80025f2:	f009 030f 	and.w	r3, r9, #15
 80025f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80025fa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80025fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002602:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002606:	ea4f 1429 	mov.w	r4, r9, asr #4
 800260a:	d016      	beq.n	800263a <_dtoa_r+0x382>
 800260c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002610:	4b93      	ldr	r3, [pc, #588]	; (8002860 <_dtoa_r+0x5a8>)
 8002612:	2703      	movs	r7, #3
 8002614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002618:	f7fe f888 	bl	800072c <__aeabi_ddiv>
 800261c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002620:	f004 040f 	and.w	r4, r4, #15
 8002624:	4e8e      	ldr	r6, [pc, #568]	; (8002860 <_dtoa_r+0x5a8>)
 8002626:	b954      	cbnz	r4, 800263e <_dtoa_r+0x386>
 8002628:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800262c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002630:	f7fe f87c 	bl	800072c <__aeabi_ddiv>
 8002634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002638:	e029      	b.n	800268e <_dtoa_r+0x3d6>
 800263a:	2702      	movs	r7, #2
 800263c:	e7f2      	b.n	8002624 <_dtoa_r+0x36c>
 800263e:	07e1      	lsls	r1, r4, #31
 8002640:	d508      	bpl.n	8002654 <_dtoa_r+0x39c>
 8002642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002646:	e9d6 2300 	ldrd	r2, r3, [r6]
 800264a:	f7fd ff45 	bl	80004d8 <__aeabi_dmul>
 800264e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002652:	3701      	adds	r7, #1
 8002654:	1064      	asrs	r4, r4, #1
 8002656:	3608      	adds	r6, #8
 8002658:	e7e5      	b.n	8002626 <_dtoa_r+0x36e>
 800265a:	f000 80a5 	beq.w	80027a8 <_dtoa_r+0x4f0>
 800265e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002662:	f1c9 0400 	rsb	r4, r9, #0
 8002666:	4b7d      	ldr	r3, [pc, #500]	; (800285c <_dtoa_r+0x5a4>)
 8002668:	f004 020f 	and.w	r2, r4, #15
 800266c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	f7fd ff30 	bl	80004d8 <__aeabi_dmul>
 8002678:	2702      	movs	r7, #2
 800267a:	2300      	movs	r3, #0
 800267c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002680:	4e77      	ldr	r6, [pc, #476]	; (8002860 <_dtoa_r+0x5a8>)
 8002682:	1124      	asrs	r4, r4, #4
 8002684:	2c00      	cmp	r4, #0
 8002686:	f040 8084 	bne.w	8002792 <_dtoa_r+0x4da>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1d2      	bne.n	8002634 <_dtoa_r+0x37c>
 800268e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 808b 	beq.w	80027ac <_dtoa_r+0x4f4>
 8002696:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800269a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800269e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80026a2:	2200      	movs	r2, #0
 80026a4:	4b6f      	ldr	r3, [pc, #444]	; (8002864 <_dtoa_r+0x5ac>)
 80026a6:	f7fe f989 	bl	80009bc <__aeabi_dcmplt>
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d07e      	beq.n	80027ac <_dtoa_r+0x4f4>
 80026ae:	9b02      	ldr	r3, [sp, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d07b      	beq.n	80027ac <_dtoa_r+0x4f4>
 80026b4:	f1bb 0f00 	cmp.w	fp, #0
 80026b8:	dd38      	ble.n	800272c <_dtoa_r+0x474>
 80026ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80026be:	2200      	movs	r2, #0
 80026c0:	4b69      	ldr	r3, [pc, #420]	; (8002868 <_dtoa_r+0x5b0>)
 80026c2:	f7fd ff09 	bl	80004d8 <__aeabi_dmul>
 80026c6:	465c      	mov	r4, fp
 80026c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80026cc:	f109 38ff 	add.w	r8, r9, #4294967295
 80026d0:	3701      	adds	r7, #1
 80026d2:	4638      	mov	r0, r7
 80026d4:	f7fd fe96 	bl	8000404 <__aeabi_i2d>
 80026d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80026dc:	f7fd fefc 	bl	80004d8 <__aeabi_dmul>
 80026e0:	2200      	movs	r2, #0
 80026e2:	4b62      	ldr	r3, [pc, #392]	; (800286c <_dtoa_r+0x5b4>)
 80026e4:	f7fd fd42 	bl	800016c <__adddf3>
 80026e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80026ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80026f0:	9611      	str	r6, [sp, #68]	; 0x44
 80026f2:	2c00      	cmp	r4, #0
 80026f4:	d15d      	bne.n	80027b2 <_dtoa_r+0x4fa>
 80026f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80026fa:	2200      	movs	r2, #0
 80026fc:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <_dtoa_r+0x5b8>)
 80026fe:	f7fd fd33 	bl	8000168 <__aeabi_dsub>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800270a:	4633      	mov	r3, r6
 800270c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800270e:	f7fe f973 	bl	80009f8 <__aeabi_dcmpgt>
 8002712:	2800      	cmp	r0, #0
 8002714:	f040 829e 	bne.w	8002c54 <_dtoa_r+0x99c>
 8002718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800271c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800271e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8002722:	f7fe f94b 	bl	80009bc <__aeabi_dcmplt>
 8002726:	2800      	cmp	r0, #0
 8002728:	f040 8292 	bne.w	8002c50 <_dtoa_r+0x998>
 800272c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8002730:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002736:	2b00      	cmp	r3, #0
 8002738:	f2c0 8153 	blt.w	80029e2 <_dtoa_r+0x72a>
 800273c:	f1b9 0f0e 	cmp.w	r9, #14
 8002740:	f300 814f 	bgt.w	80029e2 <_dtoa_r+0x72a>
 8002744:	4b45      	ldr	r3, [pc, #276]	; (800285c <_dtoa_r+0x5a4>)
 8002746:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800274a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800274e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8002752:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002754:	2b00      	cmp	r3, #0
 8002756:	f280 80db 	bge.w	8002910 <_dtoa_r+0x658>
 800275a:	9b02      	ldr	r3, [sp, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f300 80d7 	bgt.w	8002910 <_dtoa_r+0x658>
 8002762:	f040 8274 	bne.w	8002c4e <_dtoa_r+0x996>
 8002766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800276a:	2200      	movs	r2, #0
 800276c:	4b40      	ldr	r3, [pc, #256]	; (8002870 <_dtoa_r+0x5b8>)
 800276e:	f7fd feb3 	bl	80004d8 <__aeabi_dmul>
 8002772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002776:	f7fe f935 	bl	80009e4 <__aeabi_dcmpge>
 800277a:	9c02      	ldr	r4, [sp, #8]
 800277c:	4626      	mov	r6, r4
 800277e:	2800      	cmp	r0, #0
 8002780:	f040 824a 	bne.w	8002c18 <_dtoa_r+0x960>
 8002784:	2331      	movs	r3, #49	; 0x31
 8002786:	9f08      	ldr	r7, [sp, #32]
 8002788:	f109 0901 	add.w	r9, r9, #1
 800278c:	f807 3b01 	strb.w	r3, [r7], #1
 8002790:	e246      	b.n	8002c20 <_dtoa_r+0x968>
 8002792:	07e2      	lsls	r2, r4, #31
 8002794:	d505      	bpl.n	80027a2 <_dtoa_r+0x4ea>
 8002796:	e9d6 2300 	ldrd	r2, r3, [r6]
 800279a:	f7fd fe9d 	bl	80004d8 <__aeabi_dmul>
 800279e:	2301      	movs	r3, #1
 80027a0:	3701      	adds	r7, #1
 80027a2:	1064      	asrs	r4, r4, #1
 80027a4:	3608      	adds	r6, #8
 80027a6:	e76d      	b.n	8002684 <_dtoa_r+0x3cc>
 80027a8:	2702      	movs	r7, #2
 80027aa:	e770      	b.n	800268e <_dtoa_r+0x3d6>
 80027ac:	46c8      	mov	r8, r9
 80027ae:	9c02      	ldr	r4, [sp, #8]
 80027b0:	e78f      	b.n	80026d2 <_dtoa_r+0x41a>
 80027b2:	9908      	ldr	r1, [sp, #32]
 80027b4:	4b29      	ldr	r3, [pc, #164]	; (800285c <_dtoa_r+0x5a4>)
 80027b6:	4421      	add	r1, r4
 80027b8:	9112      	str	r1, [sp, #72]	; 0x48
 80027ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80027bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80027c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80027c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80027c8:	2900      	cmp	r1, #0
 80027ca:	d055      	beq.n	8002878 <_dtoa_r+0x5c0>
 80027cc:	2000      	movs	r0, #0
 80027ce:	4929      	ldr	r1, [pc, #164]	; (8002874 <_dtoa_r+0x5bc>)
 80027d0:	f7fd ffac 	bl	800072c <__aeabi_ddiv>
 80027d4:	463b      	mov	r3, r7
 80027d6:	4632      	mov	r2, r6
 80027d8:	f7fd fcc6 	bl	8000168 <__aeabi_dsub>
 80027dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80027e0:	9f08      	ldr	r7, [sp, #32]
 80027e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80027e6:	f7fe f927 	bl	8000a38 <__aeabi_d2iz>
 80027ea:	4604      	mov	r4, r0
 80027ec:	f7fd fe0a 	bl	8000404 <__aeabi_i2d>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80027f8:	f7fd fcb6 	bl	8000168 <__aeabi_dsub>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	3430      	adds	r4, #48	; 0x30
 8002802:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800280a:	f807 4b01 	strb.w	r4, [r7], #1
 800280e:	f7fe f8d5 	bl	80009bc <__aeabi_dcmplt>
 8002812:	2800      	cmp	r0, #0
 8002814:	d174      	bne.n	8002900 <_dtoa_r+0x648>
 8002816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800281a:	2000      	movs	r0, #0
 800281c:	4911      	ldr	r1, [pc, #68]	; (8002864 <_dtoa_r+0x5ac>)
 800281e:	f7fd fca3 	bl	8000168 <__aeabi_dsub>
 8002822:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002826:	f7fe f8c9 	bl	80009bc <__aeabi_dcmplt>
 800282a:	2800      	cmp	r0, #0
 800282c:	f040 80b6 	bne.w	800299c <_dtoa_r+0x6e4>
 8002830:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002832:	429f      	cmp	r7, r3
 8002834:	f43f af7a 	beq.w	800272c <_dtoa_r+0x474>
 8002838:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800283c:	2200      	movs	r2, #0
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <_dtoa_r+0x5b0>)
 8002840:	f7fd fe4a 	bl	80004d8 <__aeabi_dmul>
 8002844:	2200      	movs	r2, #0
 8002846:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800284a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <_dtoa_r+0x5b0>)
 8002850:	f7fd fe42 	bl	80004d8 <__aeabi_dmul>
 8002854:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002858:	e7c3      	b.n	80027e2 <_dtoa_r+0x52a>
 800285a:	bf00      	nop
 800285c:	08004478 	.word	0x08004478
 8002860:	08004450 	.word	0x08004450
 8002864:	3ff00000 	.word	0x3ff00000
 8002868:	40240000 	.word	0x40240000
 800286c:	401c0000 	.word	0x401c0000
 8002870:	40140000 	.word	0x40140000
 8002874:	3fe00000 	.word	0x3fe00000
 8002878:	4630      	mov	r0, r6
 800287a:	4639      	mov	r1, r7
 800287c:	f7fd fe2c 	bl	80004d8 <__aeabi_dmul>
 8002880:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002882:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002886:	9c08      	ldr	r4, [sp, #32]
 8002888:	9314      	str	r3, [sp, #80]	; 0x50
 800288a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800288e:	f7fe f8d3 	bl	8000a38 <__aeabi_d2iz>
 8002892:	9015      	str	r0, [sp, #84]	; 0x54
 8002894:	f7fd fdb6 	bl	8000404 <__aeabi_i2d>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80028a0:	f7fd fc62 	bl	8000168 <__aeabi_dsub>
 80028a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80028a6:	4606      	mov	r6, r0
 80028a8:	3330      	adds	r3, #48	; 0x30
 80028aa:	f804 3b01 	strb.w	r3, [r4], #1
 80028ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80028b0:	460f      	mov	r7, r1
 80028b2:	429c      	cmp	r4, r3
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	d124      	bne.n	8002904 <_dtoa_r+0x64c>
 80028ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80028be:	4bb3      	ldr	r3, [pc, #716]	; (8002b8c <_dtoa_r+0x8d4>)
 80028c0:	f7fd fc54 	bl	800016c <__adddf3>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4630      	mov	r0, r6
 80028ca:	4639      	mov	r1, r7
 80028cc:	f7fe f894 	bl	80009f8 <__aeabi_dcmpgt>
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d162      	bne.n	800299a <_dtoa_r+0x6e2>
 80028d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80028d8:	2000      	movs	r0, #0
 80028da:	49ac      	ldr	r1, [pc, #688]	; (8002b8c <_dtoa_r+0x8d4>)
 80028dc:	f7fd fc44 	bl	8000168 <__aeabi_dsub>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4630      	mov	r0, r6
 80028e6:	4639      	mov	r1, r7
 80028e8:	f7fe f868 	bl	80009bc <__aeabi_dcmplt>
 80028ec:	2800      	cmp	r0, #0
 80028ee:	f43f af1d 	beq.w	800272c <_dtoa_r+0x474>
 80028f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80028f4:	1e7b      	subs	r3, r7, #1
 80028f6:	9314      	str	r3, [sp, #80]	; 0x50
 80028f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80028fc:	2b30      	cmp	r3, #48	; 0x30
 80028fe:	d0f8      	beq.n	80028f2 <_dtoa_r+0x63a>
 8002900:	46c1      	mov	r9, r8
 8002902:	e03a      	b.n	800297a <_dtoa_r+0x6c2>
 8002904:	4ba2      	ldr	r3, [pc, #648]	; (8002b90 <_dtoa_r+0x8d8>)
 8002906:	f7fd fde7 	bl	80004d8 <__aeabi_dmul>
 800290a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800290e:	e7bc      	b.n	800288a <_dtoa_r+0x5d2>
 8002910:	9f08      	ldr	r7, [sp, #32]
 8002912:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002916:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800291a:	f7fd ff07 	bl	800072c <__aeabi_ddiv>
 800291e:	f7fe f88b 	bl	8000a38 <__aeabi_d2iz>
 8002922:	4604      	mov	r4, r0
 8002924:	f7fd fd6e 	bl	8000404 <__aeabi_i2d>
 8002928:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800292c:	f7fd fdd4 	bl	80004d8 <__aeabi_dmul>
 8002930:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8002934:	460b      	mov	r3, r1
 8002936:	4602      	mov	r2, r0
 8002938:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800293c:	f7fd fc14 	bl	8000168 <__aeabi_dsub>
 8002940:	f807 6b01 	strb.w	r6, [r7], #1
 8002944:	9e08      	ldr	r6, [sp, #32]
 8002946:	9b02      	ldr	r3, [sp, #8]
 8002948:	1bbe      	subs	r6, r7, r6
 800294a:	42b3      	cmp	r3, r6
 800294c:	d13a      	bne.n	80029c4 <_dtoa_r+0x70c>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	f7fd fc0b 	bl	800016c <__adddf3>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800295e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002962:	f7fe f849 	bl	80009f8 <__aeabi_dcmpgt>
 8002966:	bb58      	cbnz	r0, 80029c0 <_dtoa_r+0x708>
 8002968:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800296c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002970:	f7fe f81a 	bl	80009a8 <__aeabi_dcmpeq>
 8002974:	b108      	cbz	r0, 800297a <_dtoa_r+0x6c2>
 8002976:	07e1      	lsls	r1, r4, #31
 8002978:	d422      	bmi.n	80029c0 <_dtoa_r+0x708>
 800297a:	4628      	mov	r0, r5
 800297c:	4651      	mov	r1, sl
 800297e:	f000 fae3 	bl	8002f48 <_Bfree>
 8002982:	2300      	movs	r3, #0
 8002984:	703b      	strb	r3, [r7, #0]
 8002986:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002988:	f109 0001 	add.w	r0, r9, #1
 800298c:	6018      	str	r0, [r3, #0]
 800298e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002990:	2b00      	cmp	r3, #0
 8002992:	f43f acdf 	beq.w	8002354 <_dtoa_r+0x9c>
 8002996:	601f      	str	r7, [r3, #0]
 8002998:	e4dc      	b.n	8002354 <_dtoa_r+0x9c>
 800299a:	4627      	mov	r7, r4
 800299c:	463b      	mov	r3, r7
 800299e:	461f      	mov	r7, r3
 80029a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80029a4:	2a39      	cmp	r2, #57	; 0x39
 80029a6:	d107      	bne.n	80029b8 <_dtoa_r+0x700>
 80029a8:	9a08      	ldr	r2, [sp, #32]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d1f7      	bne.n	800299e <_dtoa_r+0x6e6>
 80029ae:	2230      	movs	r2, #48	; 0x30
 80029b0:	9908      	ldr	r1, [sp, #32]
 80029b2:	f108 0801 	add.w	r8, r8, #1
 80029b6:	700a      	strb	r2, [r1, #0]
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	3201      	adds	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e79f      	b.n	8002900 <_dtoa_r+0x648>
 80029c0:	46c8      	mov	r8, r9
 80029c2:	e7eb      	b.n	800299c <_dtoa_r+0x6e4>
 80029c4:	2200      	movs	r2, #0
 80029c6:	4b72      	ldr	r3, [pc, #456]	; (8002b90 <_dtoa_r+0x8d8>)
 80029c8:	f7fd fd86 	bl	80004d8 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80029d4:	2200      	movs	r2, #0
 80029d6:	2300      	movs	r3, #0
 80029d8:	f7fd ffe6 	bl	80009a8 <__aeabi_dcmpeq>
 80029dc:	2800      	cmp	r0, #0
 80029de:	d098      	beq.n	8002912 <_dtoa_r+0x65a>
 80029e0:	e7cb      	b.n	800297a <_dtoa_r+0x6c2>
 80029e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80029e4:	2a00      	cmp	r2, #0
 80029e6:	f000 80cd 	beq.w	8002b84 <_dtoa_r+0x8cc>
 80029ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80029ec:	2a01      	cmp	r2, #1
 80029ee:	f300 80af 	bgt.w	8002b50 <_dtoa_r+0x898>
 80029f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	f000 80a7 	beq.w	8002b48 <_dtoa_r+0x890>
 80029fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80029fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002a00:	9f06      	ldr	r7, [sp, #24]
 8002a02:	9a06      	ldr	r2, [sp, #24]
 8002a04:	2101      	movs	r1, #1
 8002a06:	441a      	add	r2, r3
 8002a08:	9206      	str	r2, [sp, #24]
 8002a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	441a      	add	r2, r3
 8002a10:	9209      	str	r2, [sp, #36]	; 0x24
 8002a12:	f000 fb53 	bl	80030bc <__i2b>
 8002a16:	4606      	mov	r6, r0
 8002a18:	2f00      	cmp	r7, #0
 8002a1a:	dd0c      	ble.n	8002a36 <_dtoa_r+0x77e>
 8002a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	dd09      	ble.n	8002a36 <_dtoa_r+0x77e>
 8002a22:	42bb      	cmp	r3, r7
 8002a24:	bfa8      	it	ge
 8002a26:	463b      	movge	r3, r7
 8002a28:	9a06      	ldr	r2, [sp, #24]
 8002a2a:	1aff      	subs	r7, r7, r3
 8002a2c:	1ad2      	subs	r2, r2, r3
 8002a2e:	9206      	str	r2, [sp, #24]
 8002a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	9309      	str	r3, [sp, #36]	; 0x24
 8002a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a38:	b1f3      	cbz	r3, 8002a78 <_dtoa_r+0x7c0>
 8002a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80a9 	beq.w	8002b94 <_dtoa_r+0x8dc>
 8002a42:	2c00      	cmp	r4, #0
 8002a44:	dd10      	ble.n	8002a68 <_dtoa_r+0x7b0>
 8002a46:	4631      	mov	r1, r6
 8002a48:	4622      	mov	r2, r4
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	f000 fbf0 	bl	8003230 <__pow5mult>
 8002a50:	4652      	mov	r2, sl
 8002a52:	4601      	mov	r1, r0
 8002a54:	4606      	mov	r6, r0
 8002a56:	4628      	mov	r0, r5
 8002a58:	f000 fb46 	bl	80030e8 <__multiply>
 8002a5c:	4680      	mov	r8, r0
 8002a5e:	4651      	mov	r1, sl
 8002a60:	4628      	mov	r0, r5
 8002a62:	f000 fa71 	bl	8002f48 <_Bfree>
 8002a66:	46c2      	mov	sl, r8
 8002a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a6a:	1b1a      	subs	r2, r3, r4
 8002a6c:	d004      	beq.n	8002a78 <_dtoa_r+0x7c0>
 8002a6e:	4651      	mov	r1, sl
 8002a70:	4628      	mov	r0, r5
 8002a72:	f000 fbdd 	bl	8003230 <__pow5mult>
 8002a76:	4682      	mov	sl, r0
 8002a78:	2101      	movs	r1, #1
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	f000 fb1e 	bl	80030bc <__i2b>
 8002a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a82:	4604      	mov	r4, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f340 8087 	ble.w	8002b98 <_dtoa_r+0x8e0>
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f000 fbce 	bl	8003230 <__pow5mult>
 8002a94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002a96:	4604      	mov	r4, r0
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f340 8080 	ble.w	8002b9e <_dtoa_r+0x8e6>
 8002a9e:	f04f 0800 	mov.w	r8, #0
 8002aa2:	6923      	ldr	r3, [r4, #16]
 8002aa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002aa8:	6918      	ldr	r0, [r3, #16]
 8002aaa:	f000 fab9 	bl	8003020 <__hi0bits>
 8002aae:	f1c0 0020 	rsb	r0, r0, #32
 8002ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ab4:	4418      	add	r0, r3
 8002ab6:	f010 001f 	ands.w	r0, r0, #31
 8002aba:	f000 8092 	beq.w	8002be2 <_dtoa_r+0x92a>
 8002abe:	f1c0 0320 	rsb	r3, r0, #32
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	f340 808a 	ble.w	8002bdc <_dtoa_r+0x924>
 8002ac8:	f1c0 001c 	rsb	r0, r0, #28
 8002acc:	9b06      	ldr	r3, [sp, #24]
 8002ace:	4407      	add	r7, r0
 8002ad0:	4403      	add	r3, r0
 8002ad2:	9306      	str	r3, [sp, #24]
 8002ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ad6:	4403      	add	r3, r0
 8002ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8002ada:	9b06      	ldr	r3, [sp, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	dd05      	ble.n	8002aec <_dtoa_r+0x834>
 8002ae0:	4651      	mov	r1, sl
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	f000 fbfd 	bl	80032e4 <__lshift>
 8002aea:	4682      	mov	sl, r0
 8002aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	dd05      	ble.n	8002afe <_dtoa_r+0x846>
 8002af2:	4621      	mov	r1, r4
 8002af4:	461a      	mov	r2, r3
 8002af6:	4628      	mov	r0, r5
 8002af8:	f000 fbf4 	bl	80032e4 <__lshift>
 8002afc:	4604      	mov	r4, r0
 8002afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d070      	beq.n	8002be6 <_dtoa_r+0x92e>
 8002b04:	4621      	mov	r1, r4
 8002b06:	4650      	mov	r0, sl
 8002b08:	f000 fc58 	bl	80033bc <__mcmp>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	da6a      	bge.n	8002be6 <_dtoa_r+0x92e>
 8002b10:	2300      	movs	r3, #0
 8002b12:	4651      	mov	r1, sl
 8002b14:	220a      	movs	r2, #10
 8002b16:	4628      	mov	r0, r5
 8002b18:	f000 fa38 	bl	8002f8c <__multadd>
 8002b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b1e:	4682      	mov	sl, r0
 8002b20:	f109 39ff 	add.w	r9, r9, #4294967295
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8193 	beq.w	8002e50 <_dtoa_r+0xb98>
 8002b2a:	4631      	mov	r1, r6
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	220a      	movs	r2, #10
 8002b30:	4628      	mov	r0, r5
 8002b32:	f000 fa2b 	bl	8002f8c <__multadd>
 8002b36:	f1bb 0f00 	cmp.w	fp, #0
 8002b3a:	4606      	mov	r6, r0
 8002b3c:	f300 8093 	bgt.w	8002c66 <_dtoa_r+0x9ae>
 8002b40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	dc57      	bgt.n	8002bf6 <_dtoa_r+0x93e>
 8002b46:	e08e      	b.n	8002c66 <_dtoa_r+0x9ae>
 8002b48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002b4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002b4e:	e756      	b.n	80029fe <_dtoa_r+0x746>
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	1e5c      	subs	r4, r3, #1
 8002b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b56:	42a3      	cmp	r3, r4
 8002b58:	bfb7      	itett	lt
 8002b5a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8002b5c:	1b1c      	subge	r4, r3, r4
 8002b5e:	1ae2      	sublt	r2, r4, r3
 8002b60:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8002b62:	bfbe      	ittt	lt
 8002b64:	940a      	strlt	r4, [sp, #40]	; 0x28
 8002b66:	189b      	addlt	r3, r3, r2
 8002b68:	930e      	strlt	r3, [sp, #56]	; 0x38
 8002b6a:	9b02      	ldr	r3, [sp, #8]
 8002b6c:	bfb8      	it	lt
 8002b6e:	2400      	movlt	r4, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bfbb      	ittet	lt
 8002b74:	9b06      	ldrlt	r3, [sp, #24]
 8002b76:	9a02      	ldrlt	r2, [sp, #8]
 8002b78:	9f06      	ldrge	r7, [sp, #24]
 8002b7a:	1a9f      	sublt	r7, r3, r2
 8002b7c:	bfac      	ite	ge
 8002b7e:	9b02      	ldrge	r3, [sp, #8]
 8002b80:	2300      	movlt	r3, #0
 8002b82:	e73e      	b.n	8002a02 <_dtoa_r+0x74a>
 8002b84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002b86:	9f06      	ldr	r7, [sp, #24]
 8002b88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002b8a:	e745      	b.n	8002a18 <_dtoa_r+0x760>
 8002b8c:	3fe00000 	.word	0x3fe00000
 8002b90:	40240000 	.word	0x40240000
 8002b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b96:	e76a      	b.n	8002a6e <_dtoa_r+0x7b6>
 8002b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	dc19      	bgt.n	8002bd2 <_dtoa_r+0x91a>
 8002b9e:	9b04      	ldr	r3, [sp, #16]
 8002ba0:	b9bb      	cbnz	r3, 8002bd2 <_dtoa_r+0x91a>
 8002ba2:	9b05      	ldr	r3, [sp, #20]
 8002ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba8:	b99b      	cbnz	r3, 8002bd2 <_dtoa_r+0x91a>
 8002baa:	9b05      	ldr	r3, [sp, #20]
 8002bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bb0:	0d1b      	lsrs	r3, r3, #20
 8002bb2:	051b      	lsls	r3, r3, #20
 8002bb4:	b183      	cbz	r3, 8002bd8 <_dtoa_r+0x920>
 8002bb6:	f04f 0801 	mov.w	r8, #1
 8002bba:	9b06      	ldr	r3, [sp, #24]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	9306      	str	r3, [sp, #24]
 8002bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f47f af6a 	bne.w	8002aa2 <_dtoa_r+0x7ea>
 8002bce:	2001      	movs	r0, #1
 8002bd0:	e76f      	b.n	8002ab2 <_dtoa_r+0x7fa>
 8002bd2:	f04f 0800 	mov.w	r8, #0
 8002bd6:	e7f6      	b.n	8002bc6 <_dtoa_r+0x90e>
 8002bd8:	4698      	mov	r8, r3
 8002bda:	e7f4      	b.n	8002bc6 <_dtoa_r+0x90e>
 8002bdc:	f43f af7d 	beq.w	8002ada <_dtoa_r+0x822>
 8002be0:	4618      	mov	r0, r3
 8002be2:	301c      	adds	r0, #28
 8002be4:	e772      	b.n	8002acc <_dtoa_r+0x814>
 8002be6:	9b02      	ldr	r3, [sp, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	dc36      	bgt.n	8002c5a <_dtoa_r+0x9a2>
 8002bec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	dd33      	ble.n	8002c5a <_dtoa_r+0x9a2>
 8002bf2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002bf6:	f1bb 0f00 	cmp.w	fp, #0
 8002bfa:	d10d      	bne.n	8002c18 <_dtoa_r+0x960>
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	465b      	mov	r3, fp
 8002c00:	2205      	movs	r2, #5
 8002c02:	4628      	mov	r0, r5
 8002c04:	f000 f9c2 	bl	8002f8c <__multadd>
 8002c08:	4601      	mov	r1, r0
 8002c0a:	4604      	mov	r4, r0
 8002c0c:	4650      	mov	r0, sl
 8002c0e:	f000 fbd5 	bl	80033bc <__mcmp>
 8002c12:	2800      	cmp	r0, #0
 8002c14:	f73f adb6 	bgt.w	8002784 <_dtoa_r+0x4cc>
 8002c18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c1a:	9f08      	ldr	r7, [sp, #32]
 8002c1c:	ea6f 0903 	mvn.w	r9, r3
 8002c20:	f04f 0800 	mov.w	r8, #0
 8002c24:	4621      	mov	r1, r4
 8002c26:	4628      	mov	r0, r5
 8002c28:	f000 f98e 	bl	8002f48 <_Bfree>
 8002c2c:	2e00      	cmp	r6, #0
 8002c2e:	f43f aea4 	beq.w	800297a <_dtoa_r+0x6c2>
 8002c32:	f1b8 0f00 	cmp.w	r8, #0
 8002c36:	d005      	beq.n	8002c44 <_dtoa_r+0x98c>
 8002c38:	45b0      	cmp	r8, r6
 8002c3a:	d003      	beq.n	8002c44 <_dtoa_r+0x98c>
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	4628      	mov	r0, r5
 8002c40:	f000 f982 	bl	8002f48 <_Bfree>
 8002c44:	4631      	mov	r1, r6
 8002c46:	4628      	mov	r0, r5
 8002c48:	f000 f97e 	bl	8002f48 <_Bfree>
 8002c4c:	e695      	b.n	800297a <_dtoa_r+0x6c2>
 8002c4e:	2400      	movs	r4, #0
 8002c50:	4626      	mov	r6, r4
 8002c52:	e7e1      	b.n	8002c18 <_dtoa_r+0x960>
 8002c54:	46c1      	mov	r9, r8
 8002c56:	4626      	mov	r6, r4
 8002c58:	e594      	b.n	8002784 <_dtoa_r+0x4cc>
 8002c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c5c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80fc 	beq.w	8002e5e <_dtoa_r+0xba6>
 8002c66:	2f00      	cmp	r7, #0
 8002c68:	dd05      	ble.n	8002c76 <_dtoa_r+0x9be>
 8002c6a:	4631      	mov	r1, r6
 8002c6c:	463a      	mov	r2, r7
 8002c6e:	4628      	mov	r0, r5
 8002c70:	f000 fb38 	bl	80032e4 <__lshift>
 8002c74:	4606      	mov	r6, r0
 8002c76:	f1b8 0f00 	cmp.w	r8, #0
 8002c7a:	d05c      	beq.n	8002d36 <_dtoa_r+0xa7e>
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	6871      	ldr	r1, [r6, #4]
 8002c80:	f000 f922 	bl	8002ec8 <_Balloc>
 8002c84:	4607      	mov	r7, r0
 8002c86:	b928      	cbnz	r0, 8002c94 <_dtoa_r+0x9dc>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8002c8e:	4b7e      	ldr	r3, [pc, #504]	; (8002e88 <_dtoa_r+0xbd0>)
 8002c90:	f7ff bb26 	b.w	80022e0 <_dtoa_r+0x28>
 8002c94:	6932      	ldr	r2, [r6, #16]
 8002c96:	f106 010c 	add.w	r1, r6, #12
 8002c9a:	3202      	adds	r2, #2
 8002c9c:	0092      	lsls	r2, r2, #2
 8002c9e:	300c      	adds	r0, #12
 8002ca0:	f7fe fe06 	bl	80018b0 <memcpy>
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	4639      	mov	r1, r7
 8002ca8:	4628      	mov	r0, r5
 8002caa:	f000 fb1b 	bl	80032e4 <__lshift>
 8002cae:	46b0      	mov	r8, r6
 8002cb0:	4606      	mov	r6, r0
 8002cb2:	9b08      	ldr	r3, [sp, #32]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	9302      	str	r3, [sp, #8]
 8002cb8:	9b08      	ldr	r3, [sp, #32]
 8002cba:	445b      	add	r3, fp
 8002cbc:	930a      	str	r3, [sp, #40]	; 0x28
 8002cbe:	9b04      	ldr	r3, [sp, #16]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8002cc6:	9b02      	ldr	r3, [sp, #8]
 8002cc8:	4621      	mov	r1, r4
 8002cca:	4650      	mov	r0, sl
 8002ccc:	f103 3bff 	add.w	fp, r3, #4294967295
 8002cd0:	f7ff fa64 	bl	800219c <quorem>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4641      	mov	r1, r8
 8002cd8:	3330      	adds	r3, #48	; 0x30
 8002cda:	9004      	str	r0, [sp, #16]
 8002cdc:	4650      	mov	r0, sl
 8002cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ce0:	f000 fb6c 	bl	80033bc <__mcmp>
 8002ce4:	4632      	mov	r2, r6
 8002ce6:	9006      	str	r0, [sp, #24]
 8002ce8:	4621      	mov	r1, r4
 8002cea:	4628      	mov	r0, r5
 8002cec:	f000 fb82 	bl	80033f4 <__mdiff>
 8002cf0:	68c2      	ldr	r2, [r0, #12]
 8002cf2:	4607      	mov	r7, r0
 8002cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002cf6:	bb02      	cbnz	r2, 8002d3a <_dtoa_r+0xa82>
 8002cf8:	4601      	mov	r1, r0
 8002cfa:	4650      	mov	r0, sl
 8002cfc:	f000 fb5e 	bl	80033bc <__mcmp>
 8002d00:	4602      	mov	r2, r0
 8002d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d04:	4639      	mov	r1, r7
 8002d06:	4628      	mov	r0, r5
 8002d08:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8002d0c:	f000 f91c 	bl	8002f48 <_Bfree>
 8002d10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002d12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d14:	9f02      	ldr	r7, [sp, #8]
 8002d16:	ea43 0102 	orr.w	r1, r3, r2
 8002d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d20:	d10d      	bne.n	8002d3e <_dtoa_r+0xa86>
 8002d22:	2b39      	cmp	r3, #57	; 0x39
 8002d24:	d027      	beq.n	8002d76 <_dtoa_r+0xabe>
 8002d26:	9a06      	ldr	r2, [sp, #24]
 8002d28:	2a00      	cmp	r2, #0
 8002d2a:	dd01      	ble.n	8002d30 <_dtoa_r+0xa78>
 8002d2c:	9b04      	ldr	r3, [sp, #16]
 8002d2e:	3331      	adds	r3, #49	; 0x31
 8002d30:	f88b 3000 	strb.w	r3, [fp]
 8002d34:	e776      	b.n	8002c24 <_dtoa_r+0x96c>
 8002d36:	4630      	mov	r0, r6
 8002d38:	e7b9      	b.n	8002cae <_dtoa_r+0x9f6>
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	e7e2      	b.n	8002d04 <_dtoa_r+0xa4c>
 8002d3e:	9906      	ldr	r1, [sp, #24]
 8002d40:	2900      	cmp	r1, #0
 8002d42:	db04      	blt.n	8002d4e <_dtoa_r+0xa96>
 8002d44:	9822      	ldr	r0, [sp, #136]	; 0x88
 8002d46:	4301      	orrs	r1, r0
 8002d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d4a:	4301      	orrs	r1, r0
 8002d4c:	d120      	bne.n	8002d90 <_dtoa_r+0xad8>
 8002d4e:	2a00      	cmp	r2, #0
 8002d50:	ddee      	ble.n	8002d30 <_dtoa_r+0xa78>
 8002d52:	4651      	mov	r1, sl
 8002d54:	2201      	movs	r2, #1
 8002d56:	4628      	mov	r0, r5
 8002d58:	9302      	str	r3, [sp, #8]
 8002d5a:	f000 fac3 	bl	80032e4 <__lshift>
 8002d5e:	4621      	mov	r1, r4
 8002d60:	4682      	mov	sl, r0
 8002d62:	f000 fb2b 	bl	80033bc <__mcmp>
 8002d66:	2800      	cmp	r0, #0
 8002d68:	9b02      	ldr	r3, [sp, #8]
 8002d6a:	dc02      	bgt.n	8002d72 <_dtoa_r+0xaba>
 8002d6c:	d1e0      	bne.n	8002d30 <_dtoa_r+0xa78>
 8002d6e:	07da      	lsls	r2, r3, #31
 8002d70:	d5de      	bpl.n	8002d30 <_dtoa_r+0xa78>
 8002d72:	2b39      	cmp	r3, #57	; 0x39
 8002d74:	d1da      	bne.n	8002d2c <_dtoa_r+0xa74>
 8002d76:	2339      	movs	r3, #57	; 0x39
 8002d78:	f88b 3000 	strb.w	r3, [fp]
 8002d7c:	463b      	mov	r3, r7
 8002d7e:	461f      	mov	r7, r3
 8002d80:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	2a39      	cmp	r2, #57	; 0x39
 8002d88:	d050      	beq.n	8002e2c <_dtoa_r+0xb74>
 8002d8a:	3201      	adds	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	e749      	b.n	8002c24 <_dtoa_r+0x96c>
 8002d90:	2a00      	cmp	r2, #0
 8002d92:	dd03      	ble.n	8002d9c <_dtoa_r+0xae4>
 8002d94:	2b39      	cmp	r3, #57	; 0x39
 8002d96:	d0ee      	beq.n	8002d76 <_dtoa_r+0xabe>
 8002d98:	3301      	adds	r3, #1
 8002d9a:	e7c9      	b.n	8002d30 <_dtoa_r+0xa78>
 8002d9c:	9a02      	ldr	r2, [sp, #8]
 8002d9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002da0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002da4:	428a      	cmp	r2, r1
 8002da6:	d02a      	beq.n	8002dfe <_dtoa_r+0xb46>
 8002da8:	4651      	mov	r1, sl
 8002daa:	2300      	movs	r3, #0
 8002dac:	220a      	movs	r2, #10
 8002dae:	4628      	mov	r0, r5
 8002db0:	f000 f8ec 	bl	8002f8c <__multadd>
 8002db4:	45b0      	cmp	r8, r6
 8002db6:	4682      	mov	sl, r0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	f04f 020a 	mov.w	r2, #10
 8002dc0:	4641      	mov	r1, r8
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	d107      	bne.n	8002dd6 <_dtoa_r+0xb1e>
 8002dc6:	f000 f8e1 	bl	8002f8c <__multadd>
 8002dca:	4680      	mov	r8, r0
 8002dcc:	4606      	mov	r6, r0
 8002dce:	9b02      	ldr	r3, [sp, #8]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	9302      	str	r3, [sp, #8]
 8002dd4:	e777      	b.n	8002cc6 <_dtoa_r+0xa0e>
 8002dd6:	f000 f8d9 	bl	8002f8c <__multadd>
 8002dda:	4631      	mov	r1, r6
 8002ddc:	4680      	mov	r8, r0
 8002dde:	2300      	movs	r3, #0
 8002de0:	220a      	movs	r2, #10
 8002de2:	4628      	mov	r0, r5
 8002de4:	f000 f8d2 	bl	8002f8c <__multadd>
 8002de8:	4606      	mov	r6, r0
 8002dea:	e7f0      	b.n	8002dce <_dtoa_r+0xb16>
 8002dec:	f1bb 0f00 	cmp.w	fp, #0
 8002df0:	bfcc      	ite	gt
 8002df2:	465f      	movgt	r7, fp
 8002df4:	2701      	movle	r7, #1
 8002df6:	f04f 0800 	mov.w	r8, #0
 8002dfa:	9a08      	ldr	r2, [sp, #32]
 8002dfc:	4417      	add	r7, r2
 8002dfe:	4651      	mov	r1, sl
 8002e00:	2201      	movs	r2, #1
 8002e02:	4628      	mov	r0, r5
 8002e04:	9302      	str	r3, [sp, #8]
 8002e06:	f000 fa6d 	bl	80032e4 <__lshift>
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	4682      	mov	sl, r0
 8002e0e:	f000 fad5 	bl	80033bc <__mcmp>
 8002e12:	2800      	cmp	r0, #0
 8002e14:	dcb2      	bgt.n	8002d7c <_dtoa_r+0xac4>
 8002e16:	d102      	bne.n	8002e1e <_dtoa_r+0xb66>
 8002e18:	9b02      	ldr	r3, [sp, #8]
 8002e1a:	07db      	lsls	r3, r3, #31
 8002e1c:	d4ae      	bmi.n	8002d7c <_dtoa_r+0xac4>
 8002e1e:	463b      	mov	r3, r7
 8002e20:	461f      	mov	r7, r3
 8002e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002e26:	2a30      	cmp	r2, #48	; 0x30
 8002e28:	d0fa      	beq.n	8002e20 <_dtoa_r+0xb68>
 8002e2a:	e6fb      	b.n	8002c24 <_dtoa_r+0x96c>
 8002e2c:	9a08      	ldr	r2, [sp, #32]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d1a5      	bne.n	8002d7e <_dtoa_r+0xac6>
 8002e32:	2331      	movs	r3, #49	; 0x31
 8002e34:	f109 0901 	add.w	r9, r9, #1
 8002e38:	7013      	strb	r3, [r2, #0]
 8002e3a:	e6f3      	b.n	8002c24 <_dtoa_r+0x96c>
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <_dtoa_r+0xbd4>)
 8002e3e:	f7ff baa7 	b.w	8002390 <_dtoa_r+0xd8>
 8002e42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f47f aa80 	bne.w	800234a <_dtoa_r+0x92>
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <_dtoa_r+0xbd8>)
 8002e4c:	f7ff baa0 	b.w	8002390 <_dtoa_r+0xd8>
 8002e50:	f1bb 0f00 	cmp.w	fp, #0
 8002e54:	dc03      	bgt.n	8002e5e <_dtoa_r+0xba6>
 8002e56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	f73f aecc 	bgt.w	8002bf6 <_dtoa_r+0x93e>
 8002e5e:	9f08      	ldr	r7, [sp, #32]
 8002e60:	4621      	mov	r1, r4
 8002e62:	4650      	mov	r0, sl
 8002e64:	f7ff f99a 	bl	800219c <quorem>
 8002e68:	9a08      	ldr	r2, [sp, #32]
 8002e6a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8002e6e:	f807 3b01 	strb.w	r3, [r7], #1
 8002e72:	1aba      	subs	r2, r7, r2
 8002e74:	4593      	cmp	fp, r2
 8002e76:	ddb9      	ble.n	8002dec <_dtoa_r+0xb34>
 8002e78:	4651      	mov	r1, sl
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	4628      	mov	r0, r5
 8002e80:	f000 f884 	bl	8002f8c <__multadd>
 8002e84:	4682      	mov	sl, r0
 8002e86:	e7eb      	b.n	8002e60 <_dtoa_r+0xba8>
 8002e88:	080043db 	.word	0x080043db
 8002e8c:	08004334 	.word	0x08004334
 8002e90:	08004358 	.word	0x08004358

08002e94 <_localeconv_r>:
 8002e94:	4800      	ldr	r0, [pc, #0]	; (8002e98 <_localeconv_r+0x4>)
 8002e96:	4770      	bx	lr
 8002e98:	20000154 	.word	0x20000154

08002e9c <malloc>:
 8002e9c:	4b02      	ldr	r3, [pc, #8]	; (8002ea8 <malloc+0xc>)
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	f000 bbed 	b.w	8003680 <_malloc_r>
 8002ea6:	bf00      	nop
 8002ea8:	20000000 	.word	0x20000000

08002eac <memchr>:
 8002eac:	4603      	mov	r3, r0
 8002eae:	b510      	push	{r4, lr}
 8002eb0:	b2c9      	uxtb	r1, r1
 8002eb2:	4402      	add	r2, r0
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	d101      	bne.n	8002ebe <memchr+0x12>
 8002eba:	2000      	movs	r0, #0
 8002ebc:	e003      	b.n	8002ec6 <memchr+0x1a>
 8002ebe:	7804      	ldrb	r4, [r0, #0]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	428c      	cmp	r4, r1
 8002ec4:	d1f6      	bne.n	8002eb4 <memchr+0x8>
 8002ec6:	bd10      	pop	{r4, pc}

08002ec8 <_Balloc>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002ecc:	4604      	mov	r4, r0
 8002ece:	460d      	mov	r5, r1
 8002ed0:	b976      	cbnz	r6, 8002ef0 <_Balloc+0x28>
 8002ed2:	2010      	movs	r0, #16
 8002ed4:	f7ff ffe2 	bl	8002e9c <malloc>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6260      	str	r0, [r4, #36]	; 0x24
 8002edc:	b920      	cbnz	r0, 8002ee8 <_Balloc+0x20>
 8002ede:	2166      	movs	r1, #102	; 0x66
 8002ee0:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <_Balloc+0x78>)
 8002ee2:	4818      	ldr	r0, [pc, #96]	; (8002f44 <_Balloc+0x7c>)
 8002ee4:	f000 fc36 	bl	8003754 <__assert_func>
 8002ee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8002eec:	6006      	str	r6, [r0, #0]
 8002eee:	60c6      	str	r6, [r0, #12]
 8002ef0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002ef2:	68f3      	ldr	r3, [r6, #12]
 8002ef4:	b183      	cbz	r3, 8002f18 <_Balloc+0x50>
 8002ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002efe:	b9b8      	cbnz	r0, 8002f30 <_Balloc+0x68>
 8002f00:	2101      	movs	r1, #1
 8002f02:	fa01 f605 	lsl.w	r6, r1, r5
 8002f06:	1d72      	adds	r2, r6, #5
 8002f08:	4620      	mov	r0, r4
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	f000 fb5e 	bl	80035cc <_calloc_r>
 8002f10:	b160      	cbz	r0, 8002f2c <_Balloc+0x64>
 8002f12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8002f16:	e00e      	b.n	8002f36 <_Balloc+0x6e>
 8002f18:	2221      	movs	r2, #33	; 0x21
 8002f1a:	2104      	movs	r1, #4
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f000 fb55 	bl	80035cc <_calloc_r>
 8002f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f24:	60f0      	str	r0, [r6, #12]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e4      	bne.n	8002ef6 <_Balloc+0x2e>
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	bd70      	pop	{r4, r5, r6, pc}
 8002f30:	6802      	ldr	r2, [r0, #0]
 8002f32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8002f36:	2300      	movs	r3, #0
 8002f38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8002f3c:	e7f7      	b.n	8002f2e <_Balloc+0x66>
 8002f3e:	bf00      	nop
 8002f40:	08004365 	.word	0x08004365
 8002f44:	080043ec 	.word	0x080043ec

08002f48 <_Bfree>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002f4c:	4605      	mov	r5, r0
 8002f4e:	460c      	mov	r4, r1
 8002f50:	b976      	cbnz	r6, 8002f70 <_Bfree+0x28>
 8002f52:	2010      	movs	r0, #16
 8002f54:	f7ff ffa2 	bl	8002e9c <malloc>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6268      	str	r0, [r5, #36]	; 0x24
 8002f5c:	b920      	cbnz	r0, 8002f68 <_Bfree+0x20>
 8002f5e:	218a      	movs	r1, #138	; 0x8a
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <_Bfree+0x3c>)
 8002f62:	4809      	ldr	r0, [pc, #36]	; (8002f88 <_Bfree+0x40>)
 8002f64:	f000 fbf6 	bl	8003754 <__assert_func>
 8002f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8002f6c:	6006      	str	r6, [r0, #0]
 8002f6e:	60c6      	str	r6, [r0, #12]
 8002f70:	b13c      	cbz	r4, 8002f82 <_Bfree+0x3a>
 8002f72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002f74:	6862      	ldr	r2, [r4, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f7c:	6021      	str	r1, [r4, #0]
 8002f7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
 8002f84:	08004365 	.word	0x08004365
 8002f88:	080043ec 	.word	0x080043ec

08002f8c <__multadd>:
 8002f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f90:	4698      	mov	r8, r3
 8002f92:	460c      	mov	r4, r1
 8002f94:	2300      	movs	r3, #0
 8002f96:	690e      	ldr	r6, [r1, #16]
 8002f98:	4607      	mov	r7, r0
 8002f9a:	f101 0014 	add.w	r0, r1, #20
 8002f9e:	6805      	ldr	r5, [r0, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	b2a9      	uxth	r1, r5
 8002fa4:	fb02 8101 	mla	r1, r2, r1, r8
 8002fa8:	0c2d      	lsrs	r5, r5, #16
 8002faa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8002fae:	fb02 c505 	mla	r5, r2, r5, ip
 8002fb2:	b289      	uxth	r1, r1
 8002fb4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8002fb8:	429e      	cmp	r6, r3
 8002fba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8002fbe:	f840 1b04 	str.w	r1, [r0], #4
 8002fc2:	dcec      	bgt.n	8002f9e <__multadd+0x12>
 8002fc4:	f1b8 0f00 	cmp.w	r8, #0
 8002fc8:	d022      	beq.n	8003010 <__multadd+0x84>
 8002fca:	68a3      	ldr	r3, [r4, #8]
 8002fcc:	42b3      	cmp	r3, r6
 8002fce:	dc19      	bgt.n	8003004 <__multadd+0x78>
 8002fd0:	6861      	ldr	r1, [r4, #4]
 8002fd2:	4638      	mov	r0, r7
 8002fd4:	3101      	adds	r1, #1
 8002fd6:	f7ff ff77 	bl	8002ec8 <_Balloc>
 8002fda:	4605      	mov	r5, r0
 8002fdc:	b928      	cbnz	r0, 8002fea <__multadd+0x5e>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	21b5      	movs	r1, #181	; 0xb5
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <__multadd+0x8c>)
 8002fe4:	480d      	ldr	r0, [pc, #52]	; (800301c <__multadd+0x90>)
 8002fe6:	f000 fbb5 	bl	8003754 <__assert_func>
 8002fea:	6922      	ldr	r2, [r4, #16]
 8002fec:	f104 010c 	add.w	r1, r4, #12
 8002ff0:	3202      	adds	r2, #2
 8002ff2:	0092      	lsls	r2, r2, #2
 8002ff4:	300c      	adds	r0, #12
 8002ff6:	f7fe fc5b 	bl	80018b0 <memcpy>
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	f7ff ffa3 	bl	8002f48 <_Bfree>
 8003002:	462c      	mov	r4, r5
 8003004:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8003008:	3601      	adds	r6, #1
 800300a:	f8c3 8014 	str.w	r8, [r3, #20]
 800300e:	6126      	str	r6, [r4, #16]
 8003010:	4620      	mov	r0, r4
 8003012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003016:	bf00      	nop
 8003018:	080043db 	.word	0x080043db
 800301c:	080043ec 	.word	0x080043ec

08003020 <__hi0bits>:
 8003020:	0c02      	lsrs	r2, r0, #16
 8003022:	0412      	lsls	r2, r2, #16
 8003024:	4603      	mov	r3, r0
 8003026:	b9ca      	cbnz	r2, 800305c <__hi0bits+0x3c>
 8003028:	0403      	lsls	r3, r0, #16
 800302a:	2010      	movs	r0, #16
 800302c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003030:	bf04      	itt	eq
 8003032:	021b      	lsleq	r3, r3, #8
 8003034:	3008      	addeq	r0, #8
 8003036:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800303a:	bf04      	itt	eq
 800303c:	011b      	lsleq	r3, r3, #4
 800303e:	3004      	addeq	r0, #4
 8003040:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003044:	bf04      	itt	eq
 8003046:	009b      	lsleq	r3, r3, #2
 8003048:	3002      	addeq	r0, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	db05      	blt.n	800305a <__hi0bits+0x3a>
 800304e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003052:	f100 0001 	add.w	r0, r0, #1
 8003056:	bf08      	it	eq
 8003058:	2020      	moveq	r0, #32
 800305a:	4770      	bx	lr
 800305c:	2000      	movs	r0, #0
 800305e:	e7e5      	b.n	800302c <__hi0bits+0xc>

08003060 <__lo0bits>:
 8003060:	6803      	ldr	r3, [r0, #0]
 8003062:	4602      	mov	r2, r0
 8003064:	f013 0007 	ands.w	r0, r3, #7
 8003068:	d00b      	beq.n	8003082 <__lo0bits+0x22>
 800306a:	07d9      	lsls	r1, r3, #31
 800306c:	d422      	bmi.n	80030b4 <__lo0bits+0x54>
 800306e:	0798      	lsls	r0, r3, #30
 8003070:	bf49      	itett	mi
 8003072:	085b      	lsrmi	r3, r3, #1
 8003074:	089b      	lsrpl	r3, r3, #2
 8003076:	2001      	movmi	r0, #1
 8003078:	6013      	strmi	r3, [r2, #0]
 800307a:	bf5c      	itt	pl
 800307c:	2002      	movpl	r0, #2
 800307e:	6013      	strpl	r3, [r2, #0]
 8003080:	4770      	bx	lr
 8003082:	b299      	uxth	r1, r3
 8003084:	b909      	cbnz	r1, 800308a <__lo0bits+0x2a>
 8003086:	2010      	movs	r0, #16
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800308e:	bf04      	itt	eq
 8003090:	0a1b      	lsreq	r3, r3, #8
 8003092:	3008      	addeq	r0, #8
 8003094:	0719      	lsls	r1, r3, #28
 8003096:	bf04      	itt	eq
 8003098:	091b      	lsreq	r3, r3, #4
 800309a:	3004      	addeq	r0, #4
 800309c:	0799      	lsls	r1, r3, #30
 800309e:	bf04      	itt	eq
 80030a0:	089b      	lsreq	r3, r3, #2
 80030a2:	3002      	addeq	r0, #2
 80030a4:	07d9      	lsls	r1, r3, #31
 80030a6:	d403      	bmi.n	80030b0 <__lo0bits+0x50>
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	f100 0001 	add.w	r0, r0, #1
 80030ae:	d003      	beq.n	80030b8 <__lo0bits+0x58>
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4770      	bx	lr
 80030b4:	2000      	movs	r0, #0
 80030b6:	4770      	bx	lr
 80030b8:	2020      	movs	r0, #32
 80030ba:	4770      	bx	lr

080030bc <__i2b>:
 80030bc:	b510      	push	{r4, lr}
 80030be:	460c      	mov	r4, r1
 80030c0:	2101      	movs	r1, #1
 80030c2:	f7ff ff01 	bl	8002ec8 <_Balloc>
 80030c6:	4602      	mov	r2, r0
 80030c8:	b928      	cbnz	r0, 80030d6 <__i2b+0x1a>
 80030ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80030ce:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <__i2b+0x24>)
 80030d0:	4804      	ldr	r0, [pc, #16]	; (80030e4 <__i2b+0x28>)
 80030d2:	f000 fb3f 	bl	8003754 <__assert_func>
 80030d6:	2301      	movs	r3, #1
 80030d8:	6144      	str	r4, [r0, #20]
 80030da:	6103      	str	r3, [r0, #16]
 80030dc:	bd10      	pop	{r4, pc}
 80030de:	bf00      	nop
 80030e0:	080043db 	.word	0x080043db
 80030e4:	080043ec 	.word	0x080043ec

080030e8 <__multiply>:
 80030e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ec:	4614      	mov	r4, r2
 80030ee:	690a      	ldr	r2, [r1, #16]
 80030f0:	6923      	ldr	r3, [r4, #16]
 80030f2:	460d      	mov	r5, r1
 80030f4:	429a      	cmp	r2, r3
 80030f6:	bfbe      	ittt	lt
 80030f8:	460b      	movlt	r3, r1
 80030fa:	4625      	movlt	r5, r4
 80030fc:	461c      	movlt	r4, r3
 80030fe:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8003102:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003106:	68ab      	ldr	r3, [r5, #8]
 8003108:	6869      	ldr	r1, [r5, #4]
 800310a:	eb0a 0709 	add.w	r7, sl, r9
 800310e:	42bb      	cmp	r3, r7
 8003110:	b085      	sub	sp, #20
 8003112:	bfb8      	it	lt
 8003114:	3101      	addlt	r1, #1
 8003116:	f7ff fed7 	bl	8002ec8 <_Balloc>
 800311a:	b930      	cbnz	r0, 800312a <__multiply+0x42>
 800311c:	4602      	mov	r2, r0
 800311e:	f240 115d 	movw	r1, #349	; 0x15d
 8003122:	4b41      	ldr	r3, [pc, #260]	; (8003228 <__multiply+0x140>)
 8003124:	4841      	ldr	r0, [pc, #260]	; (800322c <__multiply+0x144>)
 8003126:	f000 fb15 	bl	8003754 <__assert_func>
 800312a:	f100 0614 	add.w	r6, r0, #20
 800312e:	4633      	mov	r3, r6
 8003130:	2200      	movs	r2, #0
 8003132:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8003136:	4543      	cmp	r3, r8
 8003138:	d31e      	bcc.n	8003178 <__multiply+0x90>
 800313a:	f105 0c14 	add.w	ip, r5, #20
 800313e:	f104 0314 	add.w	r3, r4, #20
 8003142:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003146:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800314a:	9202      	str	r2, [sp, #8]
 800314c:	ebac 0205 	sub.w	r2, ip, r5
 8003150:	3a15      	subs	r2, #21
 8003152:	f022 0203 	bic.w	r2, r2, #3
 8003156:	3204      	adds	r2, #4
 8003158:	f105 0115 	add.w	r1, r5, #21
 800315c:	458c      	cmp	ip, r1
 800315e:	bf38      	it	cc
 8003160:	2204      	movcc	r2, #4
 8003162:	9201      	str	r2, [sp, #4]
 8003164:	9a02      	ldr	r2, [sp, #8]
 8003166:	9303      	str	r3, [sp, #12]
 8003168:	429a      	cmp	r2, r3
 800316a:	d808      	bhi.n	800317e <__multiply+0x96>
 800316c:	2f00      	cmp	r7, #0
 800316e:	dc55      	bgt.n	800321c <__multiply+0x134>
 8003170:	6107      	str	r7, [r0, #16]
 8003172:	b005      	add	sp, #20
 8003174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003178:	f843 2b04 	str.w	r2, [r3], #4
 800317c:	e7db      	b.n	8003136 <__multiply+0x4e>
 800317e:	f8b3 a000 	ldrh.w	sl, [r3]
 8003182:	f1ba 0f00 	cmp.w	sl, #0
 8003186:	d020      	beq.n	80031ca <__multiply+0xe2>
 8003188:	46b1      	mov	r9, r6
 800318a:	2200      	movs	r2, #0
 800318c:	f105 0e14 	add.w	lr, r5, #20
 8003190:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003194:	f8d9 b000 	ldr.w	fp, [r9]
 8003198:	b2a1      	uxth	r1, r4
 800319a:	fa1f fb8b 	uxth.w	fp, fp
 800319e:	fb0a b101 	mla	r1, sl, r1, fp
 80031a2:	4411      	add	r1, r2
 80031a4:	f8d9 2000 	ldr.w	r2, [r9]
 80031a8:	0c24      	lsrs	r4, r4, #16
 80031aa:	0c12      	lsrs	r2, r2, #16
 80031ac:	fb0a 2404 	mla	r4, sl, r4, r2
 80031b0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80031b4:	b289      	uxth	r1, r1
 80031b6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80031ba:	45f4      	cmp	ip, lr
 80031bc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80031c0:	f849 1b04 	str.w	r1, [r9], #4
 80031c4:	d8e4      	bhi.n	8003190 <__multiply+0xa8>
 80031c6:	9901      	ldr	r1, [sp, #4]
 80031c8:	5072      	str	r2, [r6, r1]
 80031ca:	9a03      	ldr	r2, [sp, #12]
 80031cc:	3304      	adds	r3, #4
 80031ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80031d2:	f1b9 0f00 	cmp.w	r9, #0
 80031d6:	d01f      	beq.n	8003218 <__multiply+0x130>
 80031d8:	46b6      	mov	lr, r6
 80031da:	f04f 0a00 	mov.w	sl, #0
 80031de:	6834      	ldr	r4, [r6, #0]
 80031e0:	f105 0114 	add.w	r1, r5, #20
 80031e4:	880a      	ldrh	r2, [r1, #0]
 80031e6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80031ea:	b2a4      	uxth	r4, r4
 80031ec:	fb09 b202 	mla	r2, r9, r2, fp
 80031f0:	4492      	add	sl, r2
 80031f2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80031f6:	f84e 4b04 	str.w	r4, [lr], #4
 80031fa:	f851 4b04 	ldr.w	r4, [r1], #4
 80031fe:	f8be 2000 	ldrh.w	r2, [lr]
 8003202:	0c24      	lsrs	r4, r4, #16
 8003204:	fb09 2404 	mla	r4, r9, r4, r2
 8003208:	458c      	cmp	ip, r1
 800320a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800320e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003212:	d8e7      	bhi.n	80031e4 <__multiply+0xfc>
 8003214:	9a01      	ldr	r2, [sp, #4]
 8003216:	50b4      	str	r4, [r6, r2]
 8003218:	3604      	adds	r6, #4
 800321a:	e7a3      	b.n	8003164 <__multiply+0x7c>
 800321c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1a5      	bne.n	8003170 <__multiply+0x88>
 8003224:	3f01      	subs	r7, #1
 8003226:	e7a1      	b.n	800316c <__multiply+0x84>
 8003228:	080043db 	.word	0x080043db
 800322c:	080043ec 	.word	0x080043ec

08003230 <__pow5mult>:
 8003230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003234:	4615      	mov	r5, r2
 8003236:	f012 0203 	ands.w	r2, r2, #3
 800323a:	4606      	mov	r6, r0
 800323c:	460f      	mov	r7, r1
 800323e:	d007      	beq.n	8003250 <__pow5mult+0x20>
 8003240:	4c25      	ldr	r4, [pc, #148]	; (80032d8 <__pow5mult+0xa8>)
 8003242:	3a01      	subs	r2, #1
 8003244:	2300      	movs	r3, #0
 8003246:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800324a:	f7ff fe9f 	bl	8002f8c <__multadd>
 800324e:	4607      	mov	r7, r0
 8003250:	10ad      	asrs	r5, r5, #2
 8003252:	d03d      	beq.n	80032d0 <__pow5mult+0xa0>
 8003254:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003256:	b97c      	cbnz	r4, 8003278 <__pow5mult+0x48>
 8003258:	2010      	movs	r0, #16
 800325a:	f7ff fe1f 	bl	8002e9c <malloc>
 800325e:	4602      	mov	r2, r0
 8003260:	6270      	str	r0, [r6, #36]	; 0x24
 8003262:	b928      	cbnz	r0, 8003270 <__pow5mult+0x40>
 8003264:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003268:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <__pow5mult+0xac>)
 800326a:	481d      	ldr	r0, [pc, #116]	; (80032e0 <__pow5mult+0xb0>)
 800326c:	f000 fa72 	bl	8003754 <__assert_func>
 8003270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003274:	6004      	str	r4, [r0, #0]
 8003276:	60c4      	str	r4, [r0, #12]
 8003278:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800327c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003280:	b94c      	cbnz	r4, 8003296 <__pow5mult+0x66>
 8003282:	f240 2171 	movw	r1, #625	; 0x271
 8003286:	4630      	mov	r0, r6
 8003288:	f7ff ff18 	bl	80030bc <__i2b>
 800328c:	2300      	movs	r3, #0
 800328e:	4604      	mov	r4, r0
 8003290:	f8c8 0008 	str.w	r0, [r8, #8]
 8003294:	6003      	str	r3, [r0, #0]
 8003296:	f04f 0900 	mov.w	r9, #0
 800329a:	07eb      	lsls	r3, r5, #31
 800329c:	d50a      	bpl.n	80032b4 <__pow5mult+0x84>
 800329e:	4639      	mov	r1, r7
 80032a0:	4622      	mov	r2, r4
 80032a2:	4630      	mov	r0, r6
 80032a4:	f7ff ff20 	bl	80030e8 <__multiply>
 80032a8:	4680      	mov	r8, r0
 80032aa:	4639      	mov	r1, r7
 80032ac:	4630      	mov	r0, r6
 80032ae:	f7ff fe4b 	bl	8002f48 <_Bfree>
 80032b2:	4647      	mov	r7, r8
 80032b4:	106d      	asrs	r5, r5, #1
 80032b6:	d00b      	beq.n	80032d0 <__pow5mult+0xa0>
 80032b8:	6820      	ldr	r0, [r4, #0]
 80032ba:	b938      	cbnz	r0, 80032cc <__pow5mult+0x9c>
 80032bc:	4622      	mov	r2, r4
 80032be:	4621      	mov	r1, r4
 80032c0:	4630      	mov	r0, r6
 80032c2:	f7ff ff11 	bl	80030e8 <__multiply>
 80032c6:	6020      	str	r0, [r4, #0]
 80032c8:	f8c0 9000 	str.w	r9, [r0]
 80032cc:	4604      	mov	r4, r0
 80032ce:	e7e4      	b.n	800329a <__pow5mult+0x6a>
 80032d0:	4638      	mov	r0, r7
 80032d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032d6:	bf00      	nop
 80032d8:	08004540 	.word	0x08004540
 80032dc:	08004365 	.word	0x08004365
 80032e0:	080043ec 	.word	0x080043ec

080032e4 <__lshift>:
 80032e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e8:	460c      	mov	r4, r1
 80032ea:	4607      	mov	r7, r0
 80032ec:	4691      	mov	r9, r2
 80032ee:	6923      	ldr	r3, [r4, #16]
 80032f0:	6849      	ldr	r1, [r1, #4]
 80032f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80032f6:	68a3      	ldr	r3, [r4, #8]
 80032f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80032fc:	f108 0601 	add.w	r6, r8, #1
 8003300:	42b3      	cmp	r3, r6
 8003302:	db0b      	blt.n	800331c <__lshift+0x38>
 8003304:	4638      	mov	r0, r7
 8003306:	f7ff fddf 	bl	8002ec8 <_Balloc>
 800330a:	4605      	mov	r5, r0
 800330c:	b948      	cbnz	r0, 8003322 <__lshift+0x3e>
 800330e:	4602      	mov	r2, r0
 8003310:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003314:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <__lshift+0xd0>)
 8003316:	4828      	ldr	r0, [pc, #160]	; (80033b8 <__lshift+0xd4>)
 8003318:	f000 fa1c 	bl	8003754 <__assert_func>
 800331c:	3101      	adds	r1, #1
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	e7ee      	b.n	8003300 <__lshift+0x1c>
 8003322:	2300      	movs	r3, #0
 8003324:	f100 0114 	add.w	r1, r0, #20
 8003328:	f100 0210 	add.w	r2, r0, #16
 800332c:	4618      	mov	r0, r3
 800332e:	4553      	cmp	r3, sl
 8003330:	db33      	blt.n	800339a <__lshift+0xb6>
 8003332:	6920      	ldr	r0, [r4, #16]
 8003334:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003338:	f104 0314 	add.w	r3, r4, #20
 800333c:	f019 091f 	ands.w	r9, r9, #31
 8003340:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003344:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003348:	d02b      	beq.n	80033a2 <__lshift+0xbe>
 800334a:	468a      	mov	sl, r1
 800334c:	2200      	movs	r2, #0
 800334e:	f1c9 0e20 	rsb	lr, r9, #32
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	fa00 f009 	lsl.w	r0, r0, r9
 8003358:	4302      	orrs	r2, r0
 800335a:	f84a 2b04 	str.w	r2, [sl], #4
 800335e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003362:	459c      	cmp	ip, r3
 8003364:	fa22 f20e 	lsr.w	r2, r2, lr
 8003368:	d8f3      	bhi.n	8003352 <__lshift+0x6e>
 800336a:	ebac 0304 	sub.w	r3, ip, r4
 800336e:	3b15      	subs	r3, #21
 8003370:	f023 0303 	bic.w	r3, r3, #3
 8003374:	3304      	adds	r3, #4
 8003376:	f104 0015 	add.w	r0, r4, #21
 800337a:	4584      	cmp	ip, r0
 800337c:	bf38      	it	cc
 800337e:	2304      	movcc	r3, #4
 8003380:	50ca      	str	r2, [r1, r3]
 8003382:	b10a      	cbz	r2, 8003388 <__lshift+0xa4>
 8003384:	f108 0602 	add.w	r6, r8, #2
 8003388:	3e01      	subs	r6, #1
 800338a:	4638      	mov	r0, r7
 800338c:	4621      	mov	r1, r4
 800338e:	612e      	str	r6, [r5, #16]
 8003390:	f7ff fdda 	bl	8002f48 <_Bfree>
 8003394:	4628      	mov	r0, r5
 8003396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800339a:	f842 0f04 	str.w	r0, [r2, #4]!
 800339e:	3301      	adds	r3, #1
 80033a0:	e7c5      	b.n	800332e <__lshift+0x4a>
 80033a2:	3904      	subs	r1, #4
 80033a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033a8:	459c      	cmp	ip, r3
 80033aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80033ae:	d8f9      	bhi.n	80033a4 <__lshift+0xc0>
 80033b0:	e7ea      	b.n	8003388 <__lshift+0xa4>
 80033b2:	bf00      	nop
 80033b4:	080043db 	.word	0x080043db
 80033b8:	080043ec 	.word	0x080043ec

080033bc <__mcmp>:
 80033bc:	4603      	mov	r3, r0
 80033be:	690a      	ldr	r2, [r1, #16]
 80033c0:	6900      	ldr	r0, [r0, #16]
 80033c2:	b530      	push	{r4, r5, lr}
 80033c4:	1a80      	subs	r0, r0, r2
 80033c6:	d10d      	bne.n	80033e4 <__mcmp+0x28>
 80033c8:	3314      	adds	r3, #20
 80033ca:	3114      	adds	r1, #20
 80033cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80033d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80033d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80033d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80033dc:	4295      	cmp	r5, r2
 80033de:	d002      	beq.n	80033e6 <__mcmp+0x2a>
 80033e0:	d304      	bcc.n	80033ec <__mcmp+0x30>
 80033e2:	2001      	movs	r0, #1
 80033e4:	bd30      	pop	{r4, r5, pc}
 80033e6:	42a3      	cmp	r3, r4
 80033e8:	d3f4      	bcc.n	80033d4 <__mcmp+0x18>
 80033ea:	e7fb      	b.n	80033e4 <__mcmp+0x28>
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	e7f8      	b.n	80033e4 <__mcmp+0x28>
	...

080033f4 <__mdiff>:
 80033f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f8:	460c      	mov	r4, r1
 80033fa:	4606      	mov	r6, r0
 80033fc:	4611      	mov	r1, r2
 80033fe:	4620      	mov	r0, r4
 8003400:	4692      	mov	sl, r2
 8003402:	f7ff ffdb 	bl	80033bc <__mcmp>
 8003406:	1e05      	subs	r5, r0, #0
 8003408:	d111      	bne.n	800342e <__mdiff+0x3a>
 800340a:	4629      	mov	r1, r5
 800340c:	4630      	mov	r0, r6
 800340e:	f7ff fd5b 	bl	8002ec8 <_Balloc>
 8003412:	4602      	mov	r2, r0
 8003414:	b928      	cbnz	r0, 8003422 <__mdiff+0x2e>
 8003416:	f240 2132 	movw	r1, #562	; 0x232
 800341a:	4b3c      	ldr	r3, [pc, #240]	; (800350c <__mdiff+0x118>)
 800341c:	483c      	ldr	r0, [pc, #240]	; (8003510 <__mdiff+0x11c>)
 800341e:	f000 f999 	bl	8003754 <__assert_func>
 8003422:	2301      	movs	r3, #1
 8003424:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003428:	4610      	mov	r0, r2
 800342a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342e:	bfa4      	itt	ge
 8003430:	4653      	movge	r3, sl
 8003432:	46a2      	movge	sl, r4
 8003434:	4630      	mov	r0, r6
 8003436:	f8da 1004 	ldr.w	r1, [sl, #4]
 800343a:	bfa6      	itte	ge
 800343c:	461c      	movge	r4, r3
 800343e:	2500      	movge	r5, #0
 8003440:	2501      	movlt	r5, #1
 8003442:	f7ff fd41 	bl	8002ec8 <_Balloc>
 8003446:	4602      	mov	r2, r0
 8003448:	b918      	cbnz	r0, 8003452 <__mdiff+0x5e>
 800344a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800344e:	4b2f      	ldr	r3, [pc, #188]	; (800350c <__mdiff+0x118>)
 8003450:	e7e4      	b.n	800341c <__mdiff+0x28>
 8003452:	f100 0814 	add.w	r8, r0, #20
 8003456:	f8da 7010 	ldr.w	r7, [sl, #16]
 800345a:	60c5      	str	r5, [r0, #12]
 800345c:	f04f 0c00 	mov.w	ip, #0
 8003460:	f10a 0514 	add.w	r5, sl, #20
 8003464:	f10a 0010 	add.w	r0, sl, #16
 8003468:	46c2      	mov	sl, r8
 800346a:	6926      	ldr	r6, [r4, #16]
 800346c:	f104 0914 	add.w	r9, r4, #20
 8003470:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8003474:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003478:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800347c:	f859 3b04 	ldr.w	r3, [r9], #4
 8003480:	fa1f f18b 	uxth.w	r1, fp
 8003484:	4461      	add	r1, ip
 8003486:	fa1f fc83 	uxth.w	ip, r3
 800348a:	0c1b      	lsrs	r3, r3, #16
 800348c:	eba1 010c 	sub.w	r1, r1, ip
 8003490:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003494:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003498:	b289      	uxth	r1, r1
 800349a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800349e:	454e      	cmp	r6, r9
 80034a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80034a4:	f84a 3b04 	str.w	r3, [sl], #4
 80034a8:	d8e6      	bhi.n	8003478 <__mdiff+0x84>
 80034aa:	1b33      	subs	r3, r6, r4
 80034ac:	3b15      	subs	r3, #21
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	3415      	adds	r4, #21
 80034b4:	3304      	adds	r3, #4
 80034b6:	42a6      	cmp	r6, r4
 80034b8:	bf38      	it	cc
 80034ba:	2304      	movcc	r3, #4
 80034bc:	441d      	add	r5, r3
 80034be:	4443      	add	r3, r8
 80034c0:	461e      	mov	r6, r3
 80034c2:	462c      	mov	r4, r5
 80034c4:	4574      	cmp	r4, lr
 80034c6:	d30e      	bcc.n	80034e6 <__mdiff+0xf2>
 80034c8:	f10e 0103 	add.w	r1, lr, #3
 80034cc:	1b49      	subs	r1, r1, r5
 80034ce:	f021 0103 	bic.w	r1, r1, #3
 80034d2:	3d03      	subs	r5, #3
 80034d4:	45ae      	cmp	lr, r5
 80034d6:	bf38      	it	cc
 80034d8:	2100      	movcc	r1, #0
 80034da:	4419      	add	r1, r3
 80034dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80034e0:	b18b      	cbz	r3, 8003506 <__mdiff+0x112>
 80034e2:	6117      	str	r7, [r2, #16]
 80034e4:	e7a0      	b.n	8003428 <__mdiff+0x34>
 80034e6:	f854 8b04 	ldr.w	r8, [r4], #4
 80034ea:	fa1f f188 	uxth.w	r1, r8
 80034ee:	4461      	add	r1, ip
 80034f0:	1408      	asrs	r0, r1, #16
 80034f2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80034f6:	b289      	uxth	r1, r1
 80034f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80034fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003500:	f846 1b04 	str.w	r1, [r6], #4
 8003504:	e7de      	b.n	80034c4 <__mdiff+0xd0>
 8003506:	3f01      	subs	r7, #1
 8003508:	e7e8      	b.n	80034dc <__mdiff+0xe8>
 800350a:	bf00      	nop
 800350c:	080043db 	.word	0x080043db
 8003510:	080043ec 	.word	0x080043ec

08003514 <__d2b>:
 8003514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003518:	2101      	movs	r1, #1
 800351a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800351e:	4690      	mov	r8, r2
 8003520:	461d      	mov	r5, r3
 8003522:	f7ff fcd1 	bl	8002ec8 <_Balloc>
 8003526:	4604      	mov	r4, r0
 8003528:	b930      	cbnz	r0, 8003538 <__d2b+0x24>
 800352a:	4602      	mov	r2, r0
 800352c:	f240 310a 	movw	r1, #778	; 0x30a
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <__d2b+0xb0>)
 8003532:	4825      	ldr	r0, [pc, #148]	; (80035c8 <__d2b+0xb4>)
 8003534:	f000 f90e 	bl	8003754 <__assert_func>
 8003538:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800353c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8003540:	bb2d      	cbnz	r5, 800358e <__d2b+0x7a>
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	f1b8 0300 	subs.w	r3, r8, #0
 8003548:	d026      	beq.n	8003598 <__d2b+0x84>
 800354a:	4668      	mov	r0, sp
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	f7ff fd87 	bl	8003060 <__lo0bits>
 8003552:	9900      	ldr	r1, [sp, #0]
 8003554:	b1f0      	cbz	r0, 8003594 <__d2b+0x80>
 8003556:	9a01      	ldr	r2, [sp, #4]
 8003558:	f1c0 0320 	rsb	r3, r0, #32
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	430b      	orrs	r3, r1
 8003562:	40c2      	lsrs	r2, r0
 8003564:	6163      	str	r3, [r4, #20]
 8003566:	9201      	str	r2, [sp, #4]
 8003568:	9b01      	ldr	r3, [sp, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	bf14      	ite	ne
 800356e:	2102      	movne	r1, #2
 8003570:	2101      	moveq	r1, #1
 8003572:	61a3      	str	r3, [r4, #24]
 8003574:	6121      	str	r1, [r4, #16]
 8003576:	b1c5      	cbz	r5, 80035aa <__d2b+0x96>
 8003578:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800357c:	4405      	add	r5, r0
 800357e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003582:	603d      	str	r5, [r7, #0]
 8003584:	6030      	str	r0, [r6, #0]
 8003586:	4620      	mov	r0, r4
 8003588:	b002      	add	sp, #8
 800358a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800358e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003592:	e7d6      	b.n	8003542 <__d2b+0x2e>
 8003594:	6161      	str	r1, [r4, #20]
 8003596:	e7e7      	b.n	8003568 <__d2b+0x54>
 8003598:	a801      	add	r0, sp, #4
 800359a:	f7ff fd61 	bl	8003060 <__lo0bits>
 800359e:	2101      	movs	r1, #1
 80035a0:	9b01      	ldr	r3, [sp, #4]
 80035a2:	6121      	str	r1, [r4, #16]
 80035a4:	6163      	str	r3, [r4, #20]
 80035a6:	3020      	adds	r0, #32
 80035a8:	e7e5      	b.n	8003576 <__d2b+0x62>
 80035aa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80035ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80035b2:	6038      	str	r0, [r7, #0]
 80035b4:	6918      	ldr	r0, [r3, #16]
 80035b6:	f7ff fd33 	bl	8003020 <__hi0bits>
 80035ba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80035be:	6031      	str	r1, [r6, #0]
 80035c0:	e7e1      	b.n	8003586 <__d2b+0x72>
 80035c2:	bf00      	nop
 80035c4:	080043db 	.word	0x080043db
 80035c8:	080043ec 	.word	0x080043ec

080035cc <_calloc_r>:
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	fb02 f501 	mul.w	r5, r2, r1
 80035d2:	4629      	mov	r1, r5
 80035d4:	f000 f854 	bl	8003680 <_malloc_r>
 80035d8:	4604      	mov	r4, r0
 80035da:	b118      	cbz	r0, 80035e4 <_calloc_r+0x18>
 80035dc:	462a      	mov	r2, r5
 80035de:	2100      	movs	r1, #0
 80035e0:	f7fe f974 	bl	80018cc <memset>
 80035e4:	4620      	mov	r0, r4
 80035e6:	bd38      	pop	{r3, r4, r5, pc}

080035e8 <_free_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4605      	mov	r5, r0
 80035ec:	2900      	cmp	r1, #0
 80035ee:	d043      	beq.n	8003678 <_free_r+0x90>
 80035f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035f4:	1f0c      	subs	r4, r1, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bfb8      	it	lt
 80035fa:	18e4      	addlt	r4, r4, r3
 80035fc:	f000 f8ec 	bl	80037d8 <__malloc_lock>
 8003600:	4a1e      	ldr	r2, [pc, #120]	; (800367c <_free_r+0x94>)
 8003602:	6813      	ldr	r3, [r2, #0]
 8003604:	4610      	mov	r0, r2
 8003606:	b933      	cbnz	r3, 8003616 <_free_r+0x2e>
 8003608:	6063      	str	r3, [r4, #4]
 800360a:	6014      	str	r4, [r2, #0]
 800360c:	4628      	mov	r0, r5
 800360e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003612:	f000 b8e7 	b.w	80037e4 <__malloc_unlock>
 8003616:	42a3      	cmp	r3, r4
 8003618:	d90a      	bls.n	8003630 <_free_r+0x48>
 800361a:	6821      	ldr	r1, [r4, #0]
 800361c:	1862      	adds	r2, r4, r1
 800361e:	4293      	cmp	r3, r2
 8003620:	bf01      	itttt	eq
 8003622:	681a      	ldreq	r2, [r3, #0]
 8003624:	685b      	ldreq	r3, [r3, #4]
 8003626:	1852      	addeq	r2, r2, r1
 8003628:	6022      	streq	r2, [r4, #0]
 800362a:	6063      	str	r3, [r4, #4]
 800362c:	6004      	str	r4, [r0, #0]
 800362e:	e7ed      	b.n	800360c <_free_r+0x24>
 8003630:	461a      	mov	r2, r3
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	b10b      	cbz	r3, 800363a <_free_r+0x52>
 8003636:	42a3      	cmp	r3, r4
 8003638:	d9fa      	bls.n	8003630 <_free_r+0x48>
 800363a:	6811      	ldr	r1, [r2, #0]
 800363c:	1850      	adds	r0, r2, r1
 800363e:	42a0      	cmp	r0, r4
 8003640:	d10b      	bne.n	800365a <_free_r+0x72>
 8003642:	6820      	ldr	r0, [r4, #0]
 8003644:	4401      	add	r1, r0
 8003646:	1850      	adds	r0, r2, r1
 8003648:	4283      	cmp	r3, r0
 800364a:	6011      	str	r1, [r2, #0]
 800364c:	d1de      	bne.n	800360c <_free_r+0x24>
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4401      	add	r1, r0
 8003654:	6011      	str	r1, [r2, #0]
 8003656:	6053      	str	r3, [r2, #4]
 8003658:	e7d8      	b.n	800360c <_free_r+0x24>
 800365a:	d902      	bls.n	8003662 <_free_r+0x7a>
 800365c:	230c      	movs	r3, #12
 800365e:	602b      	str	r3, [r5, #0]
 8003660:	e7d4      	b.n	800360c <_free_r+0x24>
 8003662:	6820      	ldr	r0, [r4, #0]
 8003664:	1821      	adds	r1, r4, r0
 8003666:	428b      	cmp	r3, r1
 8003668:	bf01      	itttt	eq
 800366a:	6819      	ldreq	r1, [r3, #0]
 800366c:	685b      	ldreq	r3, [r3, #4]
 800366e:	1809      	addeq	r1, r1, r0
 8003670:	6021      	streq	r1, [r4, #0]
 8003672:	6063      	str	r3, [r4, #4]
 8003674:	6054      	str	r4, [r2, #4]
 8003676:	e7c9      	b.n	800360c <_free_r+0x24>
 8003678:	bd38      	pop	{r3, r4, r5, pc}
 800367a:	bf00      	nop
 800367c:	200002a8 	.word	0x200002a8

08003680 <_malloc_r>:
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	1ccd      	adds	r5, r1, #3
 8003684:	f025 0503 	bic.w	r5, r5, #3
 8003688:	3508      	adds	r5, #8
 800368a:	2d0c      	cmp	r5, #12
 800368c:	bf38      	it	cc
 800368e:	250c      	movcc	r5, #12
 8003690:	2d00      	cmp	r5, #0
 8003692:	4606      	mov	r6, r0
 8003694:	db01      	blt.n	800369a <_malloc_r+0x1a>
 8003696:	42a9      	cmp	r1, r5
 8003698:	d903      	bls.n	80036a2 <_malloc_r+0x22>
 800369a:	230c      	movs	r3, #12
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	2000      	movs	r0, #0
 80036a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a2:	f000 f899 	bl	80037d8 <__malloc_lock>
 80036a6:	4921      	ldr	r1, [pc, #132]	; (800372c <_malloc_r+0xac>)
 80036a8:	680a      	ldr	r2, [r1, #0]
 80036aa:	4614      	mov	r4, r2
 80036ac:	b99c      	cbnz	r4, 80036d6 <_malloc_r+0x56>
 80036ae:	4f20      	ldr	r7, [pc, #128]	; (8003730 <_malloc_r+0xb0>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	b923      	cbnz	r3, 80036be <_malloc_r+0x3e>
 80036b4:	4621      	mov	r1, r4
 80036b6:	4630      	mov	r0, r6
 80036b8:	f000 f83c 	bl	8003734 <_sbrk_r>
 80036bc:	6038      	str	r0, [r7, #0]
 80036be:	4629      	mov	r1, r5
 80036c0:	4630      	mov	r0, r6
 80036c2:	f000 f837 	bl	8003734 <_sbrk_r>
 80036c6:	1c43      	adds	r3, r0, #1
 80036c8:	d123      	bne.n	8003712 <_malloc_r+0x92>
 80036ca:	230c      	movs	r3, #12
 80036cc:	4630      	mov	r0, r6
 80036ce:	6033      	str	r3, [r6, #0]
 80036d0:	f000 f888 	bl	80037e4 <__malloc_unlock>
 80036d4:	e7e3      	b.n	800369e <_malloc_r+0x1e>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	1b5b      	subs	r3, r3, r5
 80036da:	d417      	bmi.n	800370c <_malloc_r+0x8c>
 80036dc:	2b0b      	cmp	r3, #11
 80036de:	d903      	bls.n	80036e8 <_malloc_r+0x68>
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	441c      	add	r4, r3
 80036e4:	6025      	str	r5, [r4, #0]
 80036e6:	e004      	b.n	80036f2 <_malloc_r+0x72>
 80036e8:	6863      	ldr	r3, [r4, #4]
 80036ea:	42a2      	cmp	r2, r4
 80036ec:	bf0c      	ite	eq
 80036ee:	600b      	streq	r3, [r1, #0]
 80036f0:	6053      	strne	r3, [r2, #4]
 80036f2:	4630      	mov	r0, r6
 80036f4:	f000 f876 	bl	80037e4 <__malloc_unlock>
 80036f8:	f104 000b 	add.w	r0, r4, #11
 80036fc:	1d23      	adds	r3, r4, #4
 80036fe:	f020 0007 	bic.w	r0, r0, #7
 8003702:	1ac2      	subs	r2, r0, r3
 8003704:	d0cc      	beq.n	80036a0 <_malloc_r+0x20>
 8003706:	1a1b      	subs	r3, r3, r0
 8003708:	50a3      	str	r3, [r4, r2]
 800370a:	e7c9      	b.n	80036a0 <_malloc_r+0x20>
 800370c:	4622      	mov	r2, r4
 800370e:	6864      	ldr	r4, [r4, #4]
 8003710:	e7cc      	b.n	80036ac <_malloc_r+0x2c>
 8003712:	1cc4      	adds	r4, r0, #3
 8003714:	f024 0403 	bic.w	r4, r4, #3
 8003718:	42a0      	cmp	r0, r4
 800371a:	d0e3      	beq.n	80036e4 <_malloc_r+0x64>
 800371c:	1a21      	subs	r1, r4, r0
 800371e:	4630      	mov	r0, r6
 8003720:	f000 f808 	bl	8003734 <_sbrk_r>
 8003724:	3001      	adds	r0, #1
 8003726:	d1dd      	bne.n	80036e4 <_malloc_r+0x64>
 8003728:	e7cf      	b.n	80036ca <_malloc_r+0x4a>
 800372a:	bf00      	nop
 800372c:	200002a8 	.word	0x200002a8
 8003730:	200002ac 	.word	0x200002ac

08003734 <_sbrk_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	2300      	movs	r3, #0
 8003738:	4d05      	ldr	r5, [pc, #20]	; (8003750 <_sbrk_r+0x1c>)
 800373a:	4604      	mov	r4, r0
 800373c:	4608      	mov	r0, r1
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	f000 fdca 	bl	80042d8 <_sbrk>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d102      	bne.n	800374e <_sbrk_r+0x1a>
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	b103      	cbz	r3, 800374e <_sbrk_r+0x1a>
 800374c:	6023      	str	r3, [r4, #0]
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	200002e0 	.word	0x200002e0

08003754 <__assert_func>:
 8003754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003756:	4614      	mov	r4, r2
 8003758:	461a      	mov	r2, r3
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <__assert_func+0x2c>)
 800375c:	4605      	mov	r5, r0
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68d8      	ldr	r0, [r3, #12]
 8003762:	b14c      	cbz	r4, 8003778 <__assert_func+0x24>
 8003764:	4b07      	ldr	r3, [pc, #28]	; (8003784 <__assert_func+0x30>)
 8003766:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800376a:	9100      	str	r1, [sp, #0]
 800376c:	462b      	mov	r3, r5
 800376e:	4906      	ldr	r1, [pc, #24]	; (8003788 <__assert_func+0x34>)
 8003770:	f000 f80e 	bl	8003790 <fiprintf>
 8003774:	f000 fa62 	bl	8003c3c <abort>
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <__assert_func+0x38>)
 800377a:	461c      	mov	r4, r3
 800377c:	e7f3      	b.n	8003766 <__assert_func+0x12>
 800377e:	bf00      	nop
 8003780:	20000000 	.word	0x20000000
 8003784:	0800454c 	.word	0x0800454c
 8003788:	08004559 	.word	0x08004559
 800378c:	08004587 	.word	0x08004587

08003790 <fiprintf>:
 8003790:	b40e      	push	{r1, r2, r3}
 8003792:	b503      	push	{r0, r1, lr}
 8003794:	4601      	mov	r1, r0
 8003796:	ab03      	add	r3, sp, #12
 8003798:	4805      	ldr	r0, [pc, #20]	; (80037b0 <fiprintf+0x20>)
 800379a:	f853 2b04 	ldr.w	r2, [r3], #4
 800379e:	6800      	ldr	r0, [r0, #0]
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	f000 f84d 	bl	8003840 <_vfiprintf_r>
 80037a6:	b002      	add	sp, #8
 80037a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037ac:	b003      	add	sp, #12
 80037ae:	4770      	bx	lr
 80037b0:	20000000 	.word	0x20000000

080037b4 <__ascii_mbtowc>:
 80037b4:	b082      	sub	sp, #8
 80037b6:	b901      	cbnz	r1, 80037ba <__ascii_mbtowc+0x6>
 80037b8:	a901      	add	r1, sp, #4
 80037ba:	b142      	cbz	r2, 80037ce <__ascii_mbtowc+0x1a>
 80037bc:	b14b      	cbz	r3, 80037d2 <__ascii_mbtowc+0x1e>
 80037be:	7813      	ldrb	r3, [r2, #0]
 80037c0:	600b      	str	r3, [r1, #0]
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	1e10      	subs	r0, r2, #0
 80037c6:	bf18      	it	ne
 80037c8:	2001      	movne	r0, #1
 80037ca:	b002      	add	sp, #8
 80037cc:	4770      	bx	lr
 80037ce:	4610      	mov	r0, r2
 80037d0:	e7fb      	b.n	80037ca <__ascii_mbtowc+0x16>
 80037d2:	f06f 0001 	mvn.w	r0, #1
 80037d6:	e7f8      	b.n	80037ca <__ascii_mbtowc+0x16>

080037d8 <__malloc_lock>:
 80037d8:	4801      	ldr	r0, [pc, #4]	; (80037e0 <__malloc_lock+0x8>)
 80037da:	f000 bbef 	b.w	8003fbc <__retarget_lock_acquire_recursive>
 80037de:	bf00      	nop
 80037e0:	200002e8 	.word	0x200002e8

080037e4 <__malloc_unlock>:
 80037e4:	4801      	ldr	r0, [pc, #4]	; (80037ec <__malloc_unlock+0x8>)
 80037e6:	f000 bbea 	b.w	8003fbe <__retarget_lock_release_recursive>
 80037ea:	bf00      	nop
 80037ec:	200002e8 	.word	0x200002e8

080037f0 <__sfputc_r>:
 80037f0:	6893      	ldr	r3, [r2, #8]
 80037f2:	b410      	push	{r4}
 80037f4:	3b01      	subs	r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	6093      	str	r3, [r2, #8]
 80037fa:	da07      	bge.n	800380c <__sfputc_r+0x1c>
 80037fc:	6994      	ldr	r4, [r2, #24]
 80037fe:	42a3      	cmp	r3, r4
 8003800:	db01      	blt.n	8003806 <__sfputc_r+0x16>
 8003802:	290a      	cmp	r1, #10
 8003804:	d102      	bne.n	800380c <__sfputc_r+0x1c>
 8003806:	bc10      	pop	{r4}
 8003808:	f000 b94a 	b.w	8003aa0 <__swbuf_r>
 800380c:	6813      	ldr	r3, [r2, #0]
 800380e:	1c58      	adds	r0, r3, #1
 8003810:	6010      	str	r0, [r2, #0]
 8003812:	7019      	strb	r1, [r3, #0]
 8003814:	4608      	mov	r0, r1
 8003816:	bc10      	pop	{r4}
 8003818:	4770      	bx	lr

0800381a <__sfputs_r>:
 800381a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381c:	4606      	mov	r6, r0
 800381e:	460f      	mov	r7, r1
 8003820:	4614      	mov	r4, r2
 8003822:	18d5      	adds	r5, r2, r3
 8003824:	42ac      	cmp	r4, r5
 8003826:	d101      	bne.n	800382c <__sfputs_r+0x12>
 8003828:	2000      	movs	r0, #0
 800382a:	e007      	b.n	800383c <__sfputs_r+0x22>
 800382c:	463a      	mov	r2, r7
 800382e:	4630      	mov	r0, r6
 8003830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003834:	f7ff ffdc 	bl	80037f0 <__sfputc_r>
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	d1f3      	bne.n	8003824 <__sfputs_r+0xa>
 800383c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003840 <_vfiprintf_r>:
 8003840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003844:	460d      	mov	r5, r1
 8003846:	4614      	mov	r4, r2
 8003848:	4698      	mov	r8, r3
 800384a:	4606      	mov	r6, r0
 800384c:	b09d      	sub	sp, #116	; 0x74
 800384e:	b118      	cbz	r0, 8003858 <_vfiprintf_r+0x18>
 8003850:	6983      	ldr	r3, [r0, #24]
 8003852:	b90b      	cbnz	r3, 8003858 <_vfiprintf_r+0x18>
 8003854:	f000 fb14 	bl	8003e80 <__sinit>
 8003858:	4b89      	ldr	r3, [pc, #548]	; (8003a80 <_vfiprintf_r+0x240>)
 800385a:	429d      	cmp	r5, r3
 800385c:	d11b      	bne.n	8003896 <_vfiprintf_r+0x56>
 800385e:	6875      	ldr	r5, [r6, #4]
 8003860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003862:	07d9      	lsls	r1, r3, #31
 8003864:	d405      	bmi.n	8003872 <_vfiprintf_r+0x32>
 8003866:	89ab      	ldrh	r3, [r5, #12]
 8003868:	059a      	lsls	r2, r3, #22
 800386a:	d402      	bmi.n	8003872 <_vfiprintf_r+0x32>
 800386c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800386e:	f000 fba5 	bl	8003fbc <__retarget_lock_acquire_recursive>
 8003872:	89ab      	ldrh	r3, [r5, #12]
 8003874:	071b      	lsls	r3, r3, #28
 8003876:	d501      	bpl.n	800387c <_vfiprintf_r+0x3c>
 8003878:	692b      	ldr	r3, [r5, #16]
 800387a:	b9eb      	cbnz	r3, 80038b8 <_vfiprintf_r+0x78>
 800387c:	4629      	mov	r1, r5
 800387e:	4630      	mov	r0, r6
 8003880:	f000 f96e 	bl	8003b60 <__swsetup_r>
 8003884:	b1c0      	cbz	r0, 80038b8 <_vfiprintf_r+0x78>
 8003886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003888:	07dc      	lsls	r4, r3, #31
 800388a:	d50e      	bpl.n	80038aa <_vfiprintf_r+0x6a>
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	b01d      	add	sp, #116	; 0x74
 8003892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003896:	4b7b      	ldr	r3, [pc, #492]	; (8003a84 <_vfiprintf_r+0x244>)
 8003898:	429d      	cmp	r5, r3
 800389a:	d101      	bne.n	80038a0 <_vfiprintf_r+0x60>
 800389c:	68b5      	ldr	r5, [r6, #8]
 800389e:	e7df      	b.n	8003860 <_vfiprintf_r+0x20>
 80038a0:	4b79      	ldr	r3, [pc, #484]	; (8003a88 <_vfiprintf_r+0x248>)
 80038a2:	429d      	cmp	r5, r3
 80038a4:	bf08      	it	eq
 80038a6:	68f5      	ldreq	r5, [r6, #12]
 80038a8:	e7da      	b.n	8003860 <_vfiprintf_r+0x20>
 80038aa:	89ab      	ldrh	r3, [r5, #12]
 80038ac:	0598      	lsls	r0, r3, #22
 80038ae:	d4ed      	bmi.n	800388c <_vfiprintf_r+0x4c>
 80038b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038b2:	f000 fb84 	bl	8003fbe <__retarget_lock_release_recursive>
 80038b6:	e7e9      	b.n	800388c <_vfiprintf_r+0x4c>
 80038b8:	2300      	movs	r3, #0
 80038ba:	9309      	str	r3, [sp, #36]	; 0x24
 80038bc:	2320      	movs	r3, #32
 80038be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038c2:	2330      	movs	r3, #48	; 0x30
 80038c4:	f04f 0901 	mov.w	r9, #1
 80038c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80038cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003a8c <_vfiprintf_r+0x24c>
 80038d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038d4:	4623      	mov	r3, r4
 80038d6:	469a      	mov	sl, r3
 80038d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038dc:	b10a      	cbz	r2, 80038e2 <_vfiprintf_r+0xa2>
 80038de:	2a25      	cmp	r2, #37	; 0x25
 80038e0:	d1f9      	bne.n	80038d6 <_vfiprintf_r+0x96>
 80038e2:	ebba 0b04 	subs.w	fp, sl, r4
 80038e6:	d00b      	beq.n	8003900 <_vfiprintf_r+0xc0>
 80038e8:	465b      	mov	r3, fp
 80038ea:	4622      	mov	r2, r4
 80038ec:	4629      	mov	r1, r5
 80038ee:	4630      	mov	r0, r6
 80038f0:	f7ff ff93 	bl	800381a <__sfputs_r>
 80038f4:	3001      	adds	r0, #1
 80038f6:	f000 80aa 	beq.w	8003a4e <_vfiprintf_r+0x20e>
 80038fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038fc:	445a      	add	r2, fp
 80038fe:	9209      	str	r2, [sp, #36]	; 0x24
 8003900:	f89a 3000 	ldrb.w	r3, [sl]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80a2 	beq.w	8003a4e <_vfiprintf_r+0x20e>
 800390a:	2300      	movs	r3, #0
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003914:	f10a 0a01 	add.w	sl, sl, #1
 8003918:	9304      	str	r3, [sp, #16]
 800391a:	9307      	str	r3, [sp, #28]
 800391c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003920:	931a      	str	r3, [sp, #104]	; 0x68
 8003922:	4654      	mov	r4, sl
 8003924:	2205      	movs	r2, #5
 8003926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800392a:	4858      	ldr	r0, [pc, #352]	; (8003a8c <_vfiprintf_r+0x24c>)
 800392c:	f7ff fabe 	bl	8002eac <memchr>
 8003930:	9a04      	ldr	r2, [sp, #16]
 8003932:	b9d8      	cbnz	r0, 800396c <_vfiprintf_r+0x12c>
 8003934:	06d1      	lsls	r1, r2, #27
 8003936:	bf44      	itt	mi
 8003938:	2320      	movmi	r3, #32
 800393a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800393e:	0713      	lsls	r3, r2, #28
 8003940:	bf44      	itt	mi
 8003942:	232b      	movmi	r3, #43	; 0x2b
 8003944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003948:	f89a 3000 	ldrb.w	r3, [sl]
 800394c:	2b2a      	cmp	r3, #42	; 0x2a
 800394e:	d015      	beq.n	800397c <_vfiprintf_r+0x13c>
 8003950:	4654      	mov	r4, sl
 8003952:	2000      	movs	r0, #0
 8003954:	f04f 0c0a 	mov.w	ip, #10
 8003958:	9a07      	ldr	r2, [sp, #28]
 800395a:	4621      	mov	r1, r4
 800395c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003960:	3b30      	subs	r3, #48	; 0x30
 8003962:	2b09      	cmp	r3, #9
 8003964:	d94e      	bls.n	8003a04 <_vfiprintf_r+0x1c4>
 8003966:	b1b0      	cbz	r0, 8003996 <_vfiprintf_r+0x156>
 8003968:	9207      	str	r2, [sp, #28]
 800396a:	e014      	b.n	8003996 <_vfiprintf_r+0x156>
 800396c:	eba0 0308 	sub.w	r3, r0, r8
 8003970:	fa09 f303 	lsl.w	r3, r9, r3
 8003974:	4313      	orrs	r3, r2
 8003976:	46a2      	mov	sl, r4
 8003978:	9304      	str	r3, [sp, #16]
 800397a:	e7d2      	b.n	8003922 <_vfiprintf_r+0xe2>
 800397c:	9b03      	ldr	r3, [sp, #12]
 800397e:	1d19      	adds	r1, r3, #4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	9103      	str	r1, [sp, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	bfbb      	ittet	lt
 8003988:	425b      	neglt	r3, r3
 800398a:	f042 0202 	orrlt.w	r2, r2, #2
 800398e:	9307      	strge	r3, [sp, #28]
 8003990:	9307      	strlt	r3, [sp, #28]
 8003992:	bfb8      	it	lt
 8003994:	9204      	strlt	r2, [sp, #16]
 8003996:	7823      	ldrb	r3, [r4, #0]
 8003998:	2b2e      	cmp	r3, #46	; 0x2e
 800399a:	d10c      	bne.n	80039b6 <_vfiprintf_r+0x176>
 800399c:	7863      	ldrb	r3, [r4, #1]
 800399e:	2b2a      	cmp	r3, #42	; 0x2a
 80039a0:	d135      	bne.n	8003a0e <_vfiprintf_r+0x1ce>
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	3402      	adds	r4, #2
 80039a6:	1d1a      	adds	r2, r3, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	9203      	str	r2, [sp, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bfb8      	it	lt
 80039b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80039b4:	9305      	str	r3, [sp, #20]
 80039b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003a9c <_vfiprintf_r+0x25c>
 80039ba:	2203      	movs	r2, #3
 80039bc:	4650      	mov	r0, sl
 80039be:	7821      	ldrb	r1, [r4, #0]
 80039c0:	f7ff fa74 	bl	8002eac <memchr>
 80039c4:	b140      	cbz	r0, 80039d8 <_vfiprintf_r+0x198>
 80039c6:	2340      	movs	r3, #64	; 0x40
 80039c8:	eba0 000a 	sub.w	r0, r0, sl
 80039cc:	fa03 f000 	lsl.w	r0, r3, r0
 80039d0:	9b04      	ldr	r3, [sp, #16]
 80039d2:	3401      	adds	r4, #1
 80039d4:	4303      	orrs	r3, r0
 80039d6:	9304      	str	r3, [sp, #16]
 80039d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039dc:	2206      	movs	r2, #6
 80039de:	482c      	ldr	r0, [pc, #176]	; (8003a90 <_vfiprintf_r+0x250>)
 80039e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039e4:	f7ff fa62 	bl	8002eac <memchr>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d03f      	beq.n	8003a6c <_vfiprintf_r+0x22c>
 80039ec:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <_vfiprintf_r+0x254>)
 80039ee:	bb1b      	cbnz	r3, 8003a38 <_vfiprintf_r+0x1f8>
 80039f0:	9b03      	ldr	r3, [sp, #12]
 80039f2:	3307      	adds	r3, #7
 80039f4:	f023 0307 	bic.w	r3, r3, #7
 80039f8:	3308      	adds	r3, #8
 80039fa:	9303      	str	r3, [sp, #12]
 80039fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039fe:	443b      	add	r3, r7
 8003a00:	9309      	str	r3, [sp, #36]	; 0x24
 8003a02:	e767      	b.n	80038d4 <_vfiprintf_r+0x94>
 8003a04:	460c      	mov	r4, r1
 8003a06:	2001      	movs	r0, #1
 8003a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a0c:	e7a5      	b.n	800395a <_vfiprintf_r+0x11a>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f04f 0c0a 	mov.w	ip, #10
 8003a14:	4619      	mov	r1, r3
 8003a16:	3401      	adds	r4, #1
 8003a18:	9305      	str	r3, [sp, #20]
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a20:	3a30      	subs	r2, #48	; 0x30
 8003a22:	2a09      	cmp	r2, #9
 8003a24:	d903      	bls.n	8003a2e <_vfiprintf_r+0x1ee>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0c5      	beq.n	80039b6 <_vfiprintf_r+0x176>
 8003a2a:	9105      	str	r1, [sp, #20]
 8003a2c:	e7c3      	b.n	80039b6 <_vfiprintf_r+0x176>
 8003a2e:	4604      	mov	r4, r0
 8003a30:	2301      	movs	r3, #1
 8003a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a36:	e7f0      	b.n	8003a1a <_vfiprintf_r+0x1da>
 8003a38:	ab03      	add	r3, sp, #12
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	462a      	mov	r2, r5
 8003a3e:	4630      	mov	r0, r6
 8003a40:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <_vfiprintf_r+0x258>)
 8003a42:	a904      	add	r1, sp, #16
 8003a44:	f7fd ffe8 	bl	8001a18 <_printf_float>
 8003a48:	4607      	mov	r7, r0
 8003a4a:	1c78      	adds	r0, r7, #1
 8003a4c:	d1d6      	bne.n	80039fc <_vfiprintf_r+0x1bc>
 8003a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a50:	07d9      	lsls	r1, r3, #31
 8003a52:	d405      	bmi.n	8003a60 <_vfiprintf_r+0x220>
 8003a54:	89ab      	ldrh	r3, [r5, #12]
 8003a56:	059a      	lsls	r2, r3, #22
 8003a58:	d402      	bmi.n	8003a60 <_vfiprintf_r+0x220>
 8003a5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a5c:	f000 faaf 	bl	8003fbe <__retarget_lock_release_recursive>
 8003a60:	89ab      	ldrh	r3, [r5, #12]
 8003a62:	065b      	lsls	r3, r3, #25
 8003a64:	f53f af12 	bmi.w	800388c <_vfiprintf_r+0x4c>
 8003a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a6a:	e711      	b.n	8003890 <_vfiprintf_r+0x50>
 8003a6c:	ab03      	add	r3, sp, #12
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	462a      	mov	r2, r5
 8003a72:	4630      	mov	r0, r6
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <_vfiprintf_r+0x258>)
 8003a76:	a904      	add	r1, sp, #16
 8003a78:	f7fe fa6a 	bl	8001f50 <_printf_i>
 8003a7c:	e7e4      	b.n	8003a48 <_vfiprintf_r+0x208>
 8003a7e:	bf00      	nop
 8003a80:	080046c4 	.word	0x080046c4
 8003a84:	080046e4 	.word	0x080046e4
 8003a88:	080046a4 	.word	0x080046a4
 8003a8c:	08004592 	.word	0x08004592
 8003a90:	0800459c 	.word	0x0800459c
 8003a94:	08001a19 	.word	0x08001a19
 8003a98:	0800381b 	.word	0x0800381b
 8003a9c:	08004598 	.word	0x08004598

08003aa0 <__swbuf_r>:
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	460e      	mov	r6, r1
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	b118      	cbz	r0, 8003ab2 <__swbuf_r+0x12>
 8003aaa:	6983      	ldr	r3, [r0, #24]
 8003aac:	b90b      	cbnz	r3, 8003ab2 <__swbuf_r+0x12>
 8003aae:	f000 f9e7 	bl	8003e80 <__sinit>
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <__swbuf_r+0x98>)
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	d12b      	bne.n	8003b10 <__swbuf_r+0x70>
 8003ab8:	686c      	ldr	r4, [r5, #4]
 8003aba:	69a3      	ldr	r3, [r4, #24]
 8003abc:	60a3      	str	r3, [r4, #8]
 8003abe:	89a3      	ldrh	r3, [r4, #12]
 8003ac0:	071a      	lsls	r2, r3, #28
 8003ac2:	d52f      	bpl.n	8003b24 <__swbuf_r+0x84>
 8003ac4:	6923      	ldr	r3, [r4, #16]
 8003ac6:	b36b      	cbz	r3, 8003b24 <__swbuf_r+0x84>
 8003ac8:	6923      	ldr	r3, [r4, #16]
 8003aca:	6820      	ldr	r0, [r4, #0]
 8003acc:	b2f6      	uxtb	r6, r6
 8003ace:	1ac0      	subs	r0, r0, r3
 8003ad0:	6963      	ldr	r3, [r4, #20]
 8003ad2:	4637      	mov	r7, r6
 8003ad4:	4283      	cmp	r3, r0
 8003ad6:	dc04      	bgt.n	8003ae2 <__swbuf_r+0x42>
 8003ad8:	4621      	mov	r1, r4
 8003ada:	4628      	mov	r0, r5
 8003adc:	f000 f93c 	bl	8003d58 <_fflush_r>
 8003ae0:	bb30      	cbnz	r0, 8003b30 <__swbuf_r+0x90>
 8003ae2:	68a3      	ldr	r3, [r4, #8]
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	60a3      	str	r3, [r4, #8]
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	6022      	str	r2, [r4, #0]
 8003af0:	701e      	strb	r6, [r3, #0]
 8003af2:	6963      	ldr	r3, [r4, #20]
 8003af4:	4283      	cmp	r3, r0
 8003af6:	d004      	beq.n	8003b02 <__swbuf_r+0x62>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	07db      	lsls	r3, r3, #31
 8003afc:	d506      	bpl.n	8003b0c <__swbuf_r+0x6c>
 8003afe:	2e0a      	cmp	r6, #10
 8003b00:	d104      	bne.n	8003b0c <__swbuf_r+0x6c>
 8003b02:	4621      	mov	r1, r4
 8003b04:	4628      	mov	r0, r5
 8003b06:	f000 f927 	bl	8003d58 <_fflush_r>
 8003b0a:	b988      	cbnz	r0, 8003b30 <__swbuf_r+0x90>
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <__swbuf_r+0x9c>)
 8003b12:	429c      	cmp	r4, r3
 8003b14:	d101      	bne.n	8003b1a <__swbuf_r+0x7a>
 8003b16:	68ac      	ldr	r4, [r5, #8]
 8003b18:	e7cf      	b.n	8003aba <__swbuf_r+0x1a>
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <__swbuf_r+0xa0>)
 8003b1c:	429c      	cmp	r4, r3
 8003b1e:	bf08      	it	eq
 8003b20:	68ec      	ldreq	r4, [r5, #12]
 8003b22:	e7ca      	b.n	8003aba <__swbuf_r+0x1a>
 8003b24:	4621      	mov	r1, r4
 8003b26:	4628      	mov	r0, r5
 8003b28:	f000 f81a 	bl	8003b60 <__swsetup_r>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d0cb      	beq.n	8003ac8 <__swbuf_r+0x28>
 8003b30:	f04f 37ff 	mov.w	r7, #4294967295
 8003b34:	e7ea      	b.n	8003b0c <__swbuf_r+0x6c>
 8003b36:	bf00      	nop
 8003b38:	080046c4 	.word	0x080046c4
 8003b3c:	080046e4 	.word	0x080046e4
 8003b40:	080046a4 	.word	0x080046a4

08003b44 <__ascii_wctomb>:
 8003b44:	4603      	mov	r3, r0
 8003b46:	4608      	mov	r0, r1
 8003b48:	b141      	cbz	r1, 8003b5c <__ascii_wctomb+0x18>
 8003b4a:	2aff      	cmp	r2, #255	; 0xff
 8003b4c:	d904      	bls.n	8003b58 <__ascii_wctomb+0x14>
 8003b4e:	228a      	movs	r2, #138	; 0x8a
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	4770      	bx	lr
 8003b58:	2001      	movs	r0, #1
 8003b5a:	700a      	strb	r2, [r1, #0]
 8003b5c:	4770      	bx	lr
	...

08003b60 <__swsetup_r>:
 8003b60:	4b32      	ldr	r3, [pc, #200]	; (8003c2c <__swsetup_r+0xcc>)
 8003b62:	b570      	push	{r4, r5, r6, lr}
 8003b64:	681d      	ldr	r5, [r3, #0]
 8003b66:	4606      	mov	r6, r0
 8003b68:	460c      	mov	r4, r1
 8003b6a:	b125      	cbz	r5, 8003b76 <__swsetup_r+0x16>
 8003b6c:	69ab      	ldr	r3, [r5, #24]
 8003b6e:	b913      	cbnz	r3, 8003b76 <__swsetup_r+0x16>
 8003b70:	4628      	mov	r0, r5
 8003b72:	f000 f985 	bl	8003e80 <__sinit>
 8003b76:	4b2e      	ldr	r3, [pc, #184]	; (8003c30 <__swsetup_r+0xd0>)
 8003b78:	429c      	cmp	r4, r3
 8003b7a:	d10f      	bne.n	8003b9c <__swsetup_r+0x3c>
 8003b7c:	686c      	ldr	r4, [r5, #4]
 8003b7e:	89a3      	ldrh	r3, [r4, #12]
 8003b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b84:	0719      	lsls	r1, r3, #28
 8003b86:	d42c      	bmi.n	8003be2 <__swsetup_r+0x82>
 8003b88:	06dd      	lsls	r5, r3, #27
 8003b8a:	d411      	bmi.n	8003bb0 <__swsetup_r+0x50>
 8003b8c:	2309      	movs	r3, #9
 8003b8e:	6033      	str	r3, [r6, #0]
 8003b90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	81a3      	strh	r3, [r4, #12]
 8003b9a:	e03e      	b.n	8003c1a <__swsetup_r+0xba>
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <__swsetup_r+0xd4>)
 8003b9e:	429c      	cmp	r4, r3
 8003ba0:	d101      	bne.n	8003ba6 <__swsetup_r+0x46>
 8003ba2:	68ac      	ldr	r4, [r5, #8]
 8003ba4:	e7eb      	b.n	8003b7e <__swsetup_r+0x1e>
 8003ba6:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <__swsetup_r+0xd8>)
 8003ba8:	429c      	cmp	r4, r3
 8003baa:	bf08      	it	eq
 8003bac:	68ec      	ldreq	r4, [r5, #12]
 8003bae:	e7e6      	b.n	8003b7e <__swsetup_r+0x1e>
 8003bb0:	0758      	lsls	r0, r3, #29
 8003bb2:	d512      	bpl.n	8003bda <__swsetup_r+0x7a>
 8003bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bb6:	b141      	cbz	r1, 8003bca <__swsetup_r+0x6a>
 8003bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bbc:	4299      	cmp	r1, r3
 8003bbe:	d002      	beq.n	8003bc6 <__swsetup_r+0x66>
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	f7ff fd11 	bl	80035e8 <_free_r>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	6363      	str	r3, [r4, #52]	; 0x34
 8003bca:	89a3      	ldrh	r3, [r4, #12]
 8003bcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bd0:	81a3      	strh	r3, [r4, #12]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6063      	str	r3, [r4, #4]
 8003bd6:	6923      	ldr	r3, [r4, #16]
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	f043 0308 	orr.w	r3, r3, #8
 8003be0:	81a3      	strh	r3, [r4, #12]
 8003be2:	6923      	ldr	r3, [r4, #16]
 8003be4:	b94b      	cbnz	r3, 8003bfa <__swsetup_r+0x9a>
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf0:	d003      	beq.n	8003bfa <__swsetup_r+0x9a>
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	f000 fa07 	bl	8004008 <__smakebuf_r>
 8003bfa:	89a0      	ldrh	r0, [r4, #12]
 8003bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c00:	f010 0301 	ands.w	r3, r0, #1
 8003c04:	d00a      	beq.n	8003c1c <__swsetup_r+0xbc>
 8003c06:	2300      	movs	r3, #0
 8003c08:	60a3      	str	r3, [r4, #8]
 8003c0a:	6963      	ldr	r3, [r4, #20]
 8003c0c:	425b      	negs	r3, r3
 8003c0e:	61a3      	str	r3, [r4, #24]
 8003c10:	6923      	ldr	r3, [r4, #16]
 8003c12:	b943      	cbnz	r3, 8003c26 <__swsetup_r+0xc6>
 8003c14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c18:	d1ba      	bne.n	8003b90 <__swsetup_r+0x30>
 8003c1a:	bd70      	pop	{r4, r5, r6, pc}
 8003c1c:	0781      	lsls	r1, r0, #30
 8003c1e:	bf58      	it	pl
 8003c20:	6963      	ldrpl	r3, [r4, #20]
 8003c22:	60a3      	str	r3, [r4, #8]
 8003c24:	e7f4      	b.n	8003c10 <__swsetup_r+0xb0>
 8003c26:	2000      	movs	r0, #0
 8003c28:	e7f7      	b.n	8003c1a <__swsetup_r+0xba>
 8003c2a:	bf00      	nop
 8003c2c:	20000000 	.word	0x20000000
 8003c30:	080046c4 	.word	0x080046c4
 8003c34:	080046e4 	.word	0x080046e4
 8003c38:	080046a4 	.word	0x080046a4

08003c3c <abort>:
 8003c3c:	2006      	movs	r0, #6
 8003c3e:	b508      	push	{r3, lr}
 8003c40:	f000 fa4a 	bl	80040d8 <raise>
 8003c44:	2001      	movs	r0, #1
 8003c46:	f000 fb5d 	bl	8004304 <_exit>
	...

08003c4c <__sflush_r>:
 8003c4c:	898a      	ldrh	r2, [r1, #12]
 8003c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c52:	4605      	mov	r5, r0
 8003c54:	0710      	lsls	r0, r2, #28
 8003c56:	460c      	mov	r4, r1
 8003c58:	d458      	bmi.n	8003d0c <__sflush_r+0xc0>
 8003c5a:	684b      	ldr	r3, [r1, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	dc05      	bgt.n	8003c6c <__sflush_r+0x20>
 8003c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	dc02      	bgt.n	8003c6c <__sflush_r+0x20>
 8003c66:	2000      	movs	r0, #0
 8003c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c6e:	2e00      	cmp	r6, #0
 8003c70:	d0f9      	beq.n	8003c66 <__sflush_r+0x1a>
 8003c72:	2300      	movs	r3, #0
 8003c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c78:	682f      	ldr	r7, [r5, #0]
 8003c7a:	602b      	str	r3, [r5, #0]
 8003c7c:	d032      	beq.n	8003ce4 <__sflush_r+0x98>
 8003c7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	075a      	lsls	r2, r3, #29
 8003c84:	d505      	bpl.n	8003c92 <__sflush_r+0x46>
 8003c86:	6863      	ldr	r3, [r4, #4]
 8003c88:	1ac0      	subs	r0, r0, r3
 8003c8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c8c:	b10b      	cbz	r3, 8003c92 <__sflush_r+0x46>
 8003c8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c90:	1ac0      	subs	r0, r0, r3
 8003c92:	2300      	movs	r3, #0
 8003c94:	4602      	mov	r2, r0
 8003c96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c98:	4628      	mov	r0, r5
 8003c9a:	6a21      	ldr	r1, [r4, #32]
 8003c9c:	47b0      	blx	r6
 8003c9e:	1c43      	adds	r3, r0, #1
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	d106      	bne.n	8003cb2 <__sflush_r+0x66>
 8003ca4:	6829      	ldr	r1, [r5, #0]
 8003ca6:	291d      	cmp	r1, #29
 8003ca8:	d82c      	bhi.n	8003d04 <__sflush_r+0xb8>
 8003caa:	4a2a      	ldr	r2, [pc, #168]	; (8003d54 <__sflush_r+0x108>)
 8003cac:	40ca      	lsrs	r2, r1
 8003cae:	07d6      	lsls	r6, r2, #31
 8003cb0:	d528      	bpl.n	8003d04 <__sflush_r+0xb8>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	6062      	str	r2, [r4, #4]
 8003cb6:	6922      	ldr	r2, [r4, #16]
 8003cb8:	04d9      	lsls	r1, r3, #19
 8003cba:	6022      	str	r2, [r4, #0]
 8003cbc:	d504      	bpl.n	8003cc8 <__sflush_r+0x7c>
 8003cbe:	1c42      	adds	r2, r0, #1
 8003cc0:	d101      	bne.n	8003cc6 <__sflush_r+0x7a>
 8003cc2:	682b      	ldr	r3, [r5, #0]
 8003cc4:	b903      	cbnz	r3, 8003cc8 <__sflush_r+0x7c>
 8003cc6:	6560      	str	r0, [r4, #84]	; 0x54
 8003cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cca:	602f      	str	r7, [r5, #0]
 8003ccc:	2900      	cmp	r1, #0
 8003cce:	d0ca      	beq.n	8003c66 <__sflush_r+0x1a>
 8003cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cd4:	4299      	cmp	r1, r3
 8003cd6:	d002      	beq.n	8003cde <__sflush_r+0x92>
 8003cd8:	4628      	mov	r0, r5
 8003cda:	f7ff fc85 	bl	80035e8 <_free_r>
 8003cde:	2000      	movs	r0, #0
 8003ce0:	6360      	str	r0, [r4, #52]	; 0x34
 8003ce2:	e7c1      	b.n	8003c68 <__sflush_r+0x1c>
 8003ce4:	6a21      	ldr	r1, [r4, #32]
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	4628      	mov	r0, r5
 8003cea:	47b0      	blx	r6
 8003cec:	1c41      	adds	r1, r0, #1
 8003cee:	d1c7      	bne.n	8003c80 <__sflush_r+0x34>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0c4      	beq.n	8003c80 <__sflush_r+0x34>
 8003cf6:	2b1d      	cmp	r3, #29
 8003cf8:	d001      	beq.n	8003cfe <__sflush_r+0xb2>
 8003cfa:	2b16      	cmp	r3, #22
 8003cfc:	d101      	bne.n	8003d02 <__sflush_r+0xb6>
 8003cfe:	602f      	str	r7, [r5, #0]
 8003d00:	e7b1      	b.n	8003c66 <__sflush_r+0x1a>
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d08:	81a3      	strh	r3, [r4, #12]
 8003d0a:	e7ad      	b.n	8003c68 <__sflush_r+0x1c>
 8003d0c:	690f      	ldr	r7, [r1, #16]
 8003d0e:	2f00      	cmp	r7, #0
 8003d10:	d0a9      	beq.n	8003c66 <__sflush_r+0x1a>
 8003d12:	0793      	lsls	r3, r2, #30
 8003d14:	bf18      	it	ne
 8003d16:	2300      	movne	r3, #0
 8003d18:	680e      	ldr	r6, [r1, #0]
 8003d1a:	bf08      	it	eq
 8003d1c:	694b      	ldreq	r3, [r1, #20]
 8003d1e:	eba6 0807 	sub.w	r8, r6, r7
 8003d22:	600f      	str	r7, [r1, #0]
 8003d24:	608b      	str	r3, [r1, #8]
 8003d26:	f1b8 0f00 	cmp.w	r8, #0
 8003d2a:	dd9c      	ble.n	8003c66 <__sflush_r+0x1a>
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	463a      	mov	r2, r7
 8003d30:	4628      	mov	r0, r5
 8003d32:	6a21      	ldr	r1, [r4, #32]
 8003d34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d36:	47b0      	blx	r6
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	dc06      	bgt.n	8003d4a <__sflush_r+0xfe>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d46:	81a3      	strh	r3, [r4, #12]
 8003d48:	e78e      	b.n	8003c68 <__sflush_r+0x1c>
 8003d4a:	4407      	add	r7, r0
 8003d4c:	eba8 0800 	sub.w	r8, r8, r0
 8003d50:	e7e9      	b.n	8003d26 <__sflush_r+0xda>
 8003d52:	bf00      	nop
 8003d54:	20400001 	.word	0x20400001

08003d58 <_fflush_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	690b      	ldr	r3, [r1, #16]
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	460c      	mov	r4, r1
 8003d60:	b913      	cbnz	r3, 8003d68 <_fflush_r+0x10>
 8003d62:	2500      	movs	r5, #0
 8003d64:	4628      	mov	r0, r5
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	b118      	cbz	r0, 8003d72 <_fflush_r+0x1a>
 8003d6a:	6983      	ldr	r3, [r0, #24]
 8003d6c:	b90b      	cbnz	r3, 8003d72 <_fflush_r+0x1a>
 8003d6e:	f000 f887 	bl	8003e80 <__sinit>
 8003d72:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <_fflush_r+0x6c>)
 8003d74:	429c      	cmp	r4, r3
 8003d76:	d11b      	bne.n	8003db0 <_fflush_r+0x58>
 8003d78:	686c      	ldr	r4, [r5, #4]
 8003d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0ef      	beq.n	8003d62 <_fflush_r+0xa>
 8003d82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d84:	07d0      	lsls	r0, r2, #31
 8003d86:	d404      	bmi.n	8003d92 <_fflush_r+0x3a>
 8003d88:	0599      	lsls	r1, r3, #22
 8003d8a:	d402      	bmi.n	8003d92 <_fflush_r+0x3a>
 8003d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d8e:	f000 f915 	bl	8003fbc <__retarget_lock_acquire_recursive>
 8003d92:	4628      	mov	r0, r5
 8003d94:	4621      	mov	r1, r4
 8003d96:	f7ff ff59 	bl	8003c4c <__sflush_r>
 8003d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d9c:	4605      	mov	r5, r0
 8003d9e:	07da      	lsls	r2, r3, #31
 8003da0:	d4e0      	bmi.n	8003d64 <_fflush_r+0xc>
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	059b      	lsls	r3, r3, #22
 8003da6:	d4dd      	bmi.n	8003d64 <_fflush_r+0xc>
 8003da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003daa:	f000 f908 	bl	8003fbe <__retarget_lock_release_recursive>
 8003dae:	e7d9      	b.n	8003d64 <_fflush_r+0xc>
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <_fflush_r+0x70>)
 8003db2:	429c      	cmp	r4, r3
 8003db4:	d101      	bne.n	8003dba <_fflush_r+0x62>
 8003db6:	68ac      	ldr	r4, [r5, #8]
 8003db8:	e7df      	b.n	8003d7a <_fflush_r+0x22>
 8003dba:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <_fflush_r+0x74>)
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	bf08      	it	eq
 8003dc0:	68ec      	ldreq	r4, [r5, #12]
 8003dc2:	e7da      	b.n	8003d7a <_fflush_r+0x22>
 8003dc4:	080046c4 	.word	0x080046c4
 8003dc8:	080046e4 	.word	0x080046e4
 8003dcc:	080046a4 	.word	0x080046a4

08003dd0 <std>:
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	b510      	push	{r4, lr}
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8003dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dde:	6083      	str	r3, [r0, #8]
 8003de0:	8181      	strh	r1, [r0, #12]
 8003de2:	6643      	str	r3, [r0, #100]	; 0x64
 8003de4:	81c2      	strh	r2, [r0, #14]
 8003de6:	6183      	str	r3, [r0, #24]
 8003de8:	4619      	mov	r1, r3
 8003dea:	2208      	movs	r2, #8
 8003dec:	305c      	adds	r0, #92	; 0x5c
 8003dee:	f7fd fd6d 	bl	80018cc <memset>
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <std+0x38>)
 8003df4:	6224      	str	r4, [r4, #32]
 8003df6:	6263      	str	r3, [r4, #36]	; 0x24
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <std+0x3c>)
 8003dfa:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <std+0x40>)
 8003dfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <std+0x44>)
 8003e02:	6323      	str	r3, [r4, #48]	; 0x30
 8003e04:	bd10      	pop	{r4, pc}
 8003e06:	bf00      	nop
 8003e08:	08004111 	.word	0x08004111
 8003e0c:	08004133 	.word	0x08004133
 8003e10:	0800416b 	.word	0x0800416b
 8003e14:	0800418f 	.word	0x0800418f

08003e18 <_cleanup_r>:
 8003e18:	4901      	ldr	r1, [pc, #4]	; (8003e20 <_cleanup_r+0x8>)
 8003e1a:	f000 b8af 	b.w	8003f7c <_fwalk_reent>
 8003e1e:	bf00      	nop
 8003e20:	08003d59 	.word	0x08003d59

08003e24 <__sfmoreglue>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	2568      	movs	r5, #104	; 0x68
 8003e28:	1e4a      	subs	r2, r1, #1
 8003e2a:	4355      	muls	r5, r2
 8003e2c:	460e      	mov	r6, r1
 8003e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e32:	f7ff fc25 	bl	8003680 <_malloc_r>
 8003e36:	4604      	mov	r4, r0
 8003e38:	b140      	cbz	r0, 8003e4c <__sfmoreglue+0x28>
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8003e40:	300c      	adds	r0, #12
 8003e42:	60a0      	str	r0, [r4, #8]
 8003e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e48:	f7fd fd40 	bl	80018cc <memset>
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}

08003e50 <__sfp_lock_acquire>:
 8003e50:	4801      	ldr	r0, [pc, #4]	; (8003e58 <__sfp_lock_acquire+0x8>)
 8003e52:	f000 b8b3 	b.w	8003fbc <__retarget_lock_acquire_recursive>
 8003e56:	bf00      	nop
 8003e58:	200002ec 	.word	0x200002ec

08003e5c <__sfp_lock_release>:
 8003e5c:	4801      	ldr	r0, [pc, #4]	; (8003e64 <__sfp_lock_release+0x8>)
 8003e5e:	f000 b8ae 	b.w	8003fbe <__retarget_lock_release_recursive>
 8003e62:	bf00      	nop
 8003e64:	200002ec 	.word	0x200002ec

08003e68 <__sinit_lock_acquire>:
 8003e68:	4801      	ldr	r0, [pc, #4]	; (8003e70 <__sinit_lock_acquire+0x8>)
 8003e6a:	f000 b8a7 	b.w	8003fbc <__retarget_lock_acquire_recursive>
 8003e6e:	bf00      	nop
 8003e70:	200002e7 	.word	0x200002e7

08003e74 <__sinit_lock_release>:
 8003e74:	4801      	ldr	r0, [pc, #4]	; (8003e7c <__sinit_lock_release+0x8>)
 8003e76:	f000 b8a2 	b.w	8003fbe <__retarget_lock_release_recursive>
 8003e7a:	bf00      	nop
 8003e7c:	200002e7 	.word	0x200002e7

08003e80 <__sinit>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	4604      	mov	r4, r0
 8003e84:	f7ff fff0 	bl	8003e68 <__sinit_lock_acquire>
 8003e88:	69a3      	ldr	r3, [r4, #24]
 8003e8a:	b11b      	cbz	r3, 8003e94 <__sinit+0x14>
 8003e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e90:	f7ff bff0 	b.w	8003e74 <__sinit_lock_release>
 8003e94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e98:	6523      	str	r3, [r4, #80]	; 0x50
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <__sinit+0x68>)
 8003e9c:	4a13      	ldr	r2, [pc, #76]	; (8003eec <__sinit+0x6c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003ea2:	42a3      	cmp	r3, r4
 8003ea4:	bf08      	it	eq
 8003ea6:	2301      	moveq	r3, #1
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	bf08      	it	eq
 8003eac:	61a3      	streq	r3, [r4, #24]
 8003eae:	f000 f81f 	bl	8003ef0 <__sfp>
 8003eb2:	6060      	str	r0, [r4, #4]
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f000 f81b 	bl	8003ef0 <__sfp>
 8003eba:	60a0      	str	r0, [r4, #8]
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f000 f817 	bl	8003ef0 <__sfp>
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	60e0      	str	r0, [r4, #12]
 8003ec8:	6860      	ldr	r0, [r4, #4]
 8003eca:	f7ff ff81 	bl	8003dd0 <std>
 8003ece:	2201      	movs	r2, #1
 8003ed0:	2109      	movs	r1, #9
 8003ed2:	68a0      	ldr	r0, [r4, #8]
 8003ed4:	f7ff ff7c 	bl	8003dd0 <std>
 8003ed8:	2202      	movs	r2, #2
 8003eda:	2112      	movs	r1, #18
 8003edc:	68e0      	ldr	r0, [r4, #12]
 8003ede:	f7ff ff77 	bl	8003dd0 <std>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61a3      	str	r3, [r4, #24]
 8003ee6:	e7d1      	b.n	8003e8c <__sinit+0xc>
 8003ee8:	08004320 	.word	0x08004320
 8003eec:	08003e19 	.word	0x08003e19

08003ef0 <__sfp>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	4607      	mov	r7, r0
 8003ef4:	f7ff ffac 	bl	8003e50 <__sfp_lock_acquire>
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <__sfp+0x84>)
 8003efa:	681e      	ldr	r6, [r3, #0]
 8003efc:	69b3      	ldr	r3, [r6, #24]
 8003efe:	b913      	cbnz	r3, 8003f06 <__sfp+0x16>
 8003f00:	4630      	mov	r0, r6
 8003f02:	f7ff ffbd 	bl	8003e80 <__sinit>
 8003f06:	3648      	adds	r6, #72	; 0x48
 8003f08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	d503      	bpl.n	8003f18 <__sfp+0x28>
 8003f10:	6833      	ldr	r3, [r6, #0]
 8003f12:	b30b      	cbz	r3, 8003f58 <__sfp+0x68>
 8003f14:	6836      	ldr	r6, [r6, #0]
 8003f16:	e7f7      	b.n	8003f08 <__sfp+0x18>
 8003f18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f1c:	b9d5      	cbnz	r5, 8003f54 <__sfp+0x64>
 8003f1e:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <__sfp+0x88>)
 8003f20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f24:	60e3      	str	r3, [r4, #12]
 8003f26:	6665      	str	r5, [r4, #100]	; 0x64
 8003f28:	f000 f847 	bl	8003fba <__retarget_lock_init_recursive>
 8003f2c:	f7ff ff96 	bl	8003e5c <__sfp_lock_release>
 8003f30:	2208      	movs	r2, #8
 8003f32:	4629      	mov	r1, r5
 8003f34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f3c:	6025      	str	r5, [r4, #0]
 8003f3e:	61a5      	str	r5, [r4, #24]
 8003f40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f44:	f7fd fcc2 	bl	80018cc <memset>
 8003f48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f50:	4620      	mov	r0, r4
 8003f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f54:	3468      	adds	r4, #104	; 0x68
 8003f56:	e7d9      	b.n	8003f0c <__sfp+0x1c>
 8003f58:	2104      	movs	r1, #4
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	f7ff ff62 	bl	8003e24 <__sfmoreglue>
 8003f60:	4604      	mov	r4, r0
 8003f62:	6030      	str	r0, [r6, #0]
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d1d5      	bne.n	8003f14 <__sfp+0x24>
 8003f68:	f7ff ff78 	bl	8003e5c <__sfp_lock_release>
 8003f6c:	230c      	movs	r3, #12
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	e7ee      	b.n	8003f50 <__sfp+0x60>
 8003f72:	bf00      	nop
 8003f74:	08004320 	.word	0x08004320
 8003f78:	ffff0001 	.word	0xffff0001

08003f7c <_fwalk_reent>:
 8003f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f80:	4606      	mov	r6, r0
 8003f82:	4688      	mov	r8, r1
 8003f84:	2700      	movs	r7, #0
 8003f86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8003f92:	d505      	bpl.n	8003fa0 <_fwalk_reent+0x24>
 8003f94:	6824      	ldr	r4, [r4, #0]
 8003f96:	2c00      	cmp	r4, #0
 8003f98:	d1f7      	bne.n	8003f8a <_fwalk_reent+0xe>
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fa0:	89ab      	ldrh	r3, [r5, #12]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d907      	bls.n	8003fb6 <_fwalk_reent+0x3a>
 8003fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003faa:	3301      	adds	r3, #1
 8003fac:	d003      	beq.n	8003fb6 <_fwalk_reent+0x3a>
 8003fae:	4629      	mov	r1, r5
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	47c0      	blx	r8
 8003fb4:	4307      	orrs	r7, r0
 8003fb6:	3568      	adds	r5, #104	; 0x68
 8003fb8:	e7e9      	b.n	8003f8e <_fwalk_reent+0x12>

08003fba <__retarget_lock_init_recursive>:
 8003fba:	4770      	bx	lr

08003fbc <__retarget_lock_acquire_recursive>:
 8003fbc:	4770      	bx	lr

08003fbe <__retarget_lock_release_recursive>:
 8003fbe:	4770      	bx	lr

08003fc0 <__swhatbuf_r>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	460e      	mov	r6, r1
 8003fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc8:	4614      	mov	r4, r2
 8003fca:	2900      	cmp	r1, #0
 8003fcc:	461d      	mov	r5, r3
 8003fce:	b096      	sub	sp, #88	; 0x58
 8003fd0:	da07      	bge.n	8003fe2 <__swhatbuf_r+0x22>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	602b      	str	r3, [r5, #0]
 8003fd6:	89b3      	ldrh	r3, [r6, #12]
 8003fd8:	061a      	lsls	r2, r3, #24
 8003fda:	d410      	bmi.n	8003ffe <__swhatbuf_r+0x3e>
 8003fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe0:	e00e      	b.n	8004000 <__swhatbuf_r+0x40>
 8003fe2:	466a      	mov	r2, sp
 8003fe4:	f000 f8fa 	bl	80041dc <_fstat_r>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	dbf2      	blt.n	8003fd2 <__swhatbuf_r+0x12>
 8003fec:	9a01      	ldr	r2, [sp, #4]
 8003fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ff6:	425a      	negs	r2, r3
 8003ff8:	415a      	adcs	r2, r3
 8003ffa:	602a      	str	r2, [r5, #0]
 8003ffc:	e7ee      	b.n	8003fdc <__swhatbuf_r+0x1c>
 8003ffe:	2340      	movs	r3, #64	; 0x40
 8004000:	2000      	movs	r0, #0
 8004002:	6023      	str	r3, [r4, #0]
 8004004:	b016      	add	sp, #88	; 0x58
 8004006:	bd70      	pop	{r4, r5, r6, pc}

08004008 <__smakebuf_r>:
 8004008:	898b      	ldrh	r3, [r1, #12]
 800400a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800400c:	079d      	lsls	r5, r3, #30
 800400e:	4606      	mov	r6, r0
 8004010:	460c      	mov	r4, r1
 8004012:	d507      	bpl.n	8004024 <__smakebuf_r+0x1c>
 8004014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	6123      	str	r3, [r4, #16]
 800401c:	2301      	movs	r3, #1
 800401e:	6163      	str	r3, [r4, #20]
 8004020:	b002      	add	sp, #8
 8004022:	bd70      	pop	{r4, r5, r6, pc}
 8004024:	466a      	mov	r2, sp
 8004026:	ab01      	add	r3, sp, #4
 8004028:	f7ff ffca 	bl	8003fc0 <__swhatbuf_r>
 800402c:	9900      	ldr	r1, [sp, #0]
 800402e:	4605      	mov	r5, r0
 8004030:	4630      	mov	r0, r6
 8004032:	f7ff fb25 	bl	8003680 <_malloc_r>
 8004036:	b948      	cbnz	r0, 800404c <__smakebuf_r+0x44>
 8004038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800403c:	059a      	lsls	r2, r3, #22
 800403e:	d4ef      	bmi.n	8004020 <__smakebuf_r+0x18>
 8004040:	f023 0303 	bic.w	r3, r3, #3
 8004044:	f043 0302 	orr.w	r3, r3, #2
 8004048:	81a3      	strh	r3, [r4, #12]
 800404a:	e7e3      	b.n	8004014 <__smakebuf_r+0xc>
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <__smakebuf_r+0x7c>)
 800404e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	6020      	str	r0, [r4, #0]
 8004054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004058:	81a3      	strh	r3, [r4, #12]
 800405a:	9b00      	ldr	r3, [sp, #0]
 800405c:	6120      	str	r0, [r4, #16]
 800405e:	6163      	str	r3, [r4, #20]
 8004060:	9b01      	ldr	r3, [sp, #4]
 8004062:	b15b      	cbz	r3, 800407c <__smakebuf_r+0x74>
 8004064:	4630      	mov	r0, r6
 8004066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800406a:	f000 f8c9 	bl	8004200 <_isatty_r>
 800406e:	b128      	cbz	r0, 800407c <__smakebuf_r+0x74>
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	f023 0303 	bic.w	r3, r3, #3
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	89a0      	ldrh	r0, [r4, #12]
 800407e:	4305      	orrs	r5, r0
 8004080:	81a5      	strh	r5, [r4, #12]
 8004082:	e7cd      	b.n	8004020 <__smakebuf_r+0x18>
 8004084:	08003e19 	.word	0x08003e19

08004088 <_raise_r>:
 8004088:	291f      	cmp	r1, #31
 800408a:	b538      	push	{r3, r4, r5, lr}
 800408c:	4604      	mov	r4, r0
 800408e:	460d      	mov	r5, r1
 8004090:	d904      	bls.n	800409c <_raise_r+0x14>
 8004092:	2316      	movs	r3, #22
 8004094:	6003      	str	r3, [r0, #0]
 8004096:	f04f 30ff 	mov.w	r0, #4294967295
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800409e:	b112      	cbz	r2, 80040a6 <_raise_r+0x1e>
 80040a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80040a4:	b94b      	cbnz	r3, 80040ba <_raise_r+0x32>
 80040a6:	4620      	mov	r0, r4
 80040a8:	f000 f830 	bl	800410c <_getpid_r>
 80040ac:	462a      	mov	r2, r5
 80040ae:	4601      	mov	r1, r0
 80040b0:	4620      	mov	r0, r4
 80040b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040b6:	f000 b817 	b.w	80040e8 <_kill_r>
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d00a      	beq.n	80040d4 <_raise_r+0x4c>
 80040be:	1c59      	adds	r1, r3, #1
 80040c0:	d103      	bne.n	80040ca <_raise_r+0x42>
 80040c2:	2316      	movs	r3, #22
 80040c4:	6003      	str	r3, [r0, #0]
 80040c6:	2001      	movs	r0, #1
 80040c8:	e7e7      	b.n	800409a <_raise_r+0x12>
 80040ca:	2400      	movs	r4, #0
 80040cc:	4628      	mov	r0, r5
 80040ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80040d2:	4798      	blx	r3
 80040d4:	2000      	movs	r0, #0
 80040d6:	e7e0      	b.n	800409a <_raise_r+0x12>

080040d8 <raise>:
 80040d8:	4b02      	ldr	r3, [pc, #8]	; (80040e4 <raise+0xc>)
 80040da:	4601      	mov	r1, r0
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	f7ff bfd3 	b.w	8004088 <_raise_r>
 80040e2:	bf00      	nop
 80040e4:	20000000 	.word	0x20000000

080040e8 <_kill_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	2300      	movs	r3, #0
 80040ec:	4d06      	ldr	r5, [pc, #24]	; (8004108 <_kill_r+0x20>)
 80040ee:	4604      	mov	r4, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	602b      	str	r3, [r5, #0]
 80040f6:	f000 f8d7 	bl	80042a8 <_kill>
 80040fa:	1c43      	adds	r3, r0, #1
 80040fc:	d102      	bne.n	8004104 <_kill_r+0x1c>
 80040fe:	682b      	ldr	r3, [r5, #0]
 8004100:	b103      	cbz	r3, 8004104 <_kill_r+0x1c>
 8004102:	6023      	str	r3, [r4, #0]
 8004104:	bd38      	pop	{r3, r4, r5, pc}
 8004106:	bf00      	nop
 8004108:	200002e0 	.word	0x200002e0

0800410c <_getpid_r>:
 800410c:	f000 b8bc 	b.w	8004288 <_getpid>

08004110 <__sread>:
 8004110:	b510      	push	{r4, lr}
 8004112:	460c      	mov	r4, r1
 8004114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004118:	f000 f894 	bl	8004244 <_read_r>
 800411c:	2800      	cmp	r0, #0
 800411e:	bfab      	itete	ge
 8004120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004122:	89a3      	ldrhlt	r3, [r4, #12]
 8004124:	181b      	addge	r3, r3, r0
 8004126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800412a:	bfac      	ite	ge
 800412c:	6563      	strge	r3, [r4, #84]	; 0x54
 800412e:	81a3      	strhlt	r3, [r4, #12]
 8004130:	bd10      	pop	{r4, pc}

08004132 <__swrite>:
 8004132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004136:	461f      	mov	r7, r3
 8004138:	898b      	ldrh	r3, [r1, #12]
 800413a:	4605      	mov	r5, r0
 800413c:	05db      	lsls	r3, r3, #23
 800413e:	460c      	mov	r4, r1
 8004140:	4616      	mov	r6, r2
 8004142:	d505      	bpl.n	8004150 <__swrite+0x1e>
 8004144:	2302      	movs	r3, #2
 8004146:	2200      	movs	r2, #0
 8004148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800414c:	f000 f868 	bl	8004220 <_lseek_r>
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	4632      	mov	r2, r6
 8004154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	4628      	mov	r0, r5
 800415c:	463b      	mov	r3, r7
 800415e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004166:	f000 b817 	b.w	8004198 <_write_r>

0800416a <__sseek>:
 800416a:	b510      	push	{r4, lr}
 800416c:	460c      	mov	r4, r1
 800416e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004172:	f000 f855 	bl	8004220 <_lseek_r>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	bf15      	itete	ne
 800417c:	6560      	strne	r0, [r4, #84]	; 0x54
 800417e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004186:	81a3      	strheq	r3, [r4, #12]
 8004188:	bf18      	it	ne
 800418a:	81a3      	strhne	r3, [r4, #12]
 800418c:	bd10      	pop	{r4, pc}

0800418e <__sclose>:
 800418e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004192:	f000 b813 	b.w	80041bc <_close_r>
	...

08004198 <_write_r>:
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4604      	mov	r4, r0
 800419c:	4608      	mov	r0, r1
 800419e:	4611      	mov	r1, r2
 80041a0:	2200      	movs	r2, #0
 80041a2:	4d05      	ldr	r5, [pc, #20]	; (80041b8 <_write_r+0x20>)
 80041a4:	602a      	str	r2, [r5, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f000 f8a4 	bl	80042f4 <_write>
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	d102      	bne.n	80041b6 <_write_r+0x1e>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	b103      	cbz	r3, 80041b6 <_write_r+0x1e>
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	200002e0 	.word	0x200002e0

080041bc <_close_r>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	2300      	movs	r3, #0
 80041c0:	4d05      	ldr	r5, [pc, #20]	; (80041d8 <_close_r+0x1c>)
 80041c2:	4604      	mov	r4, r0
 80041c4:	4608      	mov	r0, r1
 80041c6:	602b      	str	r3, [r5, #0]
 80041c8:	f000 f84e 	bl	8004268 <_close>
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	d102      	bne.n	80041d6 <_close_r+0x1a>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	b103      	cbz	r3, 80041d6 <_close_r+0x1a>
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	200002e0 	.word	0x200002e0

080041dc <_fstat_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	2300      	movs	r3, #0
 80041e0:	4d06      	ldr	r5, [pc, #24]	; (80041fc <_fstat_r+0x20>)
 80041e2:	4604      	mov	r4, r0
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	602b      	str	r3, [r5, #0]
 80041ea:	f000 f845 	bl	8004278 <_fstat>
 80041ee:	1c43      	adds	r3, r0, #1
 80041f0:	d102      	bne.n	80041f8 <_fstat_r+0x1c>
 80041f2:	682b      	ldr	r3, [r5, #0]
 80041f4:	b103      	cbz	r3, 80041f8 <_fstat_r+0x1c>
 80041f6:	6023      	str	r3, [r4, #0]
 80041f8:	bd38      	pop	{r3, r4, r5, pc}
 80041fa:	bf00      	nop
 80041fc:	200002e0 	.word	0x200002e0

08004200 <_isatty_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	2300      	movs	r3, #0
 8004204:	4d05      	ldr	r5, [pc, #20]	; (800421c <_isatty_r+0x1c>)
 8004206:	4604      	mov	r4, r0
 8004208:	4608      	mov	r0, r1
 800420a:	602b      	str	r3, [r5, #0]
 800420c:	f000 f844 	bl	8004298 <_isatty>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d102      	bne.n	800421a <_isatty_r+0x1a>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	b103      	cbz	r3, 800421a <_isatty_r+0x1a>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	200002e0 	.word	0x200002e0

08004220 <_lseek_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4604      	mov	r4, r0
 8004224:	4608      	mov	r0, r1
 8004226:	4611      	mov	r1, r2
 8004228:	2200      	movs	r2, #0
 800422a:	4d05      	ldr	r5, [pc, #20]	; (8004240 <_lseek_r+0x20>)
 800422c:	602a      	str	r2, [r5, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	f000 f842 	bl	80042b8 <_lseek>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	d102      	bne.n	800423e <_lseek_r+0x1e>
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	b103      	cbz	r3, 800423e <_lseek_r+0x1e>
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	bd38      	pop	{r3, r4, r5, pc}
 8004240:	200002e0 	.word	0x200002e0

08004244 <_read_r>:
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	4604      	mov	r4, r0
 8004248:	4608      	mov	r0, r1
 800424a:	4611      	mov	r1, r2
 800424c:	2200      	movs	r2, #0
 800424e:	4d05      	ldr	r5, [pc, #20]	; (8004264 <_read_r+0x20>)
 8004250:	602a      	str	r2, [r5, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	f000 f838 	bl	80042c8 <_read>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_read_r+0x1e>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_read_r+0x1e>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	200002e0 	.word	0x200002e0

08004268 <_close>:
 8004268:	2258      	movs	r2, #88	; 0x58
 800426a:	4b02      	ldr	r3, [pc, #8]	; (8004274 <_close+0xc>)
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	4770      	bx	lr
 8004274:	200002e0 	.word	0x200002e0

08004278 <_fstat>:
 8004278:	2258      	movs	r2, #88	; 0x58
 800427a:	4b02      	ldr	r3, [pc, #8]	; (8004284 <_fstat+0xc>)
 800427c:	f04f 30ff 	mov.w	r0, #4294967295
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	4770      	bx	lr
 8004284:	200002e0 	.word	0x200002e0

08004288 <_getpid>:
 8004288:	2258      	movs	r2, #88	; 0x58
 800428a:	4b02      	ldr	r3, [pc, #8]	; (8004294 <_getpid+0xc>)
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	4770      	bx	lr
 8004294:	200002e0 	.word	0x200002e0

08004298 <_isatty>:
 8004298:	2258      	movs	r2, #88	; 0x58
 800429a:	4b02      	ldr	r3, [pc, #8]	; (80042a4 <_isatty+0xc>)
 800429c:	2000      	movs	r0, #0
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	200002e0 	.word	0x200002e0

080042a8 <_kill>:
 80042a8:	2258      	movs	r2, #88	; 0x58
 80042aa:	4b02      	ldr	r3, [pc, #8]	; (80042b4 <_kill+0xc>)
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	4770      	bx	lr
 80042b4:	200002e0 	.word	0x200002e0

080042b8 <_lseek>:
 80042b8:	2258      	movs	r2, #88	; 0x58
 80042ba:	4b02      	ldr	r3, [pc, #8]	; (80042c4 <_lseek+0xc>)
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	4770      	bx	lr
 80042c4:	200002e0 	.word	0x200002e0

080042c8 <_read>:
 80042c8:	2258      	movs	r2, #88	; 0x58
 80042ca:	4b02      	ldr	r3, [pc, #8]	; (80042d4 <_read+0xc>)
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	4770      	bx	lr
 80042d4:	200002e0 	.word	0x200002e0

080042d8 <_sbrk>:
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <_sbrk+0x14>)
 80042da:	4602      	mov	r2, r0
 80042dc:	6819      	ldr	r1, [r3, #0]
 80042de:	b909      	cbnz	r1, 80042e4 <_sbrk+0xc>
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <_sbrk+0x18>)
 80042e2:	6019      	str	r1, [r3, #0]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	4402      	add	r2, r0
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	4770      	bx	lr
 80042ec:	200002b0 	.word	0x200002b0
 80042f0:	200002f0 	.word	0x200002f0

080042f4 <_write>:
 80042f4:	2258      	movs	r2, #88	; 0x58
 80042f6:	4b02      	ldr	r3, [pc, #8]	; (8004300 <_write+0xc>)
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	4770      	bx	lr
 8004300:	200002e0 	.word	0x200002e0

08004304 <_exit>:
 8004304:	e7fe      	b.n	8004304 <_exit>
	...

08004308 <_init>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	bf00      	nop
 800430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430e:	bc08      	pop	{r3}
 8004310:	469e      	mov	lr, r3
 8004312:	4770      	bx	lr

08004314 <_fini>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	bf00      	nop
 8004318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431a:	bc08      	pop	{r3}
 800431c:	469e      	mov	lr, r3
 800431e:	4770      	bx	lr
