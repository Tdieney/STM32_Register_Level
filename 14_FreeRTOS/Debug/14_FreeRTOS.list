
14_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fcc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  080050e0  080050e0  000150e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005510  08005510  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08005510  08005510  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005510  08005510  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005514  08005514  00015514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe4  200001d4  080056ec  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011b8  080056ec  000211b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9d6  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd8  00000000  00000000  0002cbd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0002ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  0002f2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013fd4  00000000  00000000  0002f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096ad  00000000  00000000  000438ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006185d  00000000  00000000  0004cf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ae7b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b68  00000000  00000000  000ae80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  000b1374  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  000b1428  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080050c4 	.word	0x080050c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080050c4 	.word	0x080050c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <vApplicationGetIdleTaskMemory+0x28>)
 8000a98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	200001f0 	.word	0x200001f0
 8000ab4:	20000244 	.word	0x20000244

08000ab8 <main>:
// Thread2
osThreadId Thread2Handle;
void Thread2Handler(void const *argument);

int main()
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b08e      	sub	sp, #56	; 0x38
 8000abc:	af00      	add	r7, sp, #0
  // Configure 72MHz clock
  rcc_HSE_config();
 8000abe:	f001 fb2b 	bl	8002118 <rcc_HSE_config>
  rcc_SysTick_config();
 8000ac2:	f001 fbaf 	bl	8002224 <rcc_SysTick_config>
  tim_TIM2_initTicks();
 8000ac6:	f001 fc51 	bl	800236c <tim_TIM2_initTicks>
  // UART configuration
  uart_UART1_GPIO_config();
 8000aca:	f001 fcb3 	bl	8002434 <uart_UART1_GPIO_config>
  uart_UART1_config();
 8000ace:	f001 fce7 	bl	80024a0 <uart_UART1_config>
  // LED configuration
  gpio_LED_config();
 8000ad2:	f001 fa5d 	bl	8001f90 <gpio_LED_config>
  // Button configuration
  gpio_PB_config();
 8000ad6:	f001 fa8b 	bl	8001ff0 <gpio_PB_config>
  // Slide switch configuration
  gpio_SW_config();
 8000ada:	f001 fab1 	bl	8002040 <gpio_SW_config>

  // Thread1 initialization
  osThreadDef(Thread1, Thread1Handler, osPriorityNormal, 0, 128);
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <main+0x74>)
 8000ae0:	f107 041c 	add.w	r4, r7, #28
 8000ae4:	461d      	mov	r5, r3
 8000ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Thread1Handle = osThreadCreate(osThread(Thread1), NULL);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f89a 	bl	8000c32 <osThreadCreate>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <main+0x78>)
 8000b02:	6013      	str	r3, [r2, #0]
  // Thread2 initialization
  osThreadDef(Thread2, Thread2Handler, osPriorityNormal, 0, 128);
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <main+0x7c>)
 8000b06:	463c      	mov	r4, r7
 8000b08:	461d      	mov	r5, r3
 8000b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Thread2Handle = osThreadCreate(osThread(Thread2), NULL);
 8000b16:	463b      	mov	r3, r7
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f889 	bl	8000c32 <osThreadCreate>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <main+0x80>)
 8000b24:	6013      	str	r3, [r2, #0]

  // Start scheduler
  osKernelStart();
 8000b26:	f000 f87d 	bl	8000c24 <osKernelStart>

  while(1)
 8000b2a:	e7fe      	b.n	8000b2a <main+0x72>
 8000b2c:	080050f0 	.word	0x080050f0
 8000b30:	200011a0 	.word	0x200011a0
 8000b34:	0800510c 	.word	0x0800510c
 8000b38:	200011a4 	.word	0x200011a4

08000b3c <Thread1Handler>:
  }
}

// Thread1
void Thread1Handler(void const *argument)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  while(1)
  {
    LED_PB0 =! LED_PB0;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <Thread1Handler+0x24>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf0c      	ite	eq
 8000b4c:	2301      	moveq	r3, #1
 8000b4e:	2300      	movne	r3, #0
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <Thread1Handler+0x24>)
 8000b54:	601a      	str	r2, [r3, #0]
    osDelay(2000);
 8000b56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b5a:	f000 f8b6 	bl	8000cca <osDelay>
    LED_PB0 =! LED_PB0;
 8000b5e:	e7f1      	b.n	8000b44 <Thread1Handler+0x8>
 8000b60:	42218180 	.word	0x42218180

08000b64 <Thread2Handler>:
  }
}

// Thread2
void Thread2Handler(void const *argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  while(1)
  {
    LED_PB1 =! LED_PB1;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <Thread2Handler+0x24>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf0c      	ite	eq
 8000b74:	2301      	moveq	r3, #1
 8000b76:	2300      	movne	r3, #0
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <Thread2Handler+0x24>)
 8000b7c:	601a      	str	r2, [r3, #0]
    osDelay(4000);
 8000b7e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b82:	f000 f8a2 	bl	8000cca <osDelay>
    LED_PB1 =! LED_PB1;
 8000b86:	e7f1      	b.n	8000b6c <Thread2Handler+0x8>
 8000b88:	42218184 	.word	0x42218184

08000b8c <__io_putchar>:

int __io_putchar(int ch);
int _write(int file, char *ptr, int len);

int __io_putchar(int ch)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint8_t c[1];
  c[0] = ch & 0x00FF;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	733b      	strb	r3, [r7, #12]
  uart_UART1_transmit(&c[0], 1, 100);
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2264      	movs	r2, #100	; 0x64
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fcd8 	bl	8002558 <uart_UART1_transmit>
  return ch;
 8000ba8:	687b      	ldr	r3, [r7, #4]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_write>:

int _write(int file, char *ptr, int len)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
  for(int DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	e009      	b.n	8000bd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	60ba      	str	r2, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ffdd 	bl	8000b8c <__io_putchar>
  for(int DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf1      	blt.n	8000bc4 <_write+0x12>
  }
  return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr

08000bf6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b085      	sub	sp, #20
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8000c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c08:	2b84      	cmp	r3, #132	; 0x84
 8000c0a:	d005      	beq.n	8000c18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8000c0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	3303      	adds	r3, #3
 8000c16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8000c28:	f000 fad0 	bl	80011cc <vTaskStartScheduler>
  
  return osOK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c34:	b089      	sub	sp, #36	; 0x24
 8000c36:	af04      	add	r7, sp, #16
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d020      	beq.n	8000c86 <osThreadCreate+0x54>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d01c      	beq.n	8000c86 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685c      	ldr	r4, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681d      	ldr	r5, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	691e      	ldr	r6, [r3, #16]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffc9 	bl	8000bf6 <makeFreeRtosPriority>
 8000c64:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000c6e:	9202      	str	r2, [sp, #8]
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	9100      	str	r1, [sp, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	4632      	mov	r2, r6
 8000c78:	4629      	mov	r1, r5
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f000 f8e8 	bl	8000e50 <xTaskCreateStatic>
 8000c80:	4603      	mov	r3, r0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	e01c      	b.n	8000cc0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685c      	ldr	r4, [r3, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000c92:	b29e      	uxth	r6, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffab 	bl	8000bf6 <makeFreeRtosPriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	9200      	str	r2, [sp, #0]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	4632      	mov	r2, r6
 8000cae:	4629      	mov	r1, r5
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f000 f929 	bl	8000f08 <xTaskCreate>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d001      	beq.n	8000cc0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e000      	b.n	8000cc2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <osDelay+0x16>
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	e000      	b.n	8000ce2 <osDelay+0x18>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fa3e 	bl	8001164 <vTaskDelay>
  
  return osOK;
 8000ce8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f103 0208 	add.w	r2, r3, #8
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f103 0208 	add.w	r2, r3, #8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f103 0208 	add.w	r2, r3, #8
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr

08000d8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d103      	bne.n	8000dae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	e00c      	b.n	8000dc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3308      	adds	r3, #8
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	e002      	b.n	8000dbc <vListInsert+0x2e>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d2f6      	bcs.n	8000db6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b085      	sub	sp, #20
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6892      	ldr	r2, [r2, #8]
 8000e14:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	6852      	ldr	r2, [r2, #4]
 8000e1e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d103      	bne.n	8000e32 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	1e5a      	subs	r2, r3, #1
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	; 0x38
 8000e54:	af04      	add	r7, sp, #16
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8000e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10a      	bne.n	8000e7a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e68:	f383 8811 	msr	BASEPRI, r3
 8000e6c:	f3bf 8f6f 	isb	sy
 8000e70:	f3bf 8f4f 	dsb	sy
 8000e74:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000e76:	bf00      	nop
 8000e78:	e7fe      	b.n	8000e78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8000e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10a      	bne.n	8000e96 <xTaskCreateStatic+0x46>
	__asm volatile
 8000e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e84:	f383 8811 	msr	BASEPRI, r3
 8000e88:	f3bf 8f6f 	isb	sy
 8000e8c:	f3bf 8f4f 	dsb	sy
 8000e90:	61fb      	str	r3, [r7, #28]
}
 8000e92:	bf00      	nop
 8000e94:	e7fe      	b.n	8000e94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8000e96:	2354      	movs	r3, #84	; 0x54
 8000e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	2b54      	cmp	r3, #84	; 0x54
 8000e9e:	d00a      	beq.n	8000eb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8000ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea4:	f383 8811 	msr	BASEPRI, r3
 8000ea8:	f3bf 8f6f 	isb	sy
 8000eac:	f3bf 8f4f 	dsb	sy
 8000eb0:	61bb      	str	r3, [r7, #24]
}
 8000eb2:	bf00      	nop
 8000eb4:	e7fe      	b.n	8000eb4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8000eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d01e      	beq.n	8000efa <xTaskCreateStatic+0xaa>
 8000ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d01b      	beq.n	8000efa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	2202      	movs	r2, #2
 8000ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	9303      	str	r3, [sp, #12]
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f850 	bl	8000f92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000ef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ef4:	f000 f8cc 	bl	8001090 <prvAddNewTaskToReadyList>
 8000ef8:	e001      	b.n	8000efe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8000efe:	697b      	ldr	r3, [r7, #20]
	}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af04      	add	r7, sp, #16
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fe5f 	bl	8001be0 <pvPortMalloc>
 8000f22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00e      	beq.n	8000f48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8000f2a:	2054      	movs	r0, #84	; 0x54
 8000f2c:	f000 fe58 	bl	8001be0 <pvPortMalloc>
 8000f30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f3e:	e005      	b.n	8000f4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000f40:	6978      	ldr	r0, [r7, #20]
 8000f42:	f000 ff11 	bl	8001d68 <vPortFree>
 8000f46:	e001      	b.n	8000f4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d017      	beq.n	8000f82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000f5a:	88fa      	ldrh	r2, [r7, #6]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9303      	str	r3, [sp, #12]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68b9      	ldr	r1, [r7, #8]
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f000 f80e 	bl	8000f92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000f76:	69f8      	ldr	r0, [r7, #28]
 8000f78:	f000 f88a 	bl	8001090 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	e002      	b.n	8000f88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000f88:	69bb      	ldr	r3, [r7, #24]
	}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3720      	adds	r7, #32
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b088      	sub	sp, #32
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8000fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000faa:	3b01      	subs	r3, #1
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	f023 0307 	bic.w	r3, r3, #7
 8000fb8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00a      	beq.n	8000fda <prvInitialiseNewTask+0x48>
	__asm volatile
 8000fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fc8:	f383 8811 	msr	BASEPRI, r3
 8000fcc:	f3bf 8f6f 	isb	sy
 8000fd0:	f3bf 8f4f 	dsb	sy
 8000fd4:	617b      	str	r3, [r7, #20]
}
 8000fd6:	bf00      	nop
 8000fd8:	e7fe      	b.n	8000fd8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e012      	b.n	8001006 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	7819      	ldrb	r1, [r3, #0]
 8000fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	4413      	add	r3, r2
 8000fee:	3334      	adds	r3, #52	; 0x34
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	3301      	adds	r3, #1
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d9e9      	bls.n	8000fe0 <prvInitialiseNewTask+0x4e>
 800100c:	e000      	b.n	8001010 <prvInitialiseNewTask+0x7e>
		{
			break;
 800100e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101a:	2b06      	cmp	r3, #6
 800101c:	d901      	bls.n	8001022 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800101e:	2306      	movs	r3, #6
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800102a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800102c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800102e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001030:	2200      	movs	r2, #0
 8001032:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001036:	3304      	adds	r3, #4
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fe79 	bl	8000d30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800103e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001040:	3318      	adds	r3, #24
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fe74 	bl	8000d30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800104a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800104c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800104e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001050:	f1c3 0207 	rsb	r2, r3, #7
 8001054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001056:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800105a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800105e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001060:	2200      	movs	r2, #0
 8001062:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	68f9      	ldr	r1, [r7, #12]
 8001070:	69b8      	ldr	r0, [r7, #24]
 8001072:	f000 fc0d 	bl	8001890 <pxPortInitialiseStack>
 8001076:	4602      	mov	r2, r0
 8001078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001086:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001098:	f000 fce8 	bl	8001a6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800109c:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <prvAddNewTaskToReadyList+0xb8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	4a29      	ldr	r2, [pc, #164]	; (8001148 <prvAddNewTaskToReadyList+0xb8>)
 80010a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <prvAddNewTaskToReadyList+0xbc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d109      	bne.n	80010c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80010ae:	4a27      	ldr	r2, [pc, #156]	; (800114c <prvAddNewTaskToReadyList+0xbc>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <prvAddNewTaskToReadyList+0xb8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d110      	bne.n	80010de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80010bc:	f000 fac0 	bl	8001640 <prvInitialiseTaskLists>
 80010c0:	e00d      	b.n	80010de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <prvAddNewTaskToReadyList+0xc0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d109      	bne.n	80010de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <prvAddNewTaskToReadyList+0xbc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d802      	bhi.n	80010de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80010d8:	4a1c      	ldr	r2, [pc, #112]	; (800114c <prvAddNewTaskToReadyList+0xbc>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <prvAddNewTaskToReadyList+0xc4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <prvAddNewTaskToReadyList+0xc4>)
 80010e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	2201      	movs	r2, #1
 80010ee:	409a      	lsls	r2, r3
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <prvAddNewTaskToReadyList+0xc8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <prvAddNewTaskToReadyList+0xc8>)
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <prvAddNewTaskToReadyList+0xcc>)
 8001108:	441a      	add	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3304      	adds	r3, #4
 800110e:	4619      	mov	r1, r3
 8001110:	4610      	mov	r0, r2
 8001112:	f7ff fe19 	bl	8000d48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001116:	f000 fcd9 	bl	8001acc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <prvAddNewTaskToReadyList+0xc0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00e      	beq.n	8001140 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <prvAddNewTaskToReadyList+0xbc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	429a      	cmp	r2, r3
 800112e:	d207      	bcs.n	8001140 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <prvAddNewTaskToReadyList+0xd0>)
 8001132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	f3bf 8f4f 	dsb	sy
 800113c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000544 	.word	0x20000544
 800114c:	20000444 	.word	0x20000444
 8001150:	20000550 	.word	0x20000550
 8001154:	20000560 	.word	0x20000560
 8001158:	2000054c 	.word	0x2000054c
 800115c:	20000448 	.word	0x20000448
 8001160:	e000ed04 	.word	0xe000ed04

08001164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d017      	beq.n	80011a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <vTaskDelay+0x60>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00a      	beq.n	8001194 <vTaskDelay+0x30>
	__asm volatile
 800117e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001182:	f383 8811 	msr	BASEPRI, r3
 8001186:	f3bf 8f6f 	isb	sy
 800118a:	f3bf 8f4f 	dsb	sy
 800118e:	60bb      	str	r3, [r7, #8]
}
 8001190:	bf00      	nop
 8001192:	e7fe      	b.n	8001192 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001194:	f000 f87a 	bl	800128c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001198:	2100      	movs	r1, #0
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 fb12 	bl	80017c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80011a0:	f000 f882 	bl	80012a8 <xTaskResumeAll>
 80011a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <vTaskDelay+0x64>)
 80011ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	f3bf 8f4f 	dsb	sy
 80011b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000056c 	.word	0x2000056c
 80011c8:	e000ed04 	.word	0xe000ed04

080011cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80011da:	463a      	mov	r2, r7
 80011dc:	1d39      	adds	r1, r7, #4
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fc50 	bl	8000a88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80011e8:	6839      	ldr	r1, [r7, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	9202      	str	r2, [sp, #8]
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	2300      	movs	r3, #0
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2300      	movs	r3, #0
 80011f8:	460a      	mov	r2, r1
 80011fa:	491e      	ldr	r1, [pc, #120]	; (8001274 <vTaskStartScheduler+0xa8>)
 80011fc:	481e      	ldr	r0, [pc, #120]	; (8001278 <vTaskStartScheduler+0xac>)
 80011fe:	f7ff fe27 	bl	8000e50 <xTaskCreateStatic>
 8001202:	4603      	mov	r3, r0
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <vTaskStartScheduler+0xb0>)
 8001206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001208:	4b1c      	ldr	r3, [pc, #112]	; (800127c <vTaskStartScheduler+0xb0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001210:	2301      	movs	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	e001      	b.n	800121a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d116      	bne.n	800124e <vTaskStartScheduler+0x82>
	__asm volatile
 8001220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001224:	f383 8811 	msr	BASEPRI, r3
 8001228:	f3bf 8f6f 	isb	sy
 800122c:	f3bf 8f4f 	dsb	sy
 8001230:	613b      	str	r3, [r7, #16]
}
 8001232:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <vTaskStartScheduler+0xb4>)
 8001236:	f04f 32ff 	mov.w	r2, #4294967295
 800123a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <vTaskStartScheduler+0xb8>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <vTaskStartScheduler+0xbc>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001248:	f000 fb9e 	bl	8001988 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800124c:	e00e      	b.n	800126c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d10a      	bne.n	800126c <vTaskStartScheduler+0xa0>
	__asm volatile
 8001256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800125a:	f383 8811 	msr	BASEPRI, r3
 800125e:	f3bf 8f6f 	isb	sy
 8001262:	f3bf 8f4f 	dsb	sy
 8001266:	60fb      	str	r3, [r7, #12]
}
 8001268:	bf00      	nop
 800126a:	e7fe      	b.n	800126a <vTaskStartScheduler+0x9e>
}
 800126c:	bf00      	nop
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	08005128 	.word	0x08005128
 8001278:	08001611 	.word	0x08001611
 800127c:	20000568 	.word	0x20000568
 8001280:	20000564 	.word	0x20000564
 8001284:	20000550 	.word	0x20000550
 8001288:	20000548 	.word	0x20000548

0800128c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <vTaskSuspendAll+0x18>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <vTaskSuspendAll+0x18>)
 8001298:	6013      	str	r3, [r2, #0]
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000056c 	.word	0x2000056c

080012a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80012b6:	4b41      	ldr	r3, [pc, #260]	; (80013bc <xTaskResumeAll+0x114>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10a      	bne.n	80012d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80012be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c2:	f383 8811 	msr	BASEPRI, r3
 80012c6:	f3bf 8f6f 	isb	sy
 80012ca:	f3bf 8f4f 	dsb	sy
 80012ce:	603b      	str	r3, [r7, #0]
}
 80012d0:	bf00      	nop
 80012d2:	e7fe      	b.n	80012d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80012d4:	f000 fbca 	bl	8001a6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80012d8:	4b38      	ldr	r3, [pc, #224]	; (80013bc <xTaskResumeAll+0x114>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3b01      	subs	r3, #1
 80012de:	4a37      	ldr	r2, [pc, #220]	; (80013bc <xTaskResumeAll+0x114>)
 80012e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012e2:	4b36      	ldr	r3, [pc, #216]	; (80013bc <xTaskResumeAll+0x114>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d161      	bne.n	80013ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <xTaskResumeAll+0x118>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d05d      	beq.n	80013ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80012f2:	e02e      	b.n	8001352 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80012f4:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <xTaskResumeAll+0x11c>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3318      	adds	r3, #24
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fd7c 	bl	8000dfe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3304      	adds	r3, #4
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fd77 	bl	8000dfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	2201      	movs	r2, #1
 8001316:	409a      	lsls	r2, r3
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <xTaskResumeAll+0x120>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4313      	orrs	r3, r2
 800131e:	4a2a      	ldr	r2, [pc, #168]	; (80013c8 <xTaskResumeAll+0x120>)
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4a27      	ldr	r2, [pc, #156]	; (80013cc <xTaskResumeAll+0x124>)
 8001330:	441a      	add	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3304      	adds	r3, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4610      	mov	r0, r2
 800133a:	f7ff fd05 	bl	8000d48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <xTaskResumeAll+0x128>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	429a      	cmp	r2, r3
 800134a:	d302      	bcc.n	8001352 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <xTaskResumeAll+0x12c>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <xTaskResumeAll+0x11c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1cc      	bne.n	80012f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001360:	f000 fa0c 	bl	800177c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <xTaskResumeAll+0x130>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d010      	beq.n	8001392 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001370:	f000 f836 	bl	80013e0 <xTaskIncrementTick>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <xTaskResumeAll+0x12c>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f1      	bne.n	8001370 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <xTaskResumeAll+0x130>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <xTaskResumeAll+0x12c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d009      	beq.n	80013ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800139a:	2301      	movs	r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <xTaskResumeAll+0x134>)
 80013a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	f3bf 8f4f 	dsb	sy
 80013aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80013ae:	f000 fb8d 	bl	8001acc <vPortExitCritical>

	return xAlreadyYielded;
 80013b2:	68bb      	ldr	r3, [r7, #8]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000056c 	.word	0x2000056c
 80013c0:	20000544 	.word	0x20000544
 80013c4:	20000504 	.word	0x20000504
 80013c8:	2000054c 	.word	0x2000054c
 80013cc:	20000448 	.word	0x20000448
 80013d0:	20000444 	.word	0x20000444
 80013d4:	20000558 	.word	0x20000558
 80013d8:	20000554 	.word	0x20000554
 80013dc:	e000ed04 	.word	0xe000ed04

080013e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013ea:	4b51      	ldr	r3, [pc, #324]	; (8001530 <xTaskIncrementTick+0x150>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 808d 	bne.w	800150e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80013f4:	4b4f      	ldr	r3, [pc, #316]	; (8001534 <xTaskIncrementTick+0x154>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80013fc:	4a4d      	ldr	r2, [pc, #308]	; (8001534 <xTaskIncrementTick+0x154>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d120      	bne.n	800144a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001408:	4b4b      	ldr	r3, [pc, #300]	; (8001538 <xTaskIncrementTick+0x158>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00a      	beq.n	8001428 <xTaskIncrementTick+0x48>
	__asm volatile
 8001412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001416:	f383 8811 	msr	BASEPRI, r3
 800141a:	f3bf 8f6f 	isb	sy
 800141e:	f3bf 8f4f 	dsb	sy
 8001422:	603b      	str	r3, [r7, #0]
}
 8001424:	bf00      	nop
 8001426:	e7fe      	b.n	8001426 <xTaskIncrementTick+0x46>
 8001428:	4b43      	ldr	r3, [pc, #268]	; (8001538 <xTaskIncrementTick+0x158>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <xTaskIncrementTick+0x15c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a41      	ldr	r2, [pc, #260]	; (8001538 <xTaskIncrementTick+0x158>)
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4a41      	ldr	r2, [pc, #260]	; (800153c <xTaskIncrementTick+0x15c>)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b40      	ldr	r3, [pc, #256]	; (8001540 <xTaskIncrementTick+0x160>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	4a3f      	ldr	r2, [pc, #252]	; (8001540 <xTaskIncrementTick+0x160>)
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	f000 f999 	bl	800177c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <xTaskIncrementTick+0x164>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d34d      	bcc.n	80014f0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001454:	4b38      	ldr	r3, [pc, #224]	; (8001538 <xTaskIncrementTick+0x158>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <xTaskIncrementTick+0x82>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <xTaskIncrementTick+0x84>
 8001462:	2300      	movs	r3, #0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001468:	4b36      	ldr	r3, [pc, #216]	; (8001544 <xTaskIncrementTick+0x164>)
 800146a:	f04f 32ff 	mov.w	r2, #4294967295
 800146e:	601a      	str	r2, [r3, #0]
					break;
 8001470:	e03e      	b.n	80014f0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001472:	4b31      	ldr	r3, [pc, #196]	; (8001538 <xTaskIncrementTick+0x158>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d203      	bcs.n	8001492 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800148a:	4a2e      	ldr	r2, [pc, #184]	; (8001544 <xTaskIncrementTick+0x164>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6013      	str	r3, [r2, #0]
						break;
 8001490:	e02e      	b.n	80014f0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3304      	adds	r3, #4
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fcb1 	bl	8000dfe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	3318      	adds	r3, #24
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fca8 	bl	8000dfe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	2201      	movs	r2, #1
 80014b4:	409a      	lsls	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <xTaskIncrementTick+0x168>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	4a22      	ldr	r2, [pc, #136]	; (8001548 <xTaskIncrementTick+0x168>)
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4a1f      	ldr	r2, [pc, #124]	; (800154c <xTaskIncrementTick+0x16c>)
 80014ce:	441a      	add	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	3304      	adds	r3, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4610      	mov	r0, r2
 80014d8:	f7ff fc36 	bl	8000d48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <xTaskIncrementTick+0x170>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3b4      	bcc.n	8001454 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80014ea:	2301      	movs	r3, #1
 80014ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014ee:	e7b1      	b.n	8001454 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <xTaskIncrementTick+0x170>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f6:	4915      	ldr	r1, [pc, #84]	; (800154c <xTaskIncrementTick+0x16c>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d907      	bls.n	8001518 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001508:	2301      	movs	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	e004      	b.n	8001518 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <xTaskIncrementTick+0x174>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <xTaskIncrementTick+0x174>)
 8001516:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <xTaskIncrementTick+0x178>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8001520:	2301      	movs	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001524:	697b      	ldr	r3, [r7, #20]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000056c 	.word	0x2000056c
 8001534:	20000548 	.word	0x20000548
 8001538:	200004fc 	.word	0x200004fc
 800153c:	20000500 	.word	0x20000500
 8001540:	2000055c 	.word	0x2000055c
 8001544:	20000564 	.word	0x20000564
 8001548:	2000054c 	.word	0x2000054c
 800154c:	20000448 	.word	0x20000448
 8001550:	20000444 	.word	0x20000444
 8001554:	20000554 	.word	0x20000554
 8001558:	20000558 	.word	0x20000558

0800155c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800155c:	b480      	push	{r7}
 800155e:	b087      	sub	sp, #28
 8001560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <vTaskSwitchContext+0xa0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <vTaskSwitchContext+0xa4>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001570:	e03f      	b.n	80015f2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <vTaskSwitchContext+0xa4>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <vTaskSwitchContext+0xa8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001586:	7afb      	ldrb	r3, [r7, #11]
 8001588:	f1c3 031f 	rsb	r3, r3, #31
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	491e      	ldr	r1, [pc, #120]	; (8001608 <vTaskSwitchContext+0xac>)
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10a      	bne.n	80015b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80015a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a6:	f383 8811 	msr	BASEPRI, r3
 80015aa:	f3bf 8f6f 	isb	sy
 80015ae:	f3bf 8f4f 	dsb	sy
 80015b2:	607b      	str	r3, [r7, #4]
}
 80015b4:	bf00      	nop
 80015b6:	e7fe      	b.n	80015b6 <vTaskSwitchContext+0x5a>
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4a11      	ldr	r2, [pc, #68]	; (8001608 <vTaskSwitchContext+0xac>)
 80015c4:	4413      	add	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	3308      	adds	r3, #8
 80015da:	429a      	cmp	r2, r3
 80015dc:	d104      	bne.n	80015e8 <vTaskSwitchContext+0x8c>
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	4a07      	ldr	r2, [pc, #28]	; (800160c <vTaskSwitchContext+0xb0>)
 80015f0:	6013      	str	r3, [r2, #0]
}
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	2000056c 	.word	0x2000056c
 8001600:	20000558 	.word	0x20000558
 8001604:	2000054c 	.word	0x2000054c
 8001608:	20000448 	.word	0x20000448
 800160c:	20000444 	.word	0x20000444

08001610 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001618:	f000 f852 	bl	80016c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <prvIdleTask+0x28>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d9f9      	bls.n	8001618 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <prvIdleTask+0x2c>)
 8001626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	f3bf 8f4f 	dsb	sy
 8001630:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001634:	e7f0      	b.n	8001618 <prvIdleTask+0x8>
 8001636:	bf00      	nop
 8001638:	20000448 	.word	0x20000448
 800163c:	e000ed04 	.word	0xe000ed04

08001640 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	e00c      	b.n	8001666 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <prvInitialiseTaskLists+0x60>)
 8001658:	4413      	add	r3, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fb49 	bl	8000cf2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3301      	adds	r3, #1
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b06      	cmp	r3, #6
 800166a:	d9ef      	bls.n	800164c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <prvInitialiseTaskLists+0x64>)
 800166e:	f7ff fb40 	bl	8000cf2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <prvInitialiseTaskLists+0x68>)
 8001674:	f7ff fb3d 	bl	8000cf2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <prvInitialiseTaskLists+0x6c>)
 800167a:	f7ff fb3a 	bl	8000cf2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800167e:	480c      	ldr	r0, [pc, #48]	; (80016b0 <prvInitialiseTaskLists+0x70>)
 8001680:	f7ff fb37 	bl	8000cf2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <prvInitialiseTaskLists+0x74>)
 8001686:	f7ff fb34 	bl	8000cf2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <prvInitialiseTaskLists+0x78>)
 800168c:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <prvInitialiseTaskLists+0x64>)
 800168e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <prvInitialiseTaskLists+0x7c>)
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <prvInitialiseTaskLists+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000448 	.word	0x20000448
 80016a4:	200004d4 	.word	0x200004d4
 80016a8:	200004e8 	.word	0x200004e8
 80016ac:	20000504 	.word	0x20000504
 80016b0:	20000518 	.word	0x20000518
 80016b4:	20000530 	.word	0x20000530
 80016b8:	200004fc 	.word	0x200004fc
 80016bc:	20000500 	.word	0x20000500

080016c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016c6:	e019      	b.n	80016fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80016c8:	f000 f9d0 	bl	8001a6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <prvCheckTasksWaitingTermination+0x50>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3304      	adds	r3, #4
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fb90 	bl	8000dfe <uxListRemove>
				--uxCurrentNumberOfTasks;
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <prvCheckTasksWaitingTermination+0x54>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <prvCheckTasksWaitingTermination+0x54>)
 80016e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <prvCheckTasksWaitingTermination+0x58>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <prvCheckTasksWaitingTermination+0x58>)
 80016f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80016f2:	f000 f9eb 	bl	8001acc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f810 	bl	800171c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <prvCheckTasksWaitingTermination+0x58>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1e1      	bne.n	80016c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000518 	.word	0x20000518
 8001714:	20000544 	.word	0x20000544
 8001718:	2000052c 	.word	0x2000052c

0800171c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800172a:	2b00      	cmp	r3, #0
 800172c:	d108      	bne.n	8001740 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4618      	mov	r0, r3
 8001734:	f000 fb18 	bl	8001d68 <vPortFree>
				vPortFree( pxTCB );
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fb15 	bl	8001d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800173e:	e018      	b.n	8001772 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001746:	2b01      	cmp	r3, #1
 8001748:	d103      	bne.n	8001752 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fb0c 	bl	8001d68 <vPortFree>
	}
 8001750:	e00f      	b.n	8001772 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001758:	2b02      	cmp	r3, #2
 800175a:	d00a      	beq.n	8001772 <prvDeleteTCB+0x56>
	__asm volatile
 800175c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001760:	f383 8811 	msr	BASEPRI, r3
 8001764:	f3bf 8f6f 	isb	sy
 8001768:	f3bf 8f4f 	dsb	sy
 800176c:	60fb      	str	r3, [r7, #12]
}
 800176e:	bf00      	nop
 8001770:	e7fe      	b.n	8001770 <prvDeleteTCB+0x54>
	}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <prvResetNextTaskUnblockTime+0x40>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <prvResetNextTaskUnblockTime+0x14>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <prvResetNextTaskUnblockTime+0x16>
 8001790:	2300      	movs	r3, #0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <prvResetNextTaskUnblockTime+0x44>)
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800179e:	e008      	b.n	80017b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <prvResetNextTaskUnblockTime+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <prvResetNextTaskUnblockTime+0x44>)
 80017b0:	6013      	str	r3, [r2, #0]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	200004fc 	.word	0x200004fc
 80017c0:	20000564 	.word	0x20000564

080017c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80017ce:	4b29      	ldr	r3, [pc, #164]	; (8001874 <prvAddCurrentTaskToDelayedList+0xb0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <prvAddCurrentTaskToDelayedList+0xb4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3304      	adds	r3, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fb0f 	bl	8000dfe <uxListRemove>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10b      	bne.n	80017fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <prvAddCurrentTaskToDelayedList+0xb4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	2201      	movs	r2, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <prvAddCurrentTaskToDelayedList+0xb8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4013      	ands	r3, r2
 80017fa:	4a20      	ldr	r2, [pc, #128]	; (800187c <prvAddCurrentTaskToDelayedList+0xb8>)
 80017fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d10a      	bne.n	800181c <prvAddCurrentTaskToDelayedList+0x58>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3304      	adds	r3, #4
 8001812:	4619      	mov	r1, r3
 8001814:	481a      	ldr	r0, [pc, #104]	; (8001880 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001816:	f7ff fa97 	bl	8000d48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800181a:	e026      	b.n	800186a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	d209      	bcs.n	8001848 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3304      	adds	r3, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4610      	mov	r0, r2
 8001842:	f7ff faa4 	bl	8000d8e <vListInsert>
}
 8001846:	e010      	b.n	800186a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <prvAddCurrentTaskToDelayedList+0xc4>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3304      	adds	r3, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4610      	mov	r0, r2
 8001856:	f7ff fa9a 	bl	8000d8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <prvAddCurrentTaskToDelayedList+0xc8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	429a      	cmp	r2, r3
 8001862:	d202      	bcs.n	800186a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001864:	4a09      	ldr	r2, [pc, #36]	; (800188c <prvAddCurrentTaskToDelayedList+0xc8>)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000548 	.word	0x20000548
 8001878:	20000444 	.word	0x20000444
 800187c:	2000054c 	.word	0x2000054c
 8001880:	20000530 	.word	0x20000530
 8001884:	20000500 	.word	0x20000500
 8001888:	200004fc 	.word	0x200004fc
 800188c:	20000564 	.word	0x20000564

08001890 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3b04      	subs	r3, #4
 80018a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3b04      	subs	r3, #4
 80018ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f023 0201 	bic.w	r2, r3, #1
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3b04      	subs	r3, #4
 80018be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80018c0:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <pxPortInitialiseStack+0x54>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3b14      	subs	r3, #20
 80018ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3b20      	subs	r3, #32
 80018d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80018d8:	68fb      	ldr	r3, [r7, #12]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	080018e9 	.word	0x080018e9

080018e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <prvTaskExitError+0x54>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fa:	d00a      	beq.n	8001912 <prvTaskExitError+0x2a>
	__asm volatile
 80018fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001900:	f383 8811 	msr	BASEPRI, r3
 8001904:	f3bf 8f6f 	isb	sy
 8001908:	f3bf 8f4f 	dsb	sy
 800190c:	60fb      	str	r3, [r7, #12]
}
 800190e:	bf00      	nop
 8001910:	e7fe      	b.n	8001910 <prvTaskExitError+0x28>
	__asm volatile
 8001912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001916:	f383 8811 	msr	BASEPRI, r3
 800191a:	f3bf 8f6f 	isb	sy
 800191e:	f3bf 8f4f 	dsb	sy
 8001922:	60bb      	str	r3, [r7, #8]
}
 8001924:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001926:	bf00      	nop
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0fc      	beq.n	8001928 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000000 	.word	0x20000000

08001940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <pxCurrentTCBConst2>)
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	6808      	ldr	r0, [r1, #0]
 8001946:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800194a:	f380 8809 	msr	PSP, r0
 800194e:	f3bf 8f6f 	isb	sy
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f380 8811 	msr	BASEPRI, r0
 800195a:	f04e 0e0d 	orr.w	lr, lr, #13
 800195e:	4770      	bx	lr

08001960 <pxCurrentTCBConst2>:
 8001960:	20000444 	.word	0x20000444
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop

08001968 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001968:	4806      	ldr	r0, [pc, #24]	; (8001984 <prvPortStartFirstTask+0x1c>)
 800196a:	6800      	ldr	r0, [r0, #0]
 800196c:	6800      	ldr	r0, [r0, #0]
 800196e:	f380 8808 	msr	MSP, r0
 8001972:	b662      	cpsie	i
 8001974:	b661      	cpsie	f
 8001976:	f3bf 8f4f 	dsb	sy
 800197a:	f3bf 8f6f 	isb	sy
 800197e:	df00      	svc	0
 8001980:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001982:	bf00      	nop
 8001984:	e000ed08 	.word	0xe000ed08

08001988 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800198e:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <xPortStartScheduler+0xd0>)
 8001990:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	22ff      	movs	r2, #255	; 0xff
 800199e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <xPortStartScheduler+0xd4>)
 80019b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <xPortStartScheduler+0xd8>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80019bc:	e009      	b.n	80019d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <xPortStartScheduler+0xd8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	4a26      	ldr	r2, [pc, #152]	; (8001a60 <xPortStartScheduler+0xd8>)
 80019c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019da:	2b80      	cmp	r3, #128	; 0x80
 80019dc:	d0ef      	beq.n	80019be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <xPortStartScheduler+0xd8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d00a      	beq.n	8001a00 <xPortStartScheduler+0x78>
	__asm volatile
 80019ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ee:	f383 8811 	msr	BASEPRI, r3
 80019f2:	f3bf 8f6f 	isb	sy
 80019f6:	f3bf 8f4f 	dsb	sy
 80019fa:	60bb      	str	r3, [r7, #8]
}
 80019fc:	bf00      	nop
 80019fe:	e7fe      	b.n	80019fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <xPortStartScheduler+0xd8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	4a16      	ldr	r2, [pc, #88]	; (8001a60 <xPortStartScheduler+0xd8>)
 8001a08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <xPortStartScheduler+0xd8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a12:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <xPortStartScheduler+0xd8>)
 8001a14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <xPortStartScheduler+0xdc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <xPortStartScheduler+0xdc>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <xPortStartScheduler+0xdc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <xPortStartScheduler+0xdc>)
 8001a30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001a34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001a36:	f000 f8b9 	bl	8001bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <xPortStartScheduler+0xe0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001a40:	f7ff ff92 	bl	8001968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001a44:	f7ff fd8a 	bl	800155c <vTaskSwitchContext>
	prvTaskExitError();
 8001a48:	f7ff ff4e 	bl	80018e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e400 	.word	0xe000e400
 8001a5c:	20000570 	.word	0x20000570
 8001a60:	20000574 	.word	0x20000574
 8001a64:	e000ed20 	.word	0xe000ed20
 8001a68:	20000000 	.word	0x20000000

08001a6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
	__asm volatile
 8001a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a76:	f383 8811 	msr	BASEPRI, r3
 8001a7a:	f3bf 8f6f 	isb	sy
 8001a7e:	f3bf 8f4f 	dsb	sy
 8001a82:	607b      	str	r3, [r7, #4]
}
 8001a84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <vPortEnterCritical+0x58>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <vPortEnterCritical+0x58>)
 8001a8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <vPortEnterCritical+0x58>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10f      	bne.n	8001ab8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <vPortEnterCritical+0x5c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00a      	beq.n	8001ab8 <vPortEnterCritical+0x4c>
	__asm volatile
 8001aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa6:	f383 8811 	msr	BASEPRI, r3
 8001aaa:	f3bf 8f6f 	isb	sy
 8001aae:	f3bf 8f4f 	dsb	sy
 8001ab2:	603b      	str	r3, [r7, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	e7fe      	b.n	8001ab6 <vPortEnterCritical+0x4a>
	}
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	e000ed04 	.word	0xe000ed04

08001acc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <vPortExitCritical+0x4c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10a      	bne.n	8001af0 <vPortExitCritical+0x24>
	__asm volatile
 8001ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ade:	f383 8811 	msr	BASEPRI, r3
 8001ae2:	f3bf 8f6f 	isb	sy
 8001ae6:	f3bf 8f4f 	dsb	sy
 8001aea:	607b      	str	r3, [r7, #4]
}
 8001aec:	bf00      	nop
 8001aee:	e7fe      	b.n	8001aee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <vPortExitCritical+0x4c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <vPortExitCritical+0x4c>)
 8001af8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <vPortExitCritical+0x4c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <vPortExitCritical+0x42>
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001b0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	00000000 	.word	0x00000000

08001b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001b20:	f3ef 8009 	mrs	r0, PSP
 8001b24:	f3bf 8f6f 	isb	sy
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <pxCurrentTCBConst>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b30:	6010      	str	r0, [r2, #0]
 8001b32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001b36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b3a:	f380 8811 	msr	BASEPRI, r0
 8001b3e:	f7ff fd0d 	bl	800155c <vTaskSwitchContext>
 8001b42:	f04f 0000 	mov.w	r0, #0
 8001b46:	f380 8811 	msr	BASEPRI, r0
 8001b4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001b4e:	6819      	ldr	r1, [r3, #0]
 8001b50:	6808      	ldr	r0, [r1, #0]
 8001b52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b56:	f380 8809 	msr	PSP, r0
 8001b5a:	f3bf 8f6f 	isb	sy
 8001b5e:	4770      	bx	lr

08001b60 <pxCurrentTCBConst>:
 8001b60:	20000444 	.word	0x20000444
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop

08001b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8001b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	f3bf 8f6f 	isb	sy
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	607b      	str	r3, [r7, #4]
}
 8001b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001b82:	f7ff fc2d 	bl	80013e0 <xTaskIncrementTick>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <SysTick_Handler+0x40>)
 8001b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	2300      	movs	r3, #0
 8001b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f383 8811 	msr	BASEPRI, r3
}
 8001b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	e000ed04 	.word	0xe000ed04

08001bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <vPortSetupTimerInterrupt+0x24>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <vPortSetupTimerInterrupt+0x28>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <vPortSetupTimerInterrupt+0x2c>)
 8001bbe:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <vPortSetupTimerInterrupt+0x30>)
 8001bc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001bc2:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <vPortSetupTimerInterrupt+0x24>)
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	601a      	str	r2, [r3, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	e000e010 	.word	0xe000e010
 8001bd4:	e000e018 	.word	0xe000e018
 8001bd8:	e000e014 	.word	0xe000e014
 8001bdc:	0001193f 	.word	0x0001193f

08001be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001bec:	f7ff fb4e 	bl	800128c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001bf0:	4b58      	ldr	r3, [pc, #352]	; (8001d54 <pvPortMalloc+0x174>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001bf8:	f000 f910 	bl	8001e1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001bfc:	4b56      	ldr	r3, [pc, #344]	; (8001d58 <pvPortMalloc+0x178>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f040 808e 	bne.w	8001d26 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01d      	beq.n	8001c4c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001c10:	2208      	movs	r2, #8
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d014      	beq.n	8001c4c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f023 0307 	bic.w	r3, r3, #7
 8001c28:	3308      	adds	r3, #8
 8001c2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00a      	beq.n	8001c4c <pvPortMalloc+0x6c>
	__asm volatile
 8001c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3a:	f383 8811 	msr	BASEPRI, r3
 8001c3e:	f3bf 8f6f 	isb	sy
 8001c42:	f3bf 8f4f 	dsb	sy
 8001c46:	617b      	str	r3, [r7, #20]
}
 8001c48:	bf00      	nop
 8001c4a:	e7fe      	b.n	8001c4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d069      	beq.n	8001d26 <pvPortMalloc+0x146>
 8001c52:	4b42      	ldr	r3, [pc, #264]	; (8001d5c <pvPortMalloc+0x17c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d864      	bhi.n	8001d26 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001c5c:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <pvPortMalloc+0x180>)
 8001c5e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001c60:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <pvPortMalloc+0x180>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c66:	e004      	b.n	8001c72 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d903      	bls.n	8001c84 <pvPortMalloc+0xa4>
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f1      	bne.n	8001c68 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001c84:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <pvPortMalloc+0x174>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d04b      	beq.n	8001d26 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2208      	movs	r2, #8
 8001c94:	4413      	add	r3, r2
 8001c96:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	1ad2      	subs	r2, r2, r3
 8001ca8:	2308      	movs	r3, #8
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d91f      	bls.n	8001cf0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00a      	beq.n	8001cd8 <pvPortMalloc+0xf8>
	__asm volatile
 8001cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc6:	f383 8811 	msr	BASEPRI, r3
 8001cca:	f3bf 8f6f 	isb	sy
 8001cce:	f3bf 8f4f 	dsb	sy
 8001cd2:	613b      	str	r3, [r7, #16]
}
 8001cd4:	bf00      	nop
 8001cd6:	e7fe      	b.n	8001cd6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	1ad2      	subs	r2, r2, r3
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001cea:	69b8      	ldr	r0, [r7, #24]
 8001cec:	f000 f8f8 	bl	8001ee0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <pvPortMalloc+0x17c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <pvPortMalloc+0x17c>)
 8001cfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <pvPortMalloc+0x17c>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <pvPortMalloc+0x184>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d203      	bcs.n	8001d12 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <pvPortMalloc+0x17c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <pvPortMalloc+0x184>)
 8001d10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <pvPortMalloc+0x178>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001d26:	f7ff fabf 	bl	80012a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00a      	beq.n	8001d4a <pvPortMalloc+0x16a>
	__asm volatile
 8001d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d38:	f383 8811 	msr	BASEPRI, r3
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	f3bf 8f4f 	dsb	sy
 8001d44:	60fb      	str	r3, [r7, #12]
}
 8001d46:	bf00      	nop
 8001d48:	e7fe      	b.n	8001d48 <pvPortMalloc+0x168>
	return pvReturn;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3728      	adds	r7, #40	; 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20001180 	.word	0x20001180
 8001d58:	2000118c 	.word	0x2000118c
 8001d5c:	20001184 	.word	0x20001184
 8001d60:	20001178 	.word	0x20001178
 8001d64:	20001188 	.word	0x20001188

08001d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d048      	beq.n	8001e0c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001d7a:	2308      	movs	r3, #8
 8001d7c:	425b      	negs	r3, r3
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4413      	add	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <vPortFree+0xac>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10a      	bne.n	8001dac <vPortFree+0x44>
	__asm volatile
 8001d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9a:	f383 8811 	msr	BASEPRI, r3
 8001d9e:	f3bf 8f6f 	isb	sy
 8001da2:	f3bf 8f4f 	dsb	sy
 8001da6:	60fb      	str	r3, [r7, #12]
}
 8001da8:	bf00      	nop
 8001daa:	e7fe      	b.n	8001daa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00a      	beq.n	8001dca <vPortFree+0x62>
	__asm volatile
 8001db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db8:	f383 8811 	msr	BASEPRI, r3
 8001dbc:	f3bf 8f6f 	isb	sy
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	60bb      	str	r3, [r7, #8]
}
 8001dc6:	bf00      	nop
 8001dc8:	e7fe      	b.n	8001dc8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <vPortFree+0xac>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d019      	beq.n	8001e0c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d115      	bne.n	8001e0c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <vPortFree+0xac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001df0:	f7ff fa4c 	bl	800128c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <vPortFree+0xb0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <vPortFree+0xb0>)
 8001e00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e02:	6938      	ldr	r0, [r7, #16]
 8001e04:	f000 f86c 	bl	8001ee0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001e08:	f7ff fa4e 	bl	80012a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000118c 	.word	0x2000118c
 8001e18:	20001184 	.word	0x20001184

08001e1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <prvHeapInit+0xac>)
 8001e2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00c      	beq.n	8001e50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3307      	adds	r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f023 0307 	bic.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <prvHeapInit+0xac>)
 8001e4c:	4413      	add	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <prvHeapInit+0xb0>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <prvHeapInit+0xb0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	4413      	add	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e68:	2208      	movs	r2, #8
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0307 	bic.w	r3, r3, #7
 8001e76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <prvHeapInit+0xb4>)
 8001e7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <prvHeapInit+0xb4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2200      	movs	r2, #0
 8001e84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <prvHeapInit+0xb4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	1ad2      	subs	r2, r2, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <prvHeapInit+0xb4>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <prvHeapInit+0xb8>)
 8001eaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <prvHeapInit+0xbc>)
 8001eb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <prvHeapInit+0xc0>)
 8001eb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001eba:	601a      	str	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000578 	.word	0x20000578
 8001ecc:	20001178 	.word	0x20001178
 8001ed0:	20001180 	.word	0x20001180
 8001ed4:	20001188 	.word	0x20001188
 8001ed8:	20001184 	.word	0x20001184
 8001edc:	2000118c 	.word	0x2000118c

08001ee0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <prvInsertBlockIntoFreeList+0xa8>)
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e002      	b.n	8001ef4 <prvInsertBlockIntoFreeList+0x14>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d8f7      	bhi.n	8001eee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	4413      	add	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d108      	bne.n	8001f22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	441a      	add	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	441a      	add	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d118      	bne.n	8001f68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <prvInsertBlockIntoFreeList+0xac>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d00d      	beq.n	8001f5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	441a      	add	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	e008      	b.n	8001f70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <prvInsertBlockIntoFreeList+0xac>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e003      	b.n	8001f70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d002      	beq.n	8001f7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	20001178 	.word	0x20001178
 8001f8c:	20001180 	.word	0x20001180

08001f90 <gpio_LED_config>:

/**
 * @brief LED GPIO configuration (PC13)
 */
void gpio_LED_config()
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  // Enable clock for portC in APB2
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <gpio_LED_config+0x54>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <gpio_LED_config+0x54>)
 8001f9a:	f043 0310 	orr.w	r3, r3, #16
 8001f9e:	6193      	str	r3, [r2, #24]
  // 50MHz output mode
  GPIOC->CRH |= (GPIO_CRH_MODE13);
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <gpio_LED_config+0x58>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <gpio_LED_config+0x58>)
 8001fa6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001faa:	6053      	str	r3, [r2, #4]
  // Output push-pull
  GPIOC->CRH &= ~(GPIO_CRH_CNF13);
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <gpio_LED_config+0x58>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <gpio_LED_config+0x58>)
 8001fb2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001fb6:	6053      	str	r3, [r2, #4]

  // Enable clock for portB in APB2
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <gpio_LED_config+0x54>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <gpio_LED_config+0x54>)
 8001fbe:	f043 0308 	orr.w	r3, r3, #8
 8001fc2:	6193      	str	r3, [r2, #24]
  // 50MHz output mode
  GPIOB->CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <gpio_LED_config+0x5c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a08      	ldr	r2, [pc, #32]	; (8001fec <gpio_LED_config+0x5c>)
 8001fca:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 8001fce:	6013      	str	r3, [r2, #0]
  // Output push-pull
  GPIOB->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <gpio_LED_config+0x5c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a05      	ldr	r2, [pc, #20]	; (8001fec <gpio_LED_config+0x5c>)
 8001fd6:	f023 03cc 	bic.w	r3, r3, #204	; 0xcc
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40011000 	.word	0x40011000
 8001fec:	40010c00 	.word	0x40010c00

08001ff0 <gpio_PB_config>:

/**
 * @brief Button configuration (PA0)
 */
void gpio_PB_config()
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  // Enable clock for portA in APB2
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <gpio_PB_config+0x48>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <gpio_PB_config+0x48>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6193      	str	r3, [r2, #24]
  // Input mode
  GPIOA->CRL &= ~(GPIO_CRL_MODE0);
 8002000:	4b0e      	ldr	r3, [pc, #56]	; (800203c <gpio_PB_config+0x4c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <gpio_PB_config+0x4c>)
 8002006:	f023 0303 	bic.w	r3, r3, #3
 800200a:	6013      	str	r3, [r2, #0]
  // Input with pull-up/pull-down
  GPIOA->CRL &= ~(GPIO_CRL_CNF0);
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <gpio_PB_config+0x4c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <gpio_PB_config+0x4c>)
 8002012:	f023 030c 	bic.w	r3, r3, #12
 8002016:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= GPIO_CRL_CNF0_1;
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <gpio_PB_config+0x4c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <gpio_PB_config+0x4c>)
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	6013      	str	r3, [r2, #0]
  // Input pull-up
  GPIOA->ODR |= GPIO_ODR_ODR0;
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <gpio_PB_config+0x4c>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <gpio_PB_config+0x4c>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40021000 	.word	0x40021000
 800203c:	40010800 	.word	0x40010800

08002040 <gpio_SW_config>:

/**
 * @brief Slide switchs configuration (PA8, PA15)
 */
void gpio_SW_config()
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  // Enable clock for portA in APB2
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002044:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <gpio_SW_config+0x78>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <gpio_SW_config+0x78>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6193      	str	r3, [r2, #24]
  // Remap
  RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <gpio_SW_config+0x78>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <gpio_SW_config+0x78>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6193      	str	r3, [r2, #24]
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800205c:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <gpio_SW_config+0x78>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <gpio_SW_config+0x78>)
 8002062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002066:	61d3      	str	r3, [r2, #28]
  AFIO->MAPR &= ~(AFIO_MAPR_SWJ_CFG);
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <gpio_SW_config+0x7c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a13      	ldr	r2, [pc, #76]	; (80020bc <gpio_SW_config+0x7c>)
 800206e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002072:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_1;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <gpio_SW_config+0x7c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a10      	ldr	r2, [pc, #64]	; (80020bc <gpio_SW_config+0x7c>)
 800207a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800207e:	6053      	str	r3, [r2, #4]
  // Input mode
  GPIOA->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_MODE15);
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <gpio_SW_config+0x80>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <gpio_SW_config+0x80>)
 8002086:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	6053      	str	r3, [r2, #4]
  // Input - floating mode
  GPIOA->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_CNF15);
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <gpio_SW_config+0x80>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <gpio_SW_config+0x80>)
 8002096:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800209a:	f023 030c 	bic.w	r3, r3, #12
 800209e:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |= (GPIO_CRH_CNF8_0 | GPIO_CRH_CNF15_0);
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <gpio_SW_config+0x80>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <gpio_SW_config+0x80>)
 80020a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	6053      	str	r3, [r2, #4]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010000 	.word	0x40010000
 80020c0:	40010800 	.word	0x40010800

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <rcc_HSE_config>:

/**
 * @brief HSE configuration
 */
void rcc_HSE_config()
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
   */

  /* PLL Configuration */
  // Clear bitfields [21:18]
  //RCC->CFGR &= ~(0xFUL << 18U);     // same effects
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL);   //
 800211c:	4b3f      	ldr	r3, [pc, #252]	; (800221c <rcc_HSE_config+0x104>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a3e      	ldr	r2, [pc, #248]	; (800221c <rcc_HSE_config+0x104>)
 8002122:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8002126:	6053      	str	r3, [r2, #4]
  // PLL_M = 9
  RCC->CFGR |= (7UL << 18U);
 8002128:	4b3c      	ldr	r3, [pc, #240]	; (800221c <rcc_HSE_config+0x104>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a3b      	ldr	r2, [pc, #236]	; (800221c <rcc_HSE_config+0x104>)
 800212e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002132:	6053      	str	r3, [r2, #4]
  // USB Divider
  //RCC->CFGR &= ~(1UL << 22U);       // same effects
  RCC->CFGR &= ~(RCC_CFGR_USBPRE);    //
 8002134:	4b39      	ldr	r3, [pc, #228]	; (800221c <rcc_HSE_config+0x104>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a38      	ldr	r2, [pc, #224]	; (800221c <rcc_HSE_config+0x104>)
 800213a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800213e:	6053      	str	r3, [r2, #4]

  /* HSE Oscillator */
  // Enable HSE Oscillator
  RCC->CR |= RCC_CR_HSEON;
 8002140:	4b36      	ldr	r3, [pc, #216]	; (800221c <rcc_HSE_config+0x104>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a35      	ldr	r2, [pc, #212]	; (800221c <rcc_HSE_config+0x104>)
 8002146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214a:	6013      	str	r3, [r2, #0]
  // Wait for it to stabilize
  while((RCC->CR & RCC_CR_HSERDY) == 0);
 800214c:	bf00      	nop
 800214e:	4b33      	ldr	r3, [pc, #204]	; (800221c <rcc_HSE_config+0x104>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f9      	beq.n	800214e <rcc_HSE_config+0x36>
  // Select HSE as PLL source
  RCC->CFGR |= RCC_CFGR_PLLSRC;
 800215a:	4b30      	ldr	r3, [pc, #192]	; (800221c <rcc_HSE_config+0x104>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a2f      	ldr	r2, [pc, #188]	; (800221c <rcc_HSE_config+0x104>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	6053      	str	r3, [r2, #4]
  // Enable PLL
  RCC->CR |= RCC_CR_PLLON;
 8002166:	4b2d      	ldr	r3, [pc, #180]	; (800221c <rcc_HSE_config+0x104>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a2c      	ldr	r2, [pc, #176]	; (800221c <rcc_HSE_config+0x104>)
 800216c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002170:	6013      	str	r3, [r2, #0]
  // Wait for PLL ready
  while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8002172:	bf00      	nop
 8002174:	4b29      	ldr	r3, [pc, #164]	; (800221c <rcc_HSE_config+0x104>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f9      	beq.n	8002174 <rcc_HSE_config+0x5c>

  // Flash prefetch and wait state
  // Clear latency fields
  FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <rcc_HSE_config+0x108>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a26      	ldr	r2, [pc, #152]	; (8002220 <rcc_HSE_config+0x108>)
 8002186:	f023 0307 	bic.w	r3, r3, #7
 800218a:	6013      	str	r3, [r2, #0]
  // 2 wait state for 72MHz
  FLASH->ACR |= FLASH_ACR_LATENCY_1;
 800218c:	4b24      	ldr	r3, [pc, #144]	; (8002220 <rcc_HSE_config+0x108>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a23      	ldr	r2, [pc, #140]	; (8002220 <rcc_HSE_config+0x108>)
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	6013      	str	r3, [r2, #0]
  // Enable prefetch buffer
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <rcc_HSE_config+0x108>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a20      	ldr	r2, [pc, #128]	; (8002220 <rcc_HSE_config+0x108>)
 800219e:	f043 0310 	orr.w	r3, r3, #16
 80021a2:	6013      	str	r3, [r2, #0]

  // Select system clock
  // Clear SW bits
  RCC->CFGR &= ~(RCC_CFGR_SW);
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <rcc_HSE_config+0x104>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a1c      	ldr	r2, [pc, #112]	; (800221c <rcc_HSE_config+0x104>)
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	6053      	str	r3, [r2, #4]
  // PLL selected as system clock
  RCC->CFGR |= RCC_CFGR_SW_1;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <rcc_HSE_config+0x104>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <rcc_HSE_config+0x104>)
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	6053      	str	r3, [r2, #4]
  // Wait for PLL to be the active clock source
  while((RCC->CFGR & RCC_CFGR_SWS_1) == 0);
 80021bc:	bf00      	nop
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <rcc_HSE_config+0x104>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f9      	beq.n	80021be <rcc_HSE_config+0xa6>

  // Peripherals clock setup
  // AHB Prescaler
  RCC->CFGR &= ~(RCC_CFGR_HPRE);
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <rcc_HSE_config+0x104>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a13      	ldr	r2, [pc, #76]	; (800221c <rcc_HSE_config+0x104>)
 80021d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021d4:	6053      	str	r3, [r2, #4]
  // APB1 Prescaler
  RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <rcc_HSE_config+0x104>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a10      	ldr	r2, [pc, #64]	; (800221c <rcc_HSE_config+0x104>)
 80021dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021e0:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PPRE1_2;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <rcc_HSE_config+0x104>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4a0d      	ldr	r2, [pc, #52]	; (800221c <rcc_HSE_config+0x104>)
 80021e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ec:	6053      	str	r3, [r2, #4]
  // APB2 Prescaler
  RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <rcc_HSE_config+0x104>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <rcc_HSE_config+0x104>)
 80021f4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021f8:	6053      	str	r3, [r2, #4]
  // ADC Prescaler
  RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <rcc_HSE_config+0x104>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a07      	ldr	r2, [pc, #28]	; (800221c <rcc_HSE_config+0x104>)
 8002200:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002204:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <rcc_HSE_config+0x104>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a04      	ldr	r2, [pc, #16]	; (800221c <rcc_HSE_config+0x104>)
 800220c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002210:	6053      	str	r3, [r2, #4]
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	40022000 	.word	0x40022000

08002224 <rcc_SysTick_config>:

/**
 * @brief Systick configuration
 */
void rcc_SysTick_config()
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  // Reset CTRL register
  SysTick->CTRL = 0;
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <rcc_SysTick_config+0x48>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
  // Set the Reload value
  SysTick->LOAD = 71999;
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <rcc_SysTick_config+0x48>)
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <rcc_SysTick_config+0x4c>)
 8002232:	605a      	str	r2, [r3, #4]
  // It has always enabled
  // Set priority to SysTick Interrupt (NVIC)
  NVIC_SetPriority(SysTick_IRQn, 0);
 8002234:	2100      	movs	r1, #0
 8002236:	f04f 30ff 	mov.w	r0, #4294967295
 800223a:	f7ff ff43 	bl	80020c4 <__NVIC_SetPriority>
  // Reset SysTick value to 0
  SysTick->VAL = 0;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <rcc_SysTick_config+0x48>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  // Enable SysTick from CTRL register
  SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <rcc_SysTick_config+0x48>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a08      	ldr	r2, [pc, #32]	; (800226c <rcc_SysTick_config+0x48>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <rcc_SysTick_config+0x48>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a05      	ldr	r2, [pc, #20]	; (800226c <rcc_SysTick_config+0x48>)
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <rcc_SysTick_config+0x48>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a02      	ldr	r2, [pc, #8]	; (800226c <rcc_SysTick_config+0x48>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	e000e010 	.word	0xe000e010
 8002270:	0001193f 	.word	0x0001193f

08002274 <rcc_msIncTick>:

/**
 * @brief Increment milliseconds
 */
void rcc_msIncTick()
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  msTick++;
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <rcc_msIncTick+0x18>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	4a03      	ldr	r2, [pc, #12]	; (800228c <rcc_msIncTick+0x18>)
 8002280:	6013      	str	r3, [r2, #0]
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20001190 	.word	0x20001190

08002290 <rcc_msGetTick>:

/**
 * @brief Get milliseconds
 */
uint32_t rcc_msGetTick()
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return msTick;
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <rcc_msGetTick+0x10>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	20001190 	.word	0x20001190

080022a4 <__NVIC_EnableIRQ>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4906      	ldr	r1, [pc, #24]	; (80022d8 <__NVIC_EnableIRQ+0x34>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_ClearPendingIRQ>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0c      	blt.n	8002308 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4907      	ldr	r1, [pc, #28]	; (8002314 <__NVIC_ClearPendingIRQ+0x38>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	3360      	adds	r3, #96	; 0x60
 8002304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <tim_TIM2_initTicks>:

/**
 * @brief TIM2 - Time Base ticks/delay
 */
void tim_TIM2_initTicks(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  // Enable TIM2 timer
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <tim_TIM2_initTicks+0x94>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	4a22      	ldr	r2, [pc, #136]	; (8002400 <tim_TIM2_initTicks+0x94>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	61d3      	str	r3, [r2, #28]
  // Count up mode
  TIM2->CR1 &= ~(TIM_CR1_DIR);
 800237c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002386:	f023 0310 	bic.w	r3, r3, #16
 800238a:	6013      	str	r3, [r2, #0]
  // Periodic
  TIM2->CR1 &= ~(TIM_CR1_OPM);
 800238c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002396:	f023 0308 	bic.w	r3, r3, #8
 800239a:	6013      	str	r3, [r2, #0]
  // Mode: RESET
  TIM2->CR2 &= ~(TIM_CR2_MMS);
 800239c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023aa:	6053      	str	r3, [r2, #4]
  // Prescaler
  TIM2->PSC = 72 - 1;
 80023ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023b0:	2247      	movs	r2, #71	; 0x47
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
  // Period
  TIM2->ARR = 1000 - 1; // 1KHz
 80023b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023bc:	62da      	str	r2, [r3, #44]	; 0x2c

  // Clear update interrupt
  TIM2->SR &= ~(TIM_SR_UIF);
 80023be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6113      	str	r3, [r2, #16]
  // Enable update interrupt
  TIM2->DIER |= TIM_DIER_UIE;
 80023ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	60d3      	str	r3, [r2, #12]
  // Enable NVIC
  NVIC_SetPriority(TIM2_IRQn, 5);
 80023de:	2105      	movs	r1, #5
 80023e0:	201c      	movs	r0, #28
 80023e2:	f7ff ff99 	bl	8002318 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80023e6:	201c      	movs	r0, #28
 80023e8:	f7ff ff5c 	bl	80022a4 <__NVIC_EnableIRQ>
  // Start TIM2
  TIM2->CR1 |= TIM_CR1_CEN;
 80023ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000

08002404 <TIM2_IRQHandler>:

void TIM2_IRQHandler()
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  if(TIM2->SR & TIM_SR_UIF)
 8002408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00c      	beq.n	8002430 <TIM2_IRQHandler+0x2c>
  {
    // Clear flag
    TIM2->SR &= ~TIM_SR_UIF;
 8002416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6113      	str	r3, [r2, #16]
    NVIC_ClearPendingIRQ(TIM2_IRQn);
 8002426:	201c      	movs	r0, #28
 8002428:	f7ff ff58 	bl	80022dc <__NVIC_ClearPendingIRQ>
    // Increase tick
    rcc_msIncTick();
 800242c:	f7ff ff22 	bl	8002274 <rcc_msIncTick>
  }
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <uart_UART1_GPIO_config>:

/**
 * @brief UART1 GPIO configuration
 */
void uart_UART1_GPIO_config()
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  // PA9 - TX, PA10 - RX
  // Enable portA clock
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <uart_UART1_GPIO_config+0x60>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	4a15      	ldr	r2, [pc, #84]	; (8002494 <uart_UART1_GPIO_config+0x60>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	6193      	str	r3, [r2, #24]
  // AF mode
  GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_CNF10);
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <uart_UART1_GPIO_config+0x64>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a13      	ldr	r2, [pc, #76]	; (8002498 <uart_UART1_GPIO_config+0x64>)
 800244a:	f423 634c 	bic.w	r3, r3, #3264	; 0xcc0
 800244e:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_CNF10_0;
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <uart_UART1_GPIO_config+0x64>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a10      	ldr	r2, [pc, #64]	; (8002498 <uart_UART1_GPIO_config+0x64>)
 8002456:	f443 6390 	orr.w	r3, r3, #1152	; 0x480
 800245a:	6053      	str	r3, [r2, #4]
  // Output max 10MHz
  GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_MODE10);
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <uart_UART1_GPIO_config+0x64>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <uart_UART1_GPIO_config+0x64>)
 8002462:	f423 734c 	bic.w	r3, r3, #816	; 0x330
 8002466:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |= GPIO_CRH_MODE9_0;
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <uart_UART1_GPIO_config+0x64>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <uart_UART1_GPIO_config+0x64>)
 800246e:	f043 0310 	orr.w	r3, r3, #16
 8002472:	6053      	str	r3, [r2, #4]
  // No remap UART1
  RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8002474:	4b07      	ldr	r3, [pc, #28]	; (8002494 <uart_UART1_GPIO_config+0x60>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a06      	ldr	r2, [pc, #24]	; (8002494 <uart_UART1_GPIO_config+0x60>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6193      	str	r3, [r2, #24]
  AFIO->MAPR &= ~(AFIO_MAPR_USART1_REMAP);
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <uart_UART1_GPIO_config+0x68>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a05      	ldr	r2, [pc, #20]	; (800249c <uart_UART1_GPIO_config+0x68>)
 8002486:	f023 0304 	bic.w	r3, r3, #4
 800248a:	6053      	str	r3, [r2, #4]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40021000 	.word	0x40021000
 8002498:	40010800 	.word	0x40010800
 800249c:	40010000 	.word	0x40010000

080024a0 <uart_UART1_config>:

/**
 * @brief UART1 Peripherals configuration
 */
void uart_UART1_config()
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  // Enable UART1 clock
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80024a4:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <uart_UART1_config+0xb0>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4a29      	ldr	r2, [pc, #164]	; (8002550 <uart_UART1_config+0xb0>)
 80024aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ae:	6193      	str	r3, [r2, #24]
  // Enable transmit
  USART1->CR1 |= USART_CR1_TE;
 80024b0:	4b28      	ldr	r3, [pc, #160]	; (8002554 <uart_UART1_config+0xb4>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4a27      	ldr	r2, [pc, #156]	; (8002554 <uart_UART1_config+0xb4>)
 80024b6:	f043 0308 	orr.w	r3, r3, #8
 80024ba:	60d3      	str	r3, [r2, #12]
  // Enable receive
  USART1->CR1 |= USART_CR1_RE;
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <uart_UART1_config+0xb4>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a24      	ldr	r2, [pc, #144]	; (8002554 <uart_UART1_config+0xb4>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	60d3      	str	r3, [r2, #12]
  // Set parity to even
  USART1->CR1 &= ~(USART_CR1_PS);
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <uart_UART1_config+0xb4>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a21      	ldr	r2, [pc, #132]	; (8002554 <uart_UART1_config+0xb4>)
 80024ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024d2:	60d3      	str	r3, [r2, #12]
  // Parity control enable (DISABLE)
  USART1->CR1 &= ~(USART_CR1_PCE);
 80024d4:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <uart_UART1_config+0xb4>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <uart_UART1_config+0xb4>)
 80024da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024de:	60d3      	str	r3, [r2, #12]
  // Word length to 8-bit
  USART1->CR1 &= ~(USART_CR1_M);
 80024e0:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <uart_UART1_config+0xb4>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <uart_UART1_config+0xb4>)
 80024e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024ea:	60d3      	str	r3, [r2, #12]
  // Stop bit = 1
  USART1->CR2 &= ~(USART_CR2_STOP);
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <uart_UART1_config+0xb4>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <uart_UART1_config+0xb4>)
 80024f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024f6:	6113      	str	r3, [r2, #16]
  // Disable hardware flow control CTS, RTS
  USART1->CR3 &= ~(USART_CR3_CTSE | USART_CR3_RTSE);
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <uart_UART1_config+0xb4>)
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <uart_UART1_config+0xb4>)
 80024fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002502:	6153      	str	r3, [r2, #20]
  // Set baud rate to 115200
  USART1->BRR = 0;
 8002504:	4b13      	ldr	r3, [pc, #76]	; (8002554 <uart_UART1_config+0xb4>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  USART1->BRR |= 39U << 4U;
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <uart_UART1_config+0xb4>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <uart_UART1_config+0xb4>)
 8002510:	f443 731c 	orr.w	r3, r3, #624	; 0x270
 8002514:	6093      	str	r3, [r2, #8]
  USART1->BRR |= 1U << 0;
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <uart_UART1_config+0xb4>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <uart_UART1_config+0xb4>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6093      	str	r3, [r2, #8]
  // Clear some flags and enable
  USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <uart_UART1_config+0xb4>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	4a0b      	ldr	r2, [pc, #44]	; (8002554 <uart_UART1_config+0xb4>)
 8002528:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800252c:	6113      	str	r3, [r2, #16]
  USART1->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <uart_UART1_config+0xb4>)
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	4a08      	ldr	r2, [pc, #32]	; (8002554 <uart_UART1_config+0xb4>)
 8002534:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002538:	6153      	str	r3, [r2, #20]
  // Enable UART
  USART1->CR1 |= USART_CR1_UE;
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <uart_UART1_config+0xb4>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a05      	ldr	r2, [pc, #20]	; (8002554 <uart_UART1_config+0xb4>)
 8002540:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002544:	60d3      	str	r3, [r2, #12]
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	40013800 	.word	0x40013800

08002558 <uart_UART1_transmit>:

/**
 * @brief UART transmit function
 */
bool uart_UART1_transmit(uint8_t *data, uint8_t len, uint32_t timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	460b      	mov	r3, r1
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	72fb      	strb	r3, [r7, #11]
  // Wait for TXE to start transmit
  // Write to DR as TXE flag is HIGH (Tx buffer empty)
  uint8_t dataIdx = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]
  uint32_t startTick = rcc_msGetTick();
 800256a:	f7ff fe91 	bl	8002290 <rcc_msGetTick>
 800256e:	6138      	str	r0, [r7, #16]
  while(dataIdx < len)
 8002570:	e019      	b.n	80025a6 <uart_UART1_transmit+0x4e>
  {
    if(USART1->SR & USART_SR_TXE) //Tx buffer empty
 8002572:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <uart_UART1_transmit+0x84>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <uart_UART1_transmit+0x3a>
    {
      USART1->DR = data[dataIdx];
 800257e:	7dfb      	ldrb	r3, [r7, #23]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <uart_UART1_transmit+0x84>)
 8002588:	605a      	str	r2, [r3, #4]
      dataIdx++;
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	3301      	adds	r3, #1
 800258e:	75fb      	strb	r3, [r7, #23]
 8002590:	e009      	b.n	80025a6 <uart_UART1_transmit+0x4e>
    }
    else if(rcc_msGetTick() - startTick >= timeout) // Manage timeout
 8002592:	f7ff fe7d 	bl	8002290 <rcc_msGetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d801      	bhi.n	80025a6 <uart_UART1_transmit+0x4e>
    {
      return false;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e015      	b.n	80025d2 <uart_UART1_transmit+0x7a>
  while(dataIdx < len)
 80025a6:	7dfa      	ldrb	r2, [r7, #23]
 80025a8:	7afb      	ldrb	r3, [r7, #11]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d3e1      	bcc.n	8002572 <uart_UART1_transmit+0x1a>
    }
  }
  // Wait for busy flag
  while(!(USART1->SR & USART_SR_TC))
 80025ae:	e009      	b.n	80025c4 <uart_UART1_transmit+0x6c>
  {
    if(rcc_msGetTick() - startTick >= timeout)
 80025b0:	f7ff fe6e 	bl	8002290 <rcc_msGetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d801      	bhi.n	80025c4 <uart_UART1_transmit+0x6c>
    {
      return false;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e006      	b.n	80025d2 <uart_UART1_transmit+0x7a>
  while(!(USART1->SR & USART_SR_TC))
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <uart_UART1_transmit+0x84>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ef      	beq.n	80025b0 <uart_UART1_transmit+0x58>
    }
  }
  return true;
 80025d0:	2301      	movs	r3, #1
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40013800 	.word	0x40013800

080025e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025e0:	480c      	ldr	r0, [pc, #48]	; (8002614 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025e2:	490d      	ldr	r1, [pc, #52]	; (8002618 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e8:	e002      	b.n	80025f0 <LoopCopyDataInit>

080025ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ee:	3304      	adds	r3, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f4:	d3f9      	bcc.n	80025ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025f8:	4c0a      	ldr	r4, [pc, #40]	; (8002624 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025fc:	e001      	b.n	8002602 <LoopFillZerobss>

080025fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002600:	3204      	adds	r2, #4

08002602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002604:	d3fb      	bcc.n	80025fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002606:	f7fe faf0 	bl	8000bea <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260a:	f000 f80f 	bl	800262c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800260e:	f7fe fa53 	bl	8000ab8 <main>
  bx lr
 8002612:	4770      	bx	lr
  ldr r0, =_sdata
 8002614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002618:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800261c:	08005518 	.word	0x08005518
  ldr r2, =_sbss
 8002620:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002624:	200011b8 	.word	0x200011b8

08002628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC1_2_IRQHandler>
	...

0800262c <__libc_init_array>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	2600      	movs	r6, #0
 8002630:	4d0c      	ldr	r5, [pc, #48]	; (8002664 <__libc_init_array+0x38>)
 8002632:	4c0d      	ldr	r4, [pc, #52]	; (8002668 <__libc_init_array+0x3c>)
 8002634:	1b64      	subs	r4, r4, r5
 8002636:	10a4      	asrs	r4, r4, #2
 8002638:	42a6      	cmp	r6, r4
 800263a:	d109      	bne.n	8002650 <__libc_init_array+0x24>
 800263c:	f002 fd42 	bl	80050c4 <_init>
 8002640:	2600      	movs	r6, #0
 8002642:	4d0a      	ldr	r5, [pc, #40]	; (800266c <__libc_init_array+0x40>)
 8002644:	4c0a      	ldr	r4, [pc, #40]	; (8002670 <__libc_init_array+0x44>)
 8002646:	1b64      	subs	r4, r4, r5
 8002648:	10a4      	asrs	r4, r4, #2
 800264a:	42a6      	cmp	r6, r4
 800264c:	d105      	bne.n	800265a <__libc_init_array+0x2e>
 800264e:	bd70      	pop	{r4, r5, r6, pc}
 8002650:	f855 3b04 	ldr.w	r3, [r5], #4
 8002654:	4798      	blx	r3
 8002656:	3601      	adds	r6, #1
 8002658:	e7ee      	b.n	8002638 <__libc_init_array+0xc>
 800265a:	f855 3b04 	ldr.w	r3, [r5], #4
 800265e:	4798      	blx	r3
 8002660:	3601      	adds	r6, #1
 8002662:	e7f2      	b.n	800264a <__libc_init_array+0x1e>
 8002664:	08005510 	.word	0x08005510
 8002668:	08005510 	.word	0x08005510
 800266c:	08005510 	.word	0x08005510
 8002670:	08005514 	.word	0x08005514

08002674 <malloc>:
 8002674:	4b02      	ldr	r3, [pc, #8]	; (8002680 <malloc+0xc>)
 8002676:	4601      	mov	r1, r0
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	f000 b865 	b.w	8002748 <_malloc_r>
 800267e:	bf00      	nop
 8002680:	20000004 	.word	0x20000004

08002684 <memcpy>:
 8002684:	440a      	add	r2, r1
 8002686:	4291      	cmp	r1, r2
 8002688:	f100 33ff 	add.w	r3, r0, #4294967295
 800268c:	d100      	bne.n	8002690 <memcpy+0xc>
 800268e:	4770      	bx	lr
 8002690:	b510      	push	{r4, lr}
 8002692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002696:	4291      	cmp	r1, r2
 8002698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800269c:	d1f9      	bne.n	8002692 <memcpy+0xe>
 800269e:	bd10      	pop	{r4, pc}

080026a0 <memset>:
 80026a0:	4603      	mov	r3, r0
 80026a2:	4402      	add	r2, r0
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d100      	bne.n	80026aa <memset+0xa>
 80026a8:	4770      	bx	lr
 80026aa:	f803 1b01 	strb.w	r1, [r3], #1
 80026ae:	e7f9      	b.n	80026a4 <memset+0x4>

080026b0 <_free_r>:
 80026b0:	b538      	push	{r3, r4, r5, lr}
 80026b2:	4605      	mov	r5, r0
 80026b4:	2900      	cmp	r1, #0
 80026b6:	d043      	beq.n	8002740 <_free_r+0x90>
 80026b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026bc:	1f0c      	subs	r4, r1, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bfb8      	it	lt
 80026c2:	18e4      	addlt	r4, r4, r3
 80026c4:	f001 fcc4 	bl	8004050 <__malloc_lock>
 80026c8:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <_free_r+0x94>)
 80026ca:	6813      	ldr	r3, [r2, #0]
 80026cc:	4610      	mov	r0, r2
 80026ce:	b933      	cbnz	r3, 80026de <_free_r+0x2e>
 80026d0:	6063      	str	r3, [r4, #4]
 80026d2:	6014      	str	r4, [r2, #0]
 80026d4:	4628      	mov	r0, r5
 80026d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026da:	f001 bcbf 	b.w	800405c <__malloc_unlock>
 80026de:	42a3      	cmp	r3, r4
 80026e0:	d90a      	bls.n	80026f8 <_free_r+0x48>
 80026e2:	6821      	ldr	r1, [r4, #0]
 80026e4:	1862      	adds	r2, r4, r1
 80026e6:	4293      	cmp	r3, r2
 80026e8:	bf01      	itttt	eq
 80026ea:	681a      	ldreq	r2, [r3, #0]
 80026ec:	685b      	ldreq	r3, [r3, #4]
 80026ee:	1852      	addeq	r2, r2, r1
 80026f0:	6022      	streq	r2, [r4, #0]
 80026f2:	6063      	str	r3, [r4, #4]
 80026f4:	6004      	str	r4, [r0, #0]
 80026f6:	e7ed      	b.n	80026d4 <_free_r+0x24>
 80026f8:	461a      	mov	r2, r3
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	b10b      	cbz	r3, 8002702 <_free_r+0x52>
 80026fe:	42a3      	cmp	r3, r4
 8002700:	d9fa      	bls.n	80026f8 <_free_r+0x48>
 8002702:	6811      	ldr	r1, [r2, #0]
 8002704:	1850      	adds	r0, r2, r1
 8002706:	42a0      	cmp	r0, r4
 8002708:	d10b      	bne.n	8002722 <_free_r+0x72>
 800270a:	6820      	ldr	r0, [r4, #0]
 800270c:	4401      	add	r1, r0
 800270e:	1850      	adds	r0, r2, r1
 8002710:	4283      	cmp	r3, r0
 8002712:	6011      	str	r1, [r2, #0]
 8002714:	d1de      	bne.n	80026d4 <_free_r+0x24>
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4401      	add	r1, r0
 800271c:	6011      	str	r1, [r2, #0]
 800271e:	6053      	str	r3, [r2, #4]
 8002720:	e7d8      	b.n	80026d4 <_free_r+0x24>
 8002722:	d902      	bls.n	800272a <_free_r+0x7a>
 8002724:	230c      	movs	r3, #12
 8002726:	602b      	str	r3, [r5, #0]
 8002728:	e7d4      	b.n	80026d4 <_free_r+0x24>
 800272a:	6820      	ldr	r0, [r4, #0]
 800272c:	1821      	adds	r1, r4, r0
 800272e:	428b      	cmp	r3, r1
 8002730:	bf01      	itttt	eq
 8002732:	6819      	ldreq	r1, [r3, #0]
 8002734:	685b      	ldreq	r3, [r3, #4]
 8002736:	1809      	addeq	r1, r1, r0
 8002738:	6021      	streq	r1, [r4, #0]
 800273a:	6063      	str	r3, [r4, #4]
 800273c:	6054      	str	r4, [r2, #4]
 800273e:	e7c9      	b.n	80026d4 <_free_r+0x24>
 8002740:	bd38      	pop	{r3, r4, r5, pc}
 8002742:	bf00      	nop
 8002744:	20001194 	.word	0x20001194

08002748 <_malloc_r>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	1ccd      	adds	r5, r1, #3
 800274c:	f025 0503 	bic.w	r5, r5, #3
 8002750:	3508      	adds	r5, #8
 8002752:	2d0c      	cmp	r5, #12
 8002754:	bf38      	it	cc
 8002756:	250c      	movcc	r5, #12
 8002758:	2d00      	cmp	r5, #0
 800275a:	4606      	mov	r6, r0
 800275c:	db01      	blt.n	8002762 <_malloc_r+0x1a>
 800275e:	42a9      	cmp	r1, r5
 8002760:	d903      	bls.n	800276a <_malloc_r+0x22>
 8002762:	230c      	movs	r3, #12
 8002764:	6033      	str	r3, [r6, #0]
 8002766:	2000      	movs	r0, #0
 8002768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800276a:	f001 fc71 	bl	8004050 <__malloc_lock>
 800276e:	4921      	ldr	r1, [pc, #132]	; (80027f4 <_malloc_r+0xac>)
 8002770:	680a      	ldr	r2, [r1, #0]
 8002772:	4614      	mov	r4, r2
 8002774:	b99c      	cbnz	r4, 800279e <_malloc_r+0x56>
 8002776:	4f20      	ldr	r7, [pc, #128]	; (80027f8 <_malloc_r+0xb0>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	b923      	cbnz	r3, 8002786 <_malloc_r+0x3e>
 800277c:	4621      	mov	r1, r4
 800277e:	4630      	mov	r0, r6
 8002780:	f000 fc9c 	bl	80030bc <_sbrk_r>
 8002784:	6038      	str	r0, [r7, #0]
 8002786:	4629      	mov	r1, r5
 8002788:	4630      	mov	r0, r6
 800278a:	f000 fc97 	bl	80030bc <_sbrk_r>
 800278e:	1c43      	adds	r3, r0, #1
 8002790:	d123      	bne.n	80027da <_malloc_r+0x92>
 8002792:	230c      	movs	r3, #12
 8002794:	4630      	mov	r0, r6
 8002796:	6033      	str	r3, [r6, #0]
 8002798:	f001 fc60 	bl	800405c <__malloc_unlock>
 800279c:	e7e3      	b.n	8002766 <_malloc_r+0x1e>
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	1b5b      	subs	r3, r3, r5
 80027a2:	d417      	bmi.n	80027d4 <_malloc_r+0x8c>
 80027a4:	2b0b      	cmp	r3, #11
 80027a6:	d903      	bls.n	80027b0 <_malloc_r+0x68>
 80027a8:	6023      	str	r3, [r4, #0]
 80027aa:	441c      	add	r4, r3
 80027ac:	6025      	str	r5, [r4, #0]
 80027ae:	e004      	b.n	80027ba <_malloc_r+0x72>
 80027b0:	6863      	ldr	r3, [r4, #4]
 80027b2:	42a2      	cmp	r2, r4
 80027b4:	bf0c      	ite	eq
 80027b6:	600b      	streq	r3, [r1, #0]
 80027b8:	6053      	strne	r3, [r2, #4]
 80027ba:	4630      	mov	r0, r6
 80027bc:	f001 fc4e 	bl	800405c <__malloc_unlock>
 80027c0:	f104 000b 	add.w	r0, r4, #11
 80027c4:	1d23      	adds	r3, r4, #4
 80027c6:	f020 0007 	bic.w	r0, r0, #7
 80027ca:	1ac2      	subs	r2, r0, r3
 80027cc:	d0cc      	beq.n	8002768 <_malloc_r+0x20>
 80027ce:	1a1b      	subs	r3, r3, r0
 80027d0:	50a3      	str	r3, [r4, r2]
 80027d2:	e7c9      	b.n	8002768 <_malloc_r+0x20>
 80027d4:	4622      	mov	r2, r4
 80027d6:	6864      	ldr	r4, [r4, #4]
 80027d8:	e7cc      	b.n	8002774 <_malloc_r+0x2c>
 80027da:	1cc4      	adds	r4, r0, #3
 80027dc:	f024 0403 	bic.w	r4, r4, #3
 80027e0:	42a0      	cmp	r0, r4
 80027e2:	d0e3      	beq.n	80027ac <_malloc_r+0x64>
 80027e4:	1a21      	subs	r1, r4, r0
 80027e6:	4630      	mov	r0, r6
 80027e8:	f000 fc68 	bl	80030bc <_sbrk_r>
 80027ec:	3001      	adds	r0, #1
 80027ee:	d1dd      	bne.n	80027ac <_malloc_r+0x64>
 80027f0:	e7cf      	b.n	8002792 <_malloc_r+0x4a>
 80027f2:	bf00      	nop
 80027f4:	20001194 	.word	0x20001194
 80027f8:	20001198 	.word	0x20001198

080027fc <__cvt>:
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002802:	461f      	mov	r7, r3
 8002804:	bfbb      	ittet	lt
 8002806:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800280a:	461f      	movlt	r7, r3
 800280c:	2300      	movge	r3, #0
 800280e:	232d      	movlt	r3, #45	; 0x2d
 8002810:	b088      	sub	sp, #32
 8002812:	4614      	mov	r4, r2
 8002814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002816:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002818:	7013      	strb	r3, [r2, #0]
 800281a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800281c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002820:	f023 0820 	bic.w	r8, r3, #32
 8002824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002828:	d005      	beq.n	8002836 <__cvt+0x3a>
 800282a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800282e:	d100      	bne.n	8002832 <__cvt+0x36>
 8002830:	3501      	adds	r5, #1
 8002832:	2302      	movs	r3, #2
 8002834:	e000      	b.n	8002838 <__cvt+0x3c>
 8002836:	2303      	movs	r3, #3
 8002838:	aa07      	add	r2, sp, #28
 800283a:	9204      	str	r2, [sp, #16]
 800283c:	aa06      	add	r2, sp, #24
 800283e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002842:	e9cd 3500 	strd	r3, r5, [sp]
 8002846:	4622      	mov	r2, r4
 8002848:	463b      	mov	r3, r7
 800284a:	f000 fcf5 	bl	8003238 <_dtoa_r>
 800284e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002852:	4606      	mov	r6, r0
 8002854:	d102      	bne.n	800285c <__cvt+0x60>
 8002856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002858:	07db      	lsls	r3, r3, #31
 800285a:	d522      	bpl.n	80028a2 <__cvt+0xa6>
 800285c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002860:	eb06 0905 	add.w	r9, r6, r5
 8002864:	d110      	bne.n	8002888 <__cvt+0x8c>
 8002866:	7833      	ldrb	r3, [r6, #0]
 8002868:	2b30      	cmp	r3, #48	; 0x30
 800286a:	d10a      	bne.n	8002882 <__cvt+0x86>
 800286c:	2200      	movs	r2, #0
 800286e:	2300      	movs	r3, #0
 8002870:	4620      	mov	r0, r4
 8002872:	4639      	mov	r1, r7
 8002874:	f7fe f898 	bl	80009a8 <__aeabi_dcmpeq>
 8002878:	b918      	cbnz	r0, 8002882 <__cvt+0x86>
 800287a:	f1c5 0501 	rsb	r5, r5, #1
 800287e:	f8ca 5000 	str.w	r5, [sl]
 8002882:	f8da 3000 	ldr.w	r3, [sl]
 8002886:	4499      	add	r9, r3
 8002888:	2200      	movs	r2, #0
 800288a:	2300      	movs	r3, #0
 800288c:	4620      	mov	r0, r4
 800288e:	4639      	mov	r1, r7
 8002890:	f7fe f88a 	bl	80009a8 <__aeabi_dcmpeq>
 8002894:	b108      	cbz	r0, 800289a <__cvt+0x9e>
 8002896:	f8cd 901c 	str.w	r9, [sp, #28]
 800289a:	2230      	movs	r2, #48	; 0x30
 800289c:	9b07      	ldr	r3, [sp, #28]
 800289e:	454b      	cmp	r3, r9
 80028a0:	d307      	bcc.n	80028b2 <__cvt+0xb6>
 80028a2:	4630      	mov	r0, r6
 80028a4:	9b07      	ldr	r3, [sp, #28]
 80028a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80028a8:	1b9b      	subs	r3, r3, r6
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	b008      	add	sp, #32
 80028ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	9107      	str	r1, [sp, #28]
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e7f0      	b.n	800289c <__cvt+0xa0>

080028ba <__exponent>:
 80028ba:	4603      	mov	r3, r0
 80028bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028be:	2900      	cmp	r1, #0
 80028c0:	f803 2b02 	strb.w	r2, [r3], #2
 80028c4:	bfb6      	itet	lt
 80028c6:	222d      	movlt	r2, #45	; 0x2d
 80028c8:	222b      	movge	r2, #43	; 0x2b
 80028ca:	4249      	neglt	r1, r1
 80028cc:	2909      	cmp	r1, #9
 80028ce:	7042      	strb	r2, [r0, #1]
 80028d0:	dd2b      	ble.n	800292a <__exponent+0x70>
 80028d2:	f10d 0407 	add.w	r4, sp, #7
 80028d6:	46a4      	mov	ip, r4
 80028d8:	270a      	movs	r7, #10
 80028da:	fb91 f6f7 	sdiv	r6, r1, r7
 80028de:	460a      	mov	r2, r1
 80028e0:	46a6      	mov	lr, r4
 80028e2:	fb07 1516 	mls	r5, r7, r6, r1
 80028e6:	2a63      	cmp	r2, #99	; 0x63
 80028e8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80028ec:	4631      	mov	r1, r6
 80028ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80028f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80028f6:	dcf0      	bgt.n	80028da <__exponent+0x20>
 80028f8:	3130      	adds	r1, #48	; 0x30
 80028fa:	f1ae 0502 	sub.w	r5, lr, #2
 80028fe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002902:	4629      	mov	r1, r5
 8002904:	1c44      	adds	r4, r0, #1
 8002906:	4561      	cmp	r1, ip
 8002908:	d30a      	bcc.n	8002920 <__exponent+0x66>
 800290a:	f10d 0209 	add.w	r2, sp, #9
 800290e:	eba2 020e 	sub.w	r2, r2, lr
 8002912:	4565      	cmp	r5, ip
 8002914:	bf88      	it	hi
 8002916:	2200      	movhi	r2, #0
 8002918:	4413      	add	r3, r2
 800291a:	1a18      	subs	r0, r3, r0
 800291c:	b003      	add	sp, #12
 800291e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002920:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002924:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002928:	e7ed      	b.n	8002906 <__exponent+0x4c>
 800292a:	2330      	movs	r3, #48	; 0x30
 800292c:	3130      	adds	r1, #48	; 0x30
 800292e:	7083      	strb	r3, [r0, #2]
 8002930:	70c1      	strb	r1, [r0, #3]
 8002932:	1d03      	adds	r3, r0, #4
 8002934:	e7f1      	b.n	800291a <__exponent+0x60>
	...

08002938 <_printf_float>:
 8002938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800293c:	b091      	sub	sp, #68	; 0x44
 800293e:	460c      	mov	r4, r1
 8002940:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002944:	4616      	mov	r6, r2
 8002946:	461f      	mov	r7, r3
 8002948:	4605      	mov	r5, r0
 800294a:	f001 fb6b 	bl	8004024 <_localeconv_r>
 800294e:	6803      	ldr	r3, [r0, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	9309      	str	r3, [sp, #36]	; 0x24
 8002954:	f7fd fbfc 	bl	8000150 <strlen>
 8002958:	2300      	movs	r3, #0
 800295a:	930e      	str	r3, [sp, #56]	; 0x38
 800295c:	f8d8 3000 	ldr.w	r3, [r8]
 8002960:	900a      	str	r0, [sp, #40]	; 0x28
 8002962:	3307      	adds	r3, #7
 8002964:	f023 0307 	bic.w	r3, r3, #7
 8002968:	f103 0208 	add.w	r2, r3, #8
 800296c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002970:	f8d4 b000 	ldr.w	fp, [r4]
 8002974:	f8c8 2000 	str.w	r2, [r8]
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002980:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002984:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002988:	930b      	str	r3, [sp, #44]	; 0x2c
 800298a:	f04f 32ff 	mov.w	r2, #4294967295
 800298e:	4640      	mov	r0, r8
 8002990:	4b9c      	ldr	r3, [pc, #624]	; (8002c04 <_printf_float+0x2cc>)
 8002992:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002994:	f7fe f83a 	bl	8000a0c <__aeabi_dcmpun>
 8002998:	bb70      	cbnz	r0, 80029f8 <_printf_float+0xc0>
 800299a:	f04f 32ff 	mov.w	r2, #4294967295
 800299e:	4640      	mov	r0, r8
 80029a0:	4b98      	ldr	r3, [pc, #608]	; (8002c04 <_printf_float+0x2cc>)
 80029a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80029a4:	f7fe f814 	bl	80009d0 <__aeabi_dcmple>
 80029a8:	bb30      	cbnz	r0, 80029f8 <_printf_float+0xc0>
 80029aa:	2200      	movs	r2, #0
 80029ac:	2300      	movs	r3, #0
 80029ae:	4640      	mov	r0, r8
 80029b0:	4651      	mov	r1, sl
 80029b2:	f7fe f803 	bl	80009bc <__aeabi_dcmplt>
 80029b6:	b110      	cbz	r0, 80029be <_printf_float+0x86>
 80029b8:	232d      	movs	r3, #45	; 0x2d
 80029ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029be:	4b92      	ldr	r3, [pc, #584]	; (8002c08 <_printf_float+0x2d0>)
 80029c0:	4892      	ldr	r0, [pc, #584]	; (8002c0c <_printf_float+0x2d4>)
 80029c2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80029c6:	bf94      	ite	ls
 80029c8:	4698      	movls	r8, r3
 80029ca:	4680      	movhi	r8, r0
 80029cc:	2303      	movs	r3, #3
 80029ce:	f04f 0a00 	mov.w	sl, #0
 80029d2:	6123      	str	r3, [r4, #16]
 80029d4:	f02b 0304 	bic.w	r3, fp, #4
 80029d8:	6023      	str	r3, [r4, #0]
 80029da:	4633      	mov	r3, r6
 80029dc:	4621      	mov	r1, r4
 80029de:	4628      	mov	r0, r5
 80029e0:	9700      	str	r7, [sp, #0]
 80029e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80029e4:	f000 f9d4 	bl	8002d90 <_printf_common>
 80029e8:	3001      	adds	r0, #1
 80029ea:	f040 8090 	bne.w	8002b0e <_printf_float+0x1d6>
 80029ee:	f04f 30ff 	mov.w	r0, #4294967295
 80029f2:	b011      	add	sp, #68	; 0x44
 80029f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f8:	4642      	mov	r2, r8
 80029fa:	4653      	mov	r3, sl
 80029fc:	4640      	mov	r0, r8
 80029fe:	4651      	mov	r1, sl
 8002a00:	f7fe f804 	bl	8000a0c <__aeabi_dcmpun>
 8002a04:	b148      	cbz	r0, 8002a1a <_printf_float+0xe2>
 8002a06:	f1ba 0f00 	cmp.w	sl, #0
 8002a0a:	bfb8      	it	lt
 8002a0c:	232d      	movlt	r3, #45	; 0x2d
 8002a0e:	4880      	ldr	r0, [pc, #512]	; (8002c10 <_printf_float+0x2d8>)
 8002a10:	bfb8      	it	lt
 8002a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002a16:	4b7f      	ldr	r3, [pc, #508]	; (8002c14 <_printf_float+0x2dc>)
 8002a18:	e7d3      	b.n	80029c2 <_printf_float+0x8a>
 8002a1a:	6863      	ldr	r3, [r4, #4]
 8002a1c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	d142      	bne.n	8002aaa <_printf_float+0x172>
 8002a24:	2306      	movs	r3, #6
 8002a26:	6063      	str	r3, [r4, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	9206      	str	r2, [sp, #24]
 8002a2c:	aa0e      	add	r2, sp, #56	; 0x38
 8002a2e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002a32:	aa0d      	add	r2, sp, #52	; 0x34
 8002a34:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002a38:	9203      	str	r2, [sp, #12]
 8002a3a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002a3e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002a42:	6023      	str	r3, [r4, #0]
 8002a44:	6863      	ldr	r3, [r4, #4]
 8002a46:	4642      	mov	r2, r8
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	4653      	mov	r3, sl
 8002a4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002a50:	f7ff fed4 	bl	80027fc <__cvt>
 8002a54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a56:	4680      	mov	r8, r0
 8002a58:	2947      	cmp	r1, #71	; 0x47
 8002a5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002a5c:	d108      	bne.n	8002a70 <_printf_float+0x138>
 8002a5e:	1cc8      	adds	r0, r1, #3
 8002a60:	db02      	blt.n	8002a68 <_printf_float+0x130>
 8002a62:	6863      	ldr	r3, [r4, #4]
 8002a64:	4299      	cmp	r1, r3
 8002a66:	dd40      	ble.n	8002aea <_printf_float+0x1b2>
 8002a68:	f1a9 0902 	sub.w	r9, r9, #2
 8002a6c:	fa5f f989 	uxtb.w	r9, r9
 8002a70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002a74:	d81f      	bhi.n	8002ab6 <_printf_float+0x17e>
 8002a76:	464a      	mov	r2, r9
 8002a78:	3901      	subs	r1, #1
 8002a7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002a7e:	910d      	str	r1, [sp, #52]	; 0x34
 8002a80:	f7ff ff1b 	bl	80028ba <__exponent>
 8002a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a86:	4682      	mov	sl, r0
 8002a88:	1813      	adds	r3, r2, r0
 8002a8a:	2a01      	cmp	r2, #1
 8002a8c:	6123      	str	r3, [r4, #16]
 8002a8e:	dc02      	bgt.n	8002a96 <_printf_float+0x15e>
 8002a90:	6822      	ldr	r2, [r4, #0]
 8002a92:	07d2      	lsls	r2, r2, #31
 8002a94:	d501      	bpl.n	8002a9a <_printf_float+0x162>
 8002a96:	3301      	adds	r3, #1
 8002a98:	6123      	str	r3, [r4, #16]
 8002a9a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d09b      	beq.n	80029da <_printf_float+0xa2>
 8002aa2:	232d      	movs	r3, #45	; 0x2d
 8002aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aa8:	e797      	b.n	80029da <_printf_float+0xa2>
 8002aaa:	2947      	cmp	r1, #71	; 0x47
 8002aac:	d1bc      	bne.n	8002a28 <_printf_float+0xf0>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ba      	bne.n	8002a28 <_printf_float+0xf0>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e7b7      	b.n	8002a26 <_printf_float+0xee>
 8002ab6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002aba:	d118      	bne.n	8002aee <_printf_float+0x1b6>
 8002abc:	2900      	cmp	r1, #0
 8002abe:	6863      	ldr	r3, [r4, #4]
 8002ac0:	dd0b      	ble.n	8002ada <_printf_float+0x1a2>
 8002ac2:	6121      	str	r1, [r4, #16]
 8002ac4:	b913      	cbnz	r3, 8002acc <_printf_float+0x194>
 8002ac6:	6822      	ldr	r2, [r4, #0]
 8002ac8:	07d0      	lsls	r0, r2, #31
 8002aca:	d502      	bpl.n	8002ad2 <_printf_float+0x19a>
 8002acc:	3301      	adds	r3, #1
 8002ace:	440b      	add	r3, r1
 8002ad0:	6123      	str	r3, [r4, #16]
 8002ad2:	f04f 0a00 	mov.w	sl, #0
 8002ad6:	65a1      	str	r1, [r4, #88]	; 0x58
 8002ad8:	e7df      	b.n	8002a9a <_printf_float+0x162>
 8002ada:	b913      	cbnz	r3, 8002ae2 <_printf_float+0x1aa>
 8002adc:	6822      	ldr	r2, [r4, #0]
 8002ade:	07d2      	lsls	r2, r2, #31
 8002ae0:	d501      	bpl.n	8002ae6 <_printf_float+0x1ae>
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	e7f4      	b.n	8002ad0 <_printf_float+0x198>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e7f2      	b.n	8002ad0 <_printf_float+0x198>
 8002aea:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002af0:	4299      	cmp	r1, r3
 8002af2:	db05      	blt.n	8002b00 <_printf_float+0x1c8>
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	6121      	str	r1, [r4, #16]
 8002af8:	07d8      	lsls	r0, r3, #31
 8002afa:	d5ea      	bpl.n	8002ad2 <_printf_float+0x19a>
 8002afc:	1c4b      	adds	r3, r1, #1
 8002afe:	e7e7      	b.n	8002ad0 <_printf_float+0x198>
 8002b00:	2900      	cmp	r1, #0
 8002b02:	bfcc      	ite	gt
 8002b04:	2201      	movgt	r2, #1
 8002b06:	f1c1 0202 	rsble	r2, r1, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	e7e0      	b.n	8002ad0 <_printf_float+0x198>
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	055a      	lsls	r2, r3, #21
 8002b12:	d407      	bmi.n	8002b24 <_printf_float+0x1ec>
 8002b14:	6923      	ldr	r3, [r4, #16]
 8002b16:	4642      	mov	r2, r8
 8002b18:	4631      	mov	r1, r6
 8002b1a:	4628      	mov	r0, r5
 8002b1c:	47b8      	blx	r7
 8002b1e:	3001      	adds	r0, #1
 8002b20:	d12b      	bne.n	8002b7a <_printf_float+0x242>
 8002b22:	e764      	b.n	80029ee <_printf_float+0xb6>
 8002b24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002b28:	f240 80dd 	bls.w	8002ce6 <_printf_float+0x3ae>
 8002b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002b30:	2200      	movs	r2, #0
 8002b32:	2300      	movs	r3, #0
 8002b34:	f7fd ff38 	bl	80009a8 <__aeabi_dcmpeq>
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d033      	beq.n	8002ba4 <_printf_float+0x26c>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	4631      	mov	r1, r6
 8002b40:	4628      	mov	r0, r5
 8002b42:	4a35      	ldr	r2, [pc, #212]	; (8002c18 <_printf_float+0x2e0>)
 8002b44:	47b8      	blx	r7
 8002b46:	3001      	adds	r0, #1
 8002b48:	f43f af51 	beq.w	80029ee <_printf_float+0xb6>
 8002b4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002b50:	429a      	cmp	r2, r3
 8002b52:	db02      	blt.n	8002b5a <_printf_float+0x222>
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	07d8      	lsls	r0, r3, #31
 8002b58:	d50f      	bpl.n	8002b7a <_printf_float+0x242>
 8002b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b5e:	4631      	mov	r1, r6
 8002b60:	4628      	mov	r0, r5
 8002b62:	47b8      	blx	r7
 8002b64:	3001      	adds	r0, #1
 8002b66:	f43f af42 	beq.w	80029ee <_printf_float+0xb6>
 8002b6a:	f04f 0800 	mov.w	r8, #0
 8002b6e:	f104 091a 	add.w	r9, r4, #26
 8002b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b74:	3b01      	subs	r3, #1
 8002b76:	4543      	cmp	r3, r8
 8002b78:	dc09      	bgt.n	8002b8e <_printf_float+0x256>
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	079b      	lsls	r3, r3, #30
 8002b7e:	f100 8102 	bmi.w	8002d86 <_printf_float+0x44e>
 8002b82:	68e0      	ldr	r0, [r4, #12]
 8002b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b86:	4298      	cmp	r0, r3
 8002b88:	bfb8      	it	lt
 8002b8a:	4618      	movlt	r0, r3
 8002b8c:	e731      	b.n	80029f2 <_printf_float+0xba>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	464a      	mov	r2, r9
 8002b92:	4631      	mov	r1, r6
 8002b94:	4628      	mov	r0, r5
 8002b96:	47b8      	blx	r7
 8002b98:	3001      	adds	r0, #1
 8002b9a:	f43f af28 	beq.w	80029ee <_printf_float+0xb6>
 8002b9e:	f108 0801 	add.w	r8, r8, #1
 8002ba2:	e7e6      	b.n	8002b72 <_printf_float+0x23a>
 8002ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	dc38      	bgt.n	8002c1c <_printf_float+0x2e4>
 8002baa:	2301      	movs	r3, #1
 8002bac:	4631      	mov	r1, r6
 8002bae:	4628      	mov	r0, r5
 8002bb0:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <_printf_float+0x2e0>)
 8002bb2:	47b8      	blx	r7
 8002bb4:	3001      	adds	r0, #1
 8002bb6:	f43f af1a 	beq.w	80029ee <_printf_float+0xb6>
 8002bba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	d102      	bne.n	8002bc8 <_printf_float+0x290>
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	07d9      	lsls	r1, r3, #31
 8002bc6:	d5d8      	bpl.n	8002b7a <_printf_float+0x242>
 8002bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002bcc:	4631      	mov	r1, r6
 8002bce:	4628      	mov	r0, r5
 8002bd0:	47b8      	blx	r7
 8002bd2:	3001      	adds	r0, #1
 8002bd4:	f43f af0b 	beq.w	80029ee <_printf_float+0xb6>
 8002bd8:	f04f 0900 	mov.w	r9, #0
 8002bdc:	f104 0a1a 	add.w	sl, r4, #26
 8002be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002be2:	425b      	negs	r3, r3
 8002be4:	454b      	cmp	r3, r9
 8002be6:	dc01      	bgt.n	8002bec <_printf_float+0x2b4>
 8002be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bea:	e794      	b.n	8002b16 <_printf_float+0x1de>
 8002bec:	2301      	movs	r3, #1
 8002bee:	4652      	mov	r2, sl
 8002bf0:	4631      	mov	r1, r6
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	47b8      	blx	r7
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	f43f aef9 	beq.w	80029ee <_printf_float+0xb6>
 8002bfc:	f109 0901 	add.w	r9, r9, #1
 8002c00:	e7ee      	b.n	8002be0 <_printf_float+0x2a8>
 8002c02:	bf00      	nop
 8002c04:	7fefffff 	.word	0x7fefffff
 8002c08:	08005134 	.word	0x08005134
 8002c0c:	08005138 	.word	0x08005138
 8002c10:	08005140 	.word	0x08005140
 8002c14:	0800513c 	.word	0x0800513c
 8002c18:	08005144 	.word	0x08005144
 8002c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c20:	429a      	cmp	r2, r3
 8002c22:	bfa8      	it	ge
 8002c24:	461a      	movge	r2, r3
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	4691      	mov	r9, r2
 8002c2a:	dc37      	bgt.n	8002c9c <_printf_float+0x364>
 8002c2c:	f04f 0b00 	mov.w	fp, #0
 8002c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c34:	f104 021a 	add.w	r2, r4, #26
 8002c38:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002c3c:	ebaa 0309 	sub.w	r3, sl, r9
 8002c40:	455b      	cmp	r3, fp
 8002c42:	dc33      	bgt.n	8002cac <_printf_float+0x374>
 8002c44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	db3b      	blt.n	8002cc4 <_printf_float+0x38c>
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	07da      	lsls	r2, r3, #31
 8002c50:	d438      	bmi.n	8002cc4 <_printf_float+0x38c>
 8002c52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c56:	eba2 030a 	sub.w	r3, r2, sl
 8002c5a:	eba2 0901 	sub.w	r9, r2, r1
 8002c5e:	4599      	cmp	r9, r3
 8002c60:	bfa8      	it	ge
 8002c62:	4699      	movge	r9, r3
 8002c64:	f1b9 0f00 	cmp.w	r9, #0
 8002c68:	dc34      	bgt.n	8002cd4 <_printf_float+0x39c>
 8002c6a:	f04f 0800 	mov.w	r8, #0
 8002c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c72:	f104 0a1a 	add.w	sl, r4, #26
 8002c76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	eba3 0309 	sub.w	r3, r3, r9
 8002c80:	4543      	cmp	r3, r8
 8002c82:	f77f af7a 	ble.w	8002b7a <_printf_float+0x242>
 8002c86:	2301      	movs	r3, #1
 8002c88:	4652      	mov	r2, sl
 8002c8a:	4631      	mov	r1, r6
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	47b8      	blx	r7
 8002c90:	3001      	adds	r0, #1
 8002c92:	f43f aeac 	beq.w	80029ee <_printf_float+0xb6>
 8002c96:	f108 0801 	add.w	r8, r8, #1
 8002c9a:	e7ec      	b.n	8002c76 <_printf_float+0x33e>
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	4631      	mov	r1, r6
 8002ca0:	4642      	mov	r2, r8
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	47b8      	blx	r7
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	d1c0      	bne.n	8002c2c <_printf_float+0x2f4>
 8002caa:	e6a0      	b.n	80029ee <_printf_float+0xb6>
 8002cac:	2301      	movs	r3, #1
 8002cae:	4631      	mov	r1, r6
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	920b      	str	r2, [sp, #44]	; 0x2c
 8002cb4:	47b8      	blx	r7
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	f43f ae99 	beq.w	80029ee <_printf_float+0xb6>
 8002cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002cbe:	f10b 0b01 	add.w	fp, fp, #1
 8002cc2:	e7b9      	b.n	8002c38 <_printf_float+0x300>
 8002cc4:	4631      	mov	r1, r6
 8002cc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002cca:	4628      	mov	r0, r5
 8002ccc:	47b8      	blx	r7
 8002cce:	3001      	adds	r0, #1
 8002cd0:	d1bf      	bne.n	8002c52 <_printf_float+0x31a>
 8002cd2:	e68c      	b.n	80029ee <_printf_float+0xb6>
 8002cd4:	464b      	mov	r3, r9
 8002cd6:	4631      	mov	r1, r6
 8002cd8:	4628      	mov	r0, r5
 8002cda:	eb08 020a 	add.w	r2, r8, sl
 8002cde:	47b8      	blx	r7
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	d1c2      	bne.n	8002c6a <_printf_float+0x332>
 8002ce4:	e683      	b.n	80029ee <_printf_float+0xb6>
 8002ce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ce8:	2a01      	cmp	r2, #1
 8002cea:	dc01      	bgt.n	8002cf0 <_printf_float+0x3b8>
 8002cec:	07db      	lsls	r3, r3, #31
 8002cee:	d537      	bpl.n	8002d60 <_printf_float+0x428>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	4642      	mov	r2, r8
 8002cf4:	4631      	mov	r1, r6
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	47b8      	blx	r7
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	f43f ae77 	beq.w	80029ee <_printf_float+0xb6>
 8002d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d04:	4631      	mov	r1, r6
 8002d06:	4628      	mov	r0, r5
 8002d08:	47b8      	blx	r7
 8002d0a:	3001      	adds	r0, #1
 8002d0c:	f43f ae6f 	beq.w	80029ee <_printf_float+0xb6>
 8002d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d14:	2200      	movs	r2, #0
 8002d16:	2300      	movs	r3, #0
 8002d18:	f7fd fe46 	bl	80009a8 <__aeabi_dcmpeq>
 8002d1c:	b9d8      	cbnz	r0, 8002d56 <_printf_float+0x41e>
 8002d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d20:	f108 0201 	add.w	r2, r8, #1
 8002d24:	3b01      	subs	r3, #1
 8002d26:	4631      	mov	r1, r6
 8002d28:	4628      	mov	r0, r5
 8002d2a:	47b8      	blx	r7
 8002d2c:	3001      	adds	r0, #1
 8002d2e:	d10e      	bne.n	8002d4e <_printf_float+0x416>
 8002d30:	e65d      	b.n	80029ee <_printf_float+0xb6>
 8002d32:	2301      	movs	r3, #1
 8002d34:	464a      	mov	r2, r9
 8002d36:	4631      	mov	r1, r6
 8002d38:	4628      	mov	r0, r5
 8002d3a:	47b8      	blx	r7
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	f43f ae56 	beq.w	80029ee <_printf_float+0xb6>
 8002d42:	f108 0801 	add.w	r8, r8, #1
 8002d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	4543      	cmp	r3, r8
 8002d4c:	dcf1      	bgt.n	8002d32 <_printf_float+0x3fa>
 8002d4e:	4653      	mov	r3, sl
 8002d50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002d54:	e6e0      	b.n	8002b18 <_printf_float+0x1e0>
 8002d56:	f04f 0800 	mov.w	r8, #0
 8002d5a:	f104 091a 	add.w	r9, r4, #26
 8002d5e:	e7f2      	b.n	8002d46 <_printf_float+0x40e>
 8002d60:	2301      	movs	r3, #1
 8002d62:	4642      	mov	r2, r8
 8002d64:	e7df      	b.n	8002d26 <_printf_float+0x3ee>
 8002d66:	2301      	movs	r3, #1
 8002d68:	464a      	mov	r2, r9
 8002d6a:	4631      	mov	r1, r6
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	47b8      	blx	r7
 8002d70:	3001      	adds	r0, #1
 8002d72:	f43f ae3c 	beq.w	80029ee <_printf_float+0xb6>
 8002d76:	f108 0801 	add.w	r8, r8, #1
 8002d7a:	68e3      	ldr	r3, [r4, #12]
 8002d7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002d7e:	1a5b      	subs	r3, r3, r1
 8002d80:	4543      	cmp	r3, r8
 8002d82:	dcf0      	bgt.n	8002d66 <_printf_float+0x42e>
 8002d84:	e6fd      	b.n	8002b82 <_printf_float+0x24a>
 8002d86:	f04f 0800 	mov.w	r8, #0
 8002d8a:	f104 0919 	add.w	r9, r4, #25
 8002d8e:	e7f4      	b.n	8002d7a <_printf_float+0x442>

08002d90 <_printf_common>:
 8002d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d94:	4616      	mov	r6, r2
 8002d96:	4699      	mov	r9, r3
 8002d98:	688a      	ldr	r2, [r1, #8]
 8002d9a:	690b      	ldr	r3, [r1, #16]
 8002d9c:	4607      	mov	r7, r0
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	bfb8      	it	lt
 8002da2:	4613      	movlt	r3, r2
 8002da4:	6033      	str	r3, [r6, #0]
 8002da6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002daa:	460c      	mov	r4, r1
 8002dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002db0:	b10a      	cbz	r2, 8002db6 <_printf_common+0x26>
 8002db2:	3301      	adds	r3, #1
 8002db4:	6033      	str	r3, [r6, #0]
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	0699      	lsls	r1, r3, #26
 8002dba:	bf42      	ittt	mi
 8002dbc:	6833      	ldrmi	r3, [r6, #0]
 8002dbe:	3302      	addmi	r3, #2
 8002dc0:	6033      	strmi	r3, [r6, #0]
 8002dc2:	6825      	ldr	r5, [r4, #0]
 8002dc4:	f015 0506 	ands.w	r5, r5, #6
 8002dc8:	d106      	bne.n	8002dd8 <_printf_common+0x48>
 8002dca:	f104 0a19 	add.w	sl, r4, #25
 8002dce:	68e3      	ldr	r3, [r4, #12]
 8002dd0:	6832      	ldr	r2, [r6, #0]
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	42ab      	cmp	r3, r5
 8002dd6:	dc28      	bgt.n	8002e2a <_printf_common+0x9a>
 8002dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ddc:	1e13      	subs	r3, r2, #0
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	bf18      	it	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	0692      	lsls	r2, r2, #26
 8002de6:	d42d      	bmi.n	8002e44 <_printf_common+0xb4>
 8002de8:	4649      	mov	r1, r9
 8002dea:	4638      	mov	r0, r7
 8002dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002df0:	47c0      	blx	r8
 8002df2:	3001      	adds	r0, #1
 8002df4:	d020      	beq.n	8002e38 <_printf_common+0xa8>
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	68e5      	ldr	r5, [r4, #12]
 8002dfa:	f003 0306 	and.w	r3, r3, #6
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	bf18      	it	ne
 8002e02:	2500      	movne	r5, #0
 8002e04:	6832      	ldr	r2, [r6, #0]
 8002e06:	f04f 0600 	mov.w	r6, #0
 8002e0a:	68a3      	ldr	r3, [r4, #8]
 8002e0c:	bf08      	it	eq
 8002e0e:	1aad      	subeq	r5, r5, r2
 8002e10:	6922      	ldr	r2, [r4, #16]
 8002e12:	bf08      	it	eq
 8002e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bfc4      	itt	gt
 8002e1c:	1a9b      	subgt	r3, r3, r2
 8002e1e:	18ed      	addgt	r5, r5, r3
 8002e20:	341a      	adds	r4, #26
 8002e22:	42b5      	cmp	r5, r6
 8002e24:	d11a      	bne.n	8002e5c <_printf_common+0xcc>
 8002e26:	2000      	movs	r0, #0
 8002e28:	e008      	b.n	8002e3c <_printf_common+0xac>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	4652      	mov	r2, sl
 8002e2e:	4649      	mov	r1, r9
 8002e30:	4638      	mov	r0, r7
 8002e32:	47c0      	blx	r8
 8002e34:	3001      	adds	r0, #1
 8002e36:	d103      	bne.n	8002e40 <_printf_common+0xb0>
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e40:	3501      	adds	r5, #1
 8002e42:	e7c4      	b.n	8002dce <_printf_common+0x3e>
 8002e44:	2030      	movs	r0, #48	; 0x30
 8002e46:	18e1      	adds	r1, r4, r3
 8002e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e52:	4422      	add	r2, r4
 8002e54:	3302      	adds	r3, #2
 8002e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e5a:	e7c5      	b.n	8002de8 <_printf_common+0x58>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	4622      	mov	r2, r4
 8002e60:	4649      	mov	r1, r9
 8002e62:	4638      	mov	r0, r7
 8002e64:	47c0      	blx	r8
 8002e66:	3001      	adds	r0, #1
 8002e68:	d0e6      	beq.n	8002e38 <_printf_common+0xa8>
 8002e6a:	3601      	adds	r6, #1
 8002e6c:	e7d9      	b.n	8002e22 <_printf_common+0x92>
	...

08002e70 <_printf_i>:
 8002e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e74:	460c      	mov	r4, r1
 8002e76:	7e27      	ldrb	r7, [r4, #24]
 8002e78:	4691      	mov	r9, r2
 8002e7a:	2f78      	cmp	r7, #120	; 0x78
 8002e7c:	4680      	mov	r8, r0
 8002e7e:	469a      	mov	sl, r3
 8002e80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e86:	d807      	bhi.n	8002e98 <_printf_i+0x28>
 8002e88:	2f62      	cmp	r7, #98	; 0x62
 8002e8a:	d80a      	bhi.n	8002ea2 <_printf_i+0x32>
 8002e8c:	2f00      	cmp	r7, #0
 8002e8e:	f000 80d9 	beq.w	8003044 <_printf_i+0x1d4>
 8002e92:	2f58      	cmp	r7, #88	; 0x58
 8002e94:	f000 80a4 	beq.w	8002fe0 <_printf_i+0x170>
 8002e98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ea0:	e03a      	b.n	8002f18 <_printf_i+0xa8>
 8002ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ea6:	2b15      	cmp	r3, #21
 8002ea8:	d8f6      	bhi.n	8002e98 <_printf_i+0x28>
 8002eaa:	a001      	add	r0, pc, #4	; (adr r0, 8002eb0 <_printf_i+0x40>)
 8002eac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002eb0:	08002f09 	.word	0x08002f09
 8002eb4:	08002f1d 	.word	0x08002f1d
 8002eb8:	08002e99 	.word	0x08002e99
 8002ebc:	08002e99 	.word	0x08002e99
 8002ec0:	08002e99 	.word	0x08002e99
 8002ec4:	08002e99 	.word	0x08002e99
 8002ec8:	08002f1d 	.word	0x08002f1d
 8002ecc:	08002e99 	.word	0x08002e99
 8002ed0:	08002e99 	.word	0x08002e99
 8002ed4:	08002e99 	.word	0x08002e99
 8002ed8:	08002e99 	.word	0x08002e99
 8002edc:	0800302b 	.word	0x0800302b
 8002ee0:	08002f4d 	.word	0x08002f4d
 8002ee4:	0800300d 	.word	0x0800300d
 8002ee8:	08002e99 	.word	0x08002e99
 8002eec:	08002e99 	.word	0x08002e99
 8002ef0:	0800304d 	.word	0x0800304d
 8002ef4:	08002e99 	.word	0x08002e99
 8002ef8:	08002f4d 	.word	0x08002f4d
 8002efc:	08002e99 	.word	0x08002e99
 8002f00:	08002e99 	.word	0x08002e99
 8002f04:	08003015 	.word	0x08003015
 8002f08:	680b      	ldr	r3, [r1, #0]
 8002f0a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f0e:	1d1a      	adds	r2, r3, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	600a      	str	r2, [r1, #0]
 8002f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0a4      	b.n	8003066 <_printf_i+0x1f6>
 8002f1c:	6825      	ldr	r5, [r4, #0]
 8002f1e:	6808      	ldr	r0, [r1, #0]
 8002f20:	062e      	lsls	r6, r5, #24
 8002f22:	f100 0304 	add.w	r3, r0, #4
 8002f26:	d50a      	bpl.n	8002f3e <_printf_i+0xce>
 8002f28:	6805      	ldr	r5, [r0, #0]
 8002f2a:	600b      	str	r3, [r1, #0]
 8002f2c:	2d00      	cmp	r5, #0
 8002f2e:	da03      	bge.n	8002f38 <_printf_i+0xc8>
 8002f30:	232d      	movs	r3, #45	; 0x2d
 8002f32:	426d      	negs	r5, r5
 8002f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f38:	230a      	movs	r3, #10
 8002f3a:	485e      	ldr	r0, [pc, #376]	; (80030b4 <_printf_i+0x244>)
 8002f3c:	e019      	b.n	8002f72 <_printf_i+0x102>
 8002f3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f42:	6805      	ldr	r5, [r0, #0]
 8002f44:	600b      	str	r3, [r1, #0]
 8002f46:	bf18      	it	ne
 8002f48:	b22d      	sxthne	r5, r5
 8002f4a:	e7ef      	b.n	8002f2c <_printf_i+0xbc>
 8002f4c:	680b      	ldr	r3, [r1, #0]
 8002f4e:	6825      	ldr	r5, [r4, #0]
 8002f50:	1d18      	adds	r0, r3, #4
 8002f52:	6008      	str	r0, [r1, #0]
 8002f54:	0628      	lsls	r0, r5, #24
 8002f56:	d501      	bpl.n	8002f5c <_printf_i+0xec>
 8002f58:	681d      	ldr	r5, [r3, #0]
 8002f5a:	e002      	b.n	8002f62 <_printf_i+0xf2>
 8002f5c:	0669      	lsls	r1, r5, #25
 8002f5e:	d5fb      	bpl.n	8002f58 <_printf_i+0xe8>
 8002f60:	881d      	ldrh	r5, [r3, #0]
 8002f62:	2f6f      	cmp	r7, #111	; 0x6f
 8002f64:	bf0c      	ite	eq
 8002f66:	2308      	moveq	r3, #8
 8002f68:	230a      	movne	r3, #10
 8002f6a:	4852      	ldr	r0, [pc, #328]	; (80030b4 <_printf_i+0x244>)
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f72:	6866      	ldr	r6, [r4, #4]
 8002f74:	2e00      	cmp	r6, #0
 8002f76:	bfa8      	it	ge
 8002f78:	6821      	ldrge	r1, [r4, #0]
 8002f7a:	60a6      	str	r6, [r4, #8]
 8002f7c:	bfa4      	itt	ge
 8002f7e:	f021 0104 	bicge.w	r1, r1, #4
 8002f82:	6021      	strge	r1, [r4, #0]
 8002f84:	b90d      	cbnz	r5, 8002f8a <_printf_i+0x11a>
 8002f86:	2e00      	cmp	r6, #0
 8002f88:	d04d      	beq.n	8003026 <_printf_i+0x1b6>
 8002f8a:	4616      	mov	r6, r2
 8002f8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f90:	fb03 5711 	mls	r7, r3, r1, r5
 8002f94:	5dc7      	ldrb	r7, [r0, r7]
 8002f96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f9a:	462f      	mov	r7, r5
 8002f9c:	42bb      	cmp	r3, r7
 8002f9e:	460d      	mov	r5, r1
 8002fa0:	d9f4      	bls.n	8002f8c <_printf_i+0x11c>
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d10b      	bne.n	8002fbe <_printf_i+0x14e>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	07df      	lsls	r7, r3, #31
 8002faa:	d508      	bpl.n	8002fbe <_printf_i+0x14e>
 8002fac:	6923      	ldr	r3, [r4, #16]
 8002fae:	6861      	ldr	r1, [r4, #4]
 8002fb0:	4299      	cmp	r1, r3
 8002fb2:	bfde      	ittt	le
 8002fb4:	2330      	movle	r3, #48	; 0x30
 8002fb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002fbe:	1b92      	subs	r2, r2, r6
 8002fc0:	6122      	str	r2, [r4, #16]
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	4640      	mov	r0, r8
 8002fc8:	f8cd a000 	str.w	sl, [sp]
 8002fcc:	aa03      	add	r2, sp, #12
 8002fce:	f7ff fedf 	bl	8002d90 <_printf_common>
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	d14c      	bne.n	8003070 <_printf_i+0x200>
 8002fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fda:	b004      	add	sp, #16
 8002fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe0:	4834      	ldr	r0, [pc, #208]	; (80030b4 <_printf_i+0x244>)
 8002fe2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002fe6:	680e      	ldr	r6, [r1, #0]
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	f856 5b04 	ldr.w	r5, [r6], #4
 8002fee:	061f      	lsls	r7, r3, #24
 8002ff0:	600e      	str	r6, [r1, #0]
 8002ff2:	d514      	bpl.n	800301e <_printf_i+0x1ae>
 8002ff4:	07d9      	lsls	r1, r3, #31
 8002ff6:	bf44      	itt	mi
 8002ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8002ffc:	6023      	strmi	r3, [r4, #0]
 8002ffe:	b91d      	cbnz	r5, 8003008 <_printf_i+0x198>
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	f023 0320 	bic.w	r3, r3, #32
 8003006:	6023      	str	r3, [r4, #0]
 8003008:	2310      	movs	r3, #16
 800300a:	e7af      	b.n	8002f6c <_printf_i+0xfc>
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	f043 0320 	orr.w	r3, r3, #32
 8003012:	6023      	str	r3, [r4, #0]
 8003014:	2378      	movs	r3, #120	; 0x78
 8003016:	4828      	ldr	r0, [pc, #160]	; (80030b8 <_printf_i+0x248>)
 8003018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800301c:	e7e3      	b.n	8002fe6 <_printf_i+0x176>
 800301e:	065e      	lsls	r6, r3, #25
 8003020:	bf48      	it	mi
 8003022:	b2ad      	uxthmi	r5, r5
 8003024:	e7e6      	b.n	8002ff4 <_printf_i+0x184>
 8003026:	4616      	mov	r6, r2
 8003028:	e7bb      	b.n	8002fa2 <_printf_i+0x132>
 800302a:	680b      	ldr	r3, [r1, #0]
 800302c:	6826      	ldr	r6, [r4, #0]
 800302e:	1d1d      	adds	r5, r3, #4
 8003030:	6960      	ldr	r0, [r4, #20]
 8003032:	600d      	str	r5, [r1, #0]
 8003034:	0635      	lsls	r5, r6, #24
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	d501      	bpl.n	800303e <_printf_i+0x1ce>
 800303a:	6018      	str	r0, [r3, #0]
 800303c:	e002      	b.n	8003044 <_printf_i+0x1d4>
 800303e:	0671      	lsls	r1, r6, #25
 8003040:	d5fb      	bpl.n	800303a <_printf_i+0x1ca>
 8003042:	8018      	strh	r0, [r3, #0]
 8003044:	2300      	movs	r3, #0
 8003046:	4616      	mov	r6, r2
 8003048:	6123      	str	r3, [r4, #16]
 800304a:	e7ba      	b.n	8002fc2 <_printf_i+0x152>
 800304c:	680b      	ldr	r3, [r1, #0]
 800304e:	1d1a      	adds	r2, r3, #4
 8003050:	600a      	str	r2, [r1, #0]
 8003052:	681e      	ldr	r6, [r3, #0]
 8003054:	2100      	movs	r1, #0
 8003056:	4630      	mov	r0, r6
 8003058:	6862      	ldr	r2, [r4, #4]
 800305a:	f000 ffea 	bl	8004032 <memchr>
 800305e:	b108      	cbz	r0, 8003064 <_printf_i+0x1f4>
 8003060:	1b80      	subs	r0, r0, r6
 8003062:	6060      	str	r0, [r4, #4]
 8003064:	6863      	ldr	r3, [r4, #4]
 8003066:	6123      	str	r3, [r4, #16]
 8003068:	2300      	movs	r3, #0
 800306a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800306e:	e7a8      	b.n	8002fc2 <_printf_i+0x152>
 8003070:	4632      	mov	r2, r6
 8003072:	4649      	mov	r1, r9
 8003074:	4640      	mov	r0, r8
 8003076:	6923      	ldr	r3, [r4, #16]
 8003078:	47d0      	blx	sl
 800307a:	3001      	adds	r0, #1
 800307c:	d0ab      	beq.n	8002fd6 <_printf_i+0x166>
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	079b      	lsls	r3, r3, #30
 8003082:	d413      	bmi.n	80030ac <_printf_i+0x23c>
 8003084:	68e0      	ldr	r0, [r4, #12]
 8003086:	9b03      	ldr	r3, [sp, #12]
 8003088:	4298      	cmp	r0, r3
 800308a:	bfb8      	it	lt
 800308c:	4618      	movlt	r0, r3
 800308e:	e7a4      	b.n	8002fda <_printf_i+0x16a>
 8003090:	2301      	movs	r3, #1
 8003092:	4632      	mov	r2, r6
 8003094:	4649      	mov	r1, r9
 8003096:	4640      	mov	r0, r8
 8003098:	47d0      	blx	sl
 800309a:	3001      	adds	r0, #1
 800309c:	d09b      	beq.n	8002fd6 <_printf_i+0x166>
 800309e:	3501      	adds	r5, #1
 80030a0:	68e3      	ldr	r3, [r4, #12]
 80030a2:	9903      	ldr	r1, [sp, #12]
 80030a4:	1a5b      	subs	r3, r3, r1
 80030a6:	42ab      	cmp	r3, r5
 80030a8:	dcf2      	bgt.n	8003090 <_printf_i+0x220>
 80030aa:	e7eb      	b.n	8003084 <_printf_i+0x214>
 80030ac:	2500      	movs	r5, #0
 80030ae:	f104 0619 	add.w	r6, r4, #25
 80030b2:	e7f5      	b.n	80030a0 <_printf_i+0x230>
 80030b4:	08005146 	.word	0x08005146
 80030b8:	08005157 	.word	0x08005157

080030bc <_sbrk_r>:
 80030bc:	b538      	push	{r3, r4, r5, lr}
 80030be:	2300      	movs	r3, #0
 80030c0:	4d05      	ldr	r5, [pc, #20]	; (80030d8 <_sbrk_r+0x1c>)
 80030c2:	4604      	mov	r4, r0
 80030c4:	4608      	mov	r0, r1
 80030c6:	602b      	str	r3, [r5, #0]
 80030c8:	f001 ffec 	bl	80050a4 <_sbrk>
 80030cc:	1c43      	adds	r3, r0, #1
 80030ce:	d102      	bne.n	80030d6 <_sbrk_r+0x1a>
 80030d0:	682b      	ldr	r3, [r5, #0]
 80030d2:	b103      	cbz	r3, 80030d6 <_sbrk_r+0x1a>
 80030d4:	6023      	str	r3, [r4, #0]
 80030d6:	bd38      	pop	{r3, r4, r5, pc}
 80030d8:	200011b4 	.word	0x200011b4

080030dc <__assert_func>:
 80030dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80030de:	4614      	mov	r4, r2
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <__assert_func+0x2c>)
 80030e4:	4605      	mov	r5, r0
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68d8      	ldr	r0, [r3, #12]
 80030ea:	b14c      	cbz	r4, 8003100 <__assert_func+0x24>
 80030ec:	4b07      	ldr	r3, [pc, #28]	; (800310c <__assert_func+0x30>)
 80030ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80030f2:	9100      	str	r1, [sp, #0]
 80030f4:	462b      	mov	r3, r5
 80030f6:	4906      	ldr	r1, [pc, #24]	; (8003110 <__assert_func+0x34>)
 80030f8:	f000 ff62 	bl	8003fc0 <fiprintf>
 80030fc:	f001 fdb2 	bl	8004c64 <abort>
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <__assert_func+0x38>)
 8003102:	461c      	mov	r4, r3
 8003104:	e7f3      	b.n	80030ee <__assert_func+0x12>
 8003106:	bf00      	nop
 8003108:	20000004 	.word	0x20000004
 800310c:	08005168 	.word	0x08005168
 8003110:	08005175 	.word	0x08005175
 8003114:	080051a3 	.word	0x080051a3

08003118 <quorem>:
 8003118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311c:	6903      	ldr	r3, [r0, #16]
 800311e:	690c      	ldr	r4, [r1, #16]
 8003120:	4607      	mov	r7, r0
 8003122:	42a3      	cmp	r3, r4
 8003124:	f2c0 8083 	blt.w	800322e <quorem+0x116>
 8003128:	3c01      	subs	r4, #1
 800312a:	f100 0514 	add.w	r5, r0, #20
 800312e:	f101 0814 	add.w	r8, r1, #20
 8003132:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800313c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003140:	3301      	adds	r3, #1
 8003142:	429a      	cmp	r2, r3
 8003144:	fbb2 f6f3 	udiv	r6, r2, r3
 8003148:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800314c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003150:	d332      	bcc.n	80031b8 <quorem+0xa0>
 8003152:	f04f 0e00 	mov.w	lr, #0
 8003156:	4640      	mov	r0, r8
 8003158:	46ac      	mov	ip, r5
 800315a:	46f2      	mov	sl, lr
 800315c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003160:	b293      	uxth	r3, r2
 8003162:	fb06 e303 	mla	r3, r6, r3, lr
 8003166:	0c12      	lsrs	r2, r2, #16
 8003168:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800316c:	fb06 e202 	mla	r2, r6, r2, lr
 8003170:	b29b      	uxth	r3, r3
 8003172:	ebaa 0303 	sub.w	r3, sl, r3
 8003176:	f8dc a000 	ldr.w	sl, [ip]
 800317a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800317e:	fa1f fa8a 	uxth.w	sl, sl
 8003182:	4453      	add	r3, sl
 8003184:	fa1f fa82 	uxth.w	sl, r2
 8003188:	f8dc 2000 	ldr.w	r2, [ip]
 800318c:	4581      	cmp	r9, r0
 800318e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003192:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003196:	b29b      	uxth	r3, r3
 8003198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800319c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80031a0:	f84c 3b04 	str.w	r3, [ip], #4
 80031a4:	d2da      	bcs.n	800315c <quorem+0x44>
 80031a6:	f855 300b 	ldr.w	r3, [r5, fp]
 80031aa:	b92b      	cbnz	r3, 80031b8 <quorem+0xa0>
 80031ac:	9b01      	ldr	r3, [sp, #4]
 80031ae:	3b04      	subs	r3, #4
 80031b0:	429d      	cmp	r5, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	d32f      	bcc.n	8003216 <quorem+0xfe>
 80031b6:	613c      	str	r4, [r7, #16]
 80031b8:	4638      	mov	r0, r7
 80031ba:	f001 f9cf 	bl	800455c <__mcmp>
 80031be:	2800      	cmp	r0, #0
 80031c0:	db25      	blt.n	800320e <quorem+0xf6>
 80031c2:	4628      	mov	r0, r5
 80031c4:	f04f 0c00 	mov.w	ip, #0
 80031c8:	3601      	adds	r6, #1
 80031ca:	f858 1b04 	ldr.w	r1, [r8], #4
 80031ce:	f8d0 e000 	ldr.w	lr, [r0]
 80031d2:	b28b      	uxth	r3, r1
 80031d4:	ebac 0303 	sub.w	r3, ip, r3
 80031d8:	fa1f f28e 	uxth.w	r2, lr
 80031dc:	4413      	add	r3, r2
 80031de:	0c0a      	lsrs	r2, r1, #16
 80031e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80031e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031ee:	45c1      	cmp	r9, r8
 80031f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80031f4:	f840 3b04 	str.w	r3, [r0], #4
 80031f8:	d2e7      	bcs.n	80031ca <quorem+0xb2>
 80031fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80031fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003202:	b922      	cbnz	r2, 800320e <quorem+0xf6>
 8003204:	3b04      	subs	r3, #4
 8003206:	429d      	cmp	r5, r3
 8003208:	461a      	mov	r2, r3
 800320a:	d30a      	bcc.n	8003222 <quorem+0x10a>
 800320c:	613c      	str	r4, [r7, #16]
 800320e:	4630      	mov	r0, r6
 8003210:	b003      	add	sp, #12
 8003212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	3b04      	subs	r3, #4
 800321a:	2a00      	cmp	r2, #0
 800321c:	d1cb      	bne.n	80031b6 <quorem+0x9e>
 800321e:	3c01      	subs	r4, #1
 8003220:	e7c6      	b.n	80031b0 <quorem+0x98>
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	3b04      	subs	r3, #4
 8003226:	2a00      	cmp	r2, #0
 8003228:	d1f0      	bne.n	800320c <quorem+0xf4>
 800322a:	3c01      	subs	r4, #1
 800322c:	e7eb      	b.n	8003206 <quorem+0xee>
 800322e:	2000      	movs	r0, #0
 8003230:	e7ee      	b.n	8003210 <quorem+0xf8>
 8003232:	0000      	movs	r0, r0
 8003234:	0000      	movs	r0, r0
	...

08003238 <_dtoa_r>:
 8003238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800323c:	4616      	mov	r6, r2
 800323e:	461f      	mov	r7, r3
 8003240:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003242:	b099      	sub	sp, #100	; 0x64
 8003244:	4605      	mov	r5, r0
 8003246:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800324a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800324e:	b974      	cbnz	r4, 800326e <_dtoa_r+0x36>
 8003250:	2010      	movs	r0, #16
 8003252:	f7ff fa0f 	bl	8002674 <malloc>
 8003256:	4602      	mov	r2, r0
 8003258:	6268      	str	r0, [r5, #36]	; 0x24
 800325a:	b920      	cbnz	r0, 8003266 <_dtoa_r+0x2e>
 800325c:	21ea      	movs	r1, #234	; 0xea
 800325e:	4bae      	ldr	r3, [pc, #696]	; (8003518 <_dtoa_r+0x2e0>)
 8003260:	48ae      	ldr	r0, [pc, #696]	; (800351c <_dtoa_r+0x2e4>)
 8003262:	f7ff ff3b 	bl	80030dc <__assert_func>
 8003266:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800326a:	6004      	str	r4, [r0, #0]
 800326c:	60c4      	str	r4, [r0, #12]
 800326e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	b151      	cbz	r1, 800328a <_dtoa_r+0x52>
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	2301      	movs	r3, #1
 8003278:	4093      	lsls	r3, r2
 800327a:	604a      	str	r2, [r1, #4]
 800327c:	608b      	str	r3, [r1, #8]
 800327e:	4628      	mov	r0, r5
 8003280:	f000 ff32 	bl	80040e8 <_Bfree>
 8003284:	2200      	movs	r2, #0
 8003286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	1e3b      	subs	r3, r7, #0
 800328c:	bfaf      	iteee	ge
 800328e:	2300      	movge	r3, #0
 8003290:	2201      	movlt	r2, #1
 8003292:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003296:	9305      	strlt	r3, [sp, #20]
 8003298:	bfa8      	it	ge
 800329a:	f8c8 3000 	strge.w	r3, [r8]
 800329e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80032a2:	4b9f      	ldr	r3, [pc, #636]	; (8003520 <_dtoa_r+0x2e8>)
 80032a4:	bfb8      	it	lt
 80032a6:	f8c8 2000 	strlt.w	r2, [r8]
 80032aa:	ea33 0309 	bics.w	r3, r3, r9
 80032ae:	d119      	bne.n	80032e4 <_dtoa_r+0xac>
 80032b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80032b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80032bc:	4333      	orrs	r3, r6
 80032be:	f000 8580 	beq.w	8003dc2 <_dtoa_r+0xb8a>
 80032c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80032c4:	b953      	cbnz	r3, 80032dc <_dtoa_r+0xa4>
 80032c6:	4b97      	ldr	r3, [pc, #604]	; (8003524 <_dtoa_r+0x2ec>)
 80032c8:	e022      	b.n	8003310 <_dtoa_r+0xd8>
 80032ca:	4b97      	ldr	r3, [pc, #604]	; (8003528 <_dtoa_r+0x2f0>)
 80032cc:	9308      	str	r3, [sp, #32]
 80032ce:	3308      	adds	r3, #8
 80032d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	9808      	ldr	r0, [sp, #32]
 80032d6:	b019      	add	sp, #100	; 0x64
 80032d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032dc:	4b91      	ldr	r3, [pc, #580]	; (8003524 <_dtoa_r+0x2ec>)
 80032de:	9308      	str	r3, [sp, #32]
 80032e0:	3303      	adds	r3, #3
 80032e2:	e7f5      	b.n	80032d0 <_dtoa_r+0x98>
 80032e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80032e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80032ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80032f0:	2200      	movs	r2, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	f7fd fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80032f8:	4680      	mov	r8, r0
 80032fa:	b158      	cbz	r0, 8003314 <_dtoa_r+0xdc>
 80032fc:	2301      	movs	r3, #1
 80032fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8559 	beq.w	8003dbc <_dtoa_r+0xb84>
 800330a:	4888      	ldr	r0, [pc, #544]	; (800352c <_dtoa_r+0x2f4>)
 800330c:	6018      	str	r0, [r3, #0]
 800330e:	1e43      	subs	r3, r0, #1
 8003310:	9308      	str	r3, [sp, #32]
 8003312:	e7df      	b.n	80032d4 <_dtoa_r+0x9c>
 8003314:	ab16      	add	r3, sp, #88	; 0x58
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	ab17      	add	r3, sp, #92	; 0x5c
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	4628      	mov	r0, r5
 800331e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003322:	f001 f9c7 	bl	80046b4 <__d2b>
 8003326:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800332a:	4682      	mov	sl, r0
 800332c:	2c00      	cmp	r4, #0
 800332e:	d07e      	beq.n	800342e <_dtoa_r+0x1f6>
 8003330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003336:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800333a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800333e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003342:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003346:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800334a:	2200      	movs	r2, #0
 800334c:	4b78      	ldr	r3, [pc, #480]	; (8003530 <_dtoa_r+0x2f8>)
 800334e:	f7fc ff0b 	bl	8000168 <__aeabi_dsub>
 8003352:	a36b      	add	r3, pc, #428	; (adr r3, 8003500 <_dtoa_r+0x2c8>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fd f8be 	bl	80004d8 <__aeabi_dmul>
 800335c:	a36a      	add	r3, pc, #424	; (adr r3, 8003508 <_dtoa_r+0x2d0>)
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f7fc ff03 	bl	800016c <__adddf3>
 8003366:	4606      	mov	r6, r0
 8003368:	4620      	mov	r0, r4
 800336a:	460f      	mov	r7, r1
 800336c:	f7fd f84a 	bl	8000404 <__aeabi_i2d>
 8003370:	a367      	add	r3, pc, #412	; (adr r3, 8003510 <_dtoa_r+0x2d8>)
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	f7fd f8af 	bl	80004d8 <__aeabi_dmul>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4630      	mov	r0, r6
 8003380:	4639      	mov	r1, r7
 8003382:	f7fc fef3 	bl	800016c <__adddf3>
 8003386:	4606      	mov	r6, r0
 8003388:	460f      	mov	r7, r1
 800338a:	f7fd fb55 	bl	8000a38 <__aeabi_d2iz>
 800338e:	2200      	movs	r2, #0
 8003390:	4681      	mov	r9, r0
 8003392:	2300      	movs	r3, #0
 8003394:	4630      	mov	r0, r6
 8003396:	4639      	mov	r1, r7
 8003398:	f7fd fb10 	bl	80009bc <__aeabi_dcmplt>
 800339c:	b148      	cbz	r0, 80033b2 <_dtoa_r+0x17a>
 800339e:	4648      	mov	r0, r9
 80033a0:	f7fd f830 	bl	8000404 <__aeabi_i2d>
 80033a4:	4632      	mov	r2, r6
 80033a6:	463b      	mov	r3, r7
 80033a8:	f7fd fafe 	bl	80009a8 <__aeabi_dcmpeq>
 80033ac:	b908      	cbnz	r0, 80033b2 <_dtoa_r+0x17a>
 80033ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80033b2:	f1b9 0f16 	cmp.w	r9, #22
 80033b6:	d857      	bhi.n	8003468 <_dtoa_r+0x230>
 80033b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80033bc:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <_dtoa_r+0x2fc>)
 80033be:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	f7fd faf9 	bl	80009bc <__aeabi_dcmplt>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d04e      	beq.n	800346c <_dtoa_r+0x234>
 80033ce:	2300      	movs	r3, #0
 80033d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80033d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80033d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80033d8:	1b1c      	subs	r4, r3, r4
 80033da:	1e63      	subs	r3, r4, #1
 80033dc:	9309      	str	r3, [sp, #36]	; 0x24
 80033de:	bf49      	itett	mi
 80033e0:	f1c4 0301 	rsbmi	r3, r4, #1
 80033e4:	2300      	movpl	r3, #0
 80033e6:	9306      	strmi	r3, [sp, #24]
 80033e8:	2300      	movmi	r3, #0
 80033ea:	bf54      	ite	pl
 80033ec:	9306      	strpl	r3, [sp, #24]
 80033ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 80033f0:	f1b9 0f00 	cmp.w	r9, #0
 80033f4:	db3c      	blt.n	8003470 <_dtoa_r+0x238>
 80033f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80033fc:	444b      	add	r3, r9
 80033fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003400:	2300      	movs	r3, #0
 8003402:	930a      	str	r3, [sp, #40]	; 0x28
 8003404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003406:	2b09      	cmp	r3, #9
 8003408:	d86c      	bhi.n	80034e4 <_dtoa_r+0x2ac>
 800340a:	2b05      	cmp	r3, #5
 800340c:	bfc4      	itt	gt
 800340e:	3b04      	subgt	r3, #4
 8003410:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003412:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003414:	bfc8      	it	gt
 8003416:	2400      	movgt	r4, #0
 8003418:	f1a3 0302 	sub.w	r3, r3, #2
 800341c:	bfd8      	it	le
 800341e:	2401      	movle	r4, #1
 8003420:	2b03      	cmp	r3, #3
 8003422:	f200 808b 	bhi.w	800353c <_dtoa_r+0x304>
 8003426:	e8df f003 	tbb	[pc, r3]
 800342a:	4f2d      	.short	0x4f2d
 800342c:	5b4d      	.short	0x5b4d
 800342e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003432:	441c      	add	r4, r3
 8003434:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003438:	2b20      	cmp	r3, #32
 800343a:	bfc3      	ittte	gt
 800343c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003440:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003444:	fa09 f303 	lslgt.w	r3, r9, r3
 8003448:	f1c3 0320 	rsble	r3, r3, #32
 800344c:	bfc6      	itte	gt
 800344e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003452:	4318      	orrgt	r0, r3
 8003454:	fa06 f003 	lslle.w	r0, r6, r3
 8003458:	f7fc ffc4 	bl	80003e4 <__aeabi_ui2d>
 800345c:	2301      	movs	r3, #1
 800345e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003462:	3c01      	subs	r4, #1
 8003464:	9313      	str	r3, [sp, #76]	; 0x4c
 8003466:	e770      	b.n	800334a <_dtoa_r+0x112>
 8003468:	2301      	movs	r3, #1
 800346a:	e7b3      	b.n	80033d4 <_dtoa_r+0x19c>
 800346c:	900f      	str	r0, [sp, #60]	; 0x3c
 800346e:	e7b2      	b.n	80033d6 <_dtoa_r+0x19e>
 8003470:	9b06      	ldr	r3, [sp, #24]
 8003472:	eba3 0309 	sub.w	r3, r3, r9
 8003476:	9306      	str	r3, [sp, #24]
 8003478:	f1c9 0300 	rsb	r3, r9, #0
 800347c:	930a      	str	r3, [sp, #40]	; 0x28
 800347e:	2300      	movs	r3, #0
 8003480:	930e      	str	r3, [sp, #56]	; 0x38
 8003482:	e7bf      	b.n	8003404 <_dtoa_r+0x1cc>
 8003484:	2300      	movs	r3, #0
 8003486:	930b      	str	r3, [sp, #44]	; 0x2c
 8003488:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800348a:	2b00      	cmp	r3, #0
 800348c:	dc59      	bgt.n	8003542 <_dtoa_r+0x30a>
 800348e:	f04f 0b01 	mov.w	fp, #1
 8003492:	465b      	mov	r3, fp
 8003494:	f8cd b008 	str.w	fp, [sp, #8]
 8003498:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800349c:	2200      	movs	r2, #0
 800349e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80034a0:	6042      	str	r2, [r0, #4]
 80034a2:	2204      	movs	r2, #4
 80034a4:	f102 0614 	add.w	r6, r2, #20
 80034a8:	429e      	cmp	r6, r3
 80034aa:	6841      	ldr	r1, [r0, #4]
 80034ac:	d94f      	bls.n	800354e <_dtoa_r+0x316>
 80034ae:	4628      	mov	r0, r5
 80034b0:	f000 fdda 	bl	8004068 <_Balloc>
 80034b4:	9008      	str	r0, [sp, #32]
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d14d      	bne.n	8003556 <_dtoa_r+0x31e>
 80034ba:	4602      	mov	r2, r0
 80034bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80034c0:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <_dtoa_r+0x300>)
 80034c2:	e6cd      	b.n	8003260 <_dtoa_r+0x28>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e7de      	b.n	8003486 <_dtoa_r+0x24e>
 80034c8:	2300      	movs	r3, #0
 80034ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80034cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80034ce:	eb09 0b03 	add.w	fp, r9, r3
 80034d2:	f10b 0301 	add.w	r3, fp, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	9302      	str	r3, [sp, #8]
 80034da:	bfb8      	it	lt
 80034dc:	2301      	movlt	r3, #1
 80034de:	e7dd      	b.n	800349c <_dtoa_r+0x264>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e7f2      	b.n	80034ca <_dtoa_r+0x292>
 80034e4:	2401      	movs	r4, #1
 80034e6:	2300      	movs	r3, #0
 80034e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80034ea:	9322      	str	r3, [sp, #136]	; 0x88
 80034ec:	f04f 3bff 	mov.w	fp, #4294967295
 80034f0:	2200      	movs	r2, #0
 80034f2:	2312      	movs	r3, #18
 80034f4:	f8cd b008 	str.w	fp, [sp, #8]
 80034f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80034fa:	e7cf      	b.n	800349c <_dtoa_r+0x264>
 80034fc:	f3af 8000 	nop.w
 8003500:	636f4361 	.word	0x636f4361
 8003504:	3fd287a7 	.word	0x3fd287a7
 8003508:	8b60c8b3 	.word	0x8b60c8b3
 800350c:	3fc68a28 	.word	0x3fc68a28
 8003510:	509f79fb 	.word	0x509f79fb
 8003514:	3fd34413 	.word	0x3fd34413
 8003518:	080051b1 	.word	0x080051b1
 800351c:	080051c8 	.word	0x080051c8
 8003520:	7ff00000 	.word	0x7ff00000
 8003524:	080051ad 	.word	0x080051ad
 8003528:	080051a4 	.word	0x080051a4
 800352c:	08005145 	.word	0x08005145
 8003530:	3ff80000 	.word	0x3ff80000
 8003534:	08005320 	.word	0x08005320
 8003538:	08005227 	.word	0x08005227
 800353c:	2301      	movs	r3, #1
 800353e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003540:	e7d4      	b.n	80034ec <_dtoa_r+0x2b4>
 8003542:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003546:	465b      	mov	r3, fp
 8003548:	f8cd b008 	str.w	fp, [sp, #8]
 800354c:	e7a6      	b.n	800349c <_dtoa_r+0x264>
 800354e:	3101      	adds	r1, #1
 8003550:	6041      	str	r1, [r0, #4]
 8003552:	0052      	lsls	r2, r2, #1
 8003554:	e7a6      	b.n	80034a4 <_dtoa_r+0x26c>
 8003556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003558:	9a08      	ldr	r2, [sp, #32]
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	9b02      	ldr	r3, [sp, #8]
 800355e:	2b0e      	cmp	r3, #14
 8003560:	f200 80a8 	bhi.w	80036b4 <_dtoa_r+0x47c>
 8003564:	2c00      	cmp	r4, #0
 8003566:	f000 80a5 	beq.w	80036b4 <_dtoa_r+0x47c>
 800356a:	f1b9 0f00 	cmp.w	r9, #0
 800356e:	dd34      	ble.n	80035da <_dtoa_r+0x3a2>
 8003570:	4a9a      	ldr	r2, [pc, #616]	; (80037dc <_dtoa_r+0x5a4>)
 8003572:	f009 030f 	and.w	r3, r9, #15
 8003576:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800357a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800357e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003582:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003586:	ea4f 1429 	mov.w	r4, r9, asr #4
 800358a:	d016      	beq.n	80035ba <_dtoa_r+0x382>
 800358c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003590:	4b93      	ldr	r3, [pc, #588]	; (80037e0 <_dtoa_r+0x5a8>)
 8003592:	2703      	movs	r7, #3
 8003594:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003598:	f7fd f8c8 	bl	800072c <__aeabi_ddiv>
 800359c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035a0:	f004 040f 	and.w	r4, r4, #15
 80035a4:	4e8e      	ldr	r6, [pc, #568]	; (80037e0 <_dtoa_r+0x5a8>)
 80035a6:	b954      	cbnz	r4, 80035be <_dtoa_r+0x386>
 80035a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80035ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80035b0:	f7fd f8bc 	bl	800072c <__aeabi_ddiv>
 80035b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035b8:	e029      	b.n	800360e <_dtoa_r+0x3d6>
 80035ba:	2702      	movs	r7, #2
 80035bc:	e7f2      	b.n	80035a4 <_dtoa_r+0x36c>
 80035be:	07e1      	lsls	r1, r4, #31
 80035c0:	d508      	bpl.n	80035d4 <_dtoa_r+0x39c>
 80035c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80035c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80035ca:	f7fc ff85 	bl	80004d8 <__aeabi_dmul>
 80035ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80035d2:	3701      	adds	r7, #1
 80035d4:	1064      	asrs	r4, r4, #1
 80035d6:	3608      	adds	r6, #8
 80035d8:	e7e5      	b.n	80035a6 <_dtoa_r+0x36e>
 80035da:	f000 80a5 	beq.w	8003728 <_dtoa_r+0x4f0>
 80035de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80035e2:	f1c9 0400 	rsb	r4, r9, #0
 80035e6:	4b7d      	ldr	r3, [pc, #500]	; (80037dc <_dtoa_r+0x5a4>)
 80035e8:	f004 020f 	and.w	r2, r4, #15
 80035ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f7fc ff70 	bl	80004d8 <__aeabi_dmul>
 80035f8:	2702      	movs	r7, #2
 80035fa:	2300      	movs	r3, #0
 80035fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003600:	4e77      	ldr	r6, [pc, #476]	; (80037e0 <_dtoa_r+0x5a8>)
 8003602:	1124      	asrs	r4, r4, #4
 8003604:	2c00      	cmp	r4, #0
 8003606:	f040 8084 	bne.w	8003712 <_dtoa_r+0x4da>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1d2      	bne.n	80035b4 <_dtoa_r+0x37c>
 800360e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 808b 	beq.w	800372c <_dtoa_r+0x4f4>
 8003616:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800361a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800361e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003622:	2200      	movs	r2, #0
 8003624:	4b6f      	ldr	r3, [pc, #444]	; (80037e4 <_dtoa_r+0x5ac>)
 8003626:	f7fd f9c9 	bl	80009bc <__aeabi_dcmplt>
 800362a:	2800      	cmp	r0, #0
 800362c:	d07e      	beq.n	800372c <_dtoa_r+0x4f4>
 800362e:	9b02      	ldr	r3, [sp, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d07b      	beq.n	800372c <_dtoa_r+0x4f4>
 8003634:	f1bb 0f00 	cmp.w	fp, #0
 8003638:	dd38      	ble.n	80036ac <_dtoa_r+0x474>
 800363a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800363e:	2200      	movs	r2, #0
 8003640:	4b69      	ldr	r3, [pc, #420]	; (80037e8 <_dtoa_r+0x5b0>)
 8003642:	f7fc ff49 	bl	80004d8 <__aeabi_dmul>
 8003646:	465c      	mov	r4, fp
 8003648:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800364c:	f109 38ff 	add.w	r8, r9, #4294967295
 8003650:	3701      	adds	r7, #1
 8003652:	4638      	mov	r0, r7
 8003654:	f7fc fed6 	bl	8000404 <__aeabi_i2d>
 8003658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800365c:	f7fc ff3c 	bl	80004d8 <__aeabi_dmul>
 8003660:	2200      	movs	r2, #0
 8003662:	4b62      	ldr	r3, [pc, #392]	; (80037ec <_dtoa_r+0x5b4>)
 8003664:	f7fc fd82 	bl	800016c <__adddf3>
 8003668:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800366c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003670:	9611      	str	r6, [sp, #68]	; 0x44
 8003672:	2c00      	cmp	r4, #0
 8003674:	d15d      	bne.n	8003732 <_dtoa_r+0x4fa>
 8003676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800367a:	2200      	movs	r2, #0
 800367c:	4b5c      	ldr	r3, [pc, #368]	; (80037f0 <_dtoa_r+0x5b8>)
 800367e:	f7fc fd73 	bl	8000168 <__aeabi_dsub>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800368a:	4633      	mov	r3, r6
 800368c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800368e:	f7fd f9b3 	bl	80009f8 <__aeabi_dcmpgt>
 8003692:	2800      	cmp	r0, #0
 8003694:	f040 829e 	bne.w	8003bd4 <_dtoa_r+0x99c>
 8003698:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800369c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800369e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80036a2:	f7fd f98b 	bl	80009bc <__aeabi_dcmplt>
 80036a6:	2800      	cmp	r0, #0
 80036a8:	f040 8292 	bne.w	8003bd0 <_dtoa_r+0x998>
 80036ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80036b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80036b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f2c0 8153 	blt.w	8003962 <_dtoa_r+0x72a>
 80036bc:	f1b9 0f0e 	cmp.w	r9, #14
 80036c0:	f300 814f 	bgt.w	8003962 <_dtoa_r+0x72a>
 80036c4:	4b45      	ldr	r3, [pc, #276]	; (80037dc <_dtoa_r+0x5a4>)
 80036c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80036ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80036d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f280 80db 	bge.w	8003890 <_dtoa_r+0x658>
 80036da:	9b02      	ldr	r3, [sp, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f300 80d7 	bgt.w	8003890 <_dtoa_r+0x658>
 80036e2:	f040 8274 	bne.w	8003bce <_dtoa_r+0x996>
 80036e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036ea:	2200      	movs	r2, #0
 80036ec:	4b40      	ldr	r3, [pc, #256]	; (80037f0 <_dtoa_r+0x5b8>)
 80036ee:	f7fc fef3 	bl	80004d8 <__aeabi_dmul>
 80036f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036f6:	f7fd f975 	bl	80009e4 <__aeabi_dcmpge>
 80036fa:	9c02      	ldr	r4, [sp, #8]
 80036fc:	4626      	mov	r6, r4
 80036fe:	2800      	cmp	r0, #0
 8003700:	f040 824a 	bne.w	8003b98 <_dtoa_r+0x960>
 8003704:	2331      	movs	r3, #49	; 0x31
 8003706:	9f08      	ldr	r7, [sp, #32]
 8003708:	f109 0901 	add.w	r9, r9, #1
 800370c:	f807 3b01 	strb.w	r3, [r7], #1
 8003710:	e246      	b.n	8003ba0 <_dtoa_r+0x968>
 8003712:	07e2      	lsls	r2, r4, #31
 8003714:	d505      	bpl.n	8003722 <_dtoa_r+0x4ea>
 8003716:	e9d6 2300 	ldrd	r2, r3, [r6]
 800371a:	f7fc fedd 	bl	80004d8 <__aeabi_dmul>
 800371e:	2301      	movs	r3, #1
 8003720:	3701      	adds	r7, #1
 8003722:	1064      	asrs	r4, r4, #1
 8003724:	3608      	adds	r6, #8
 8003726:	e76d      	b.n	8003604 <_dtoa_r+0x3cc>
 8003728:	2702      	movs	r7, #2
 800372a:	e770      	b.n	800360e <_dtoa_r+0x3d6>
 800372c:	46c8      	mov	r8, r9
 800372e:	9c02      	ldr	r4, [sp, #8]
 8003730:	e78f      	b.n	8003652 <_dtoa_r+0x41a>
 8003732:	9908      	ldr	r1, [sp, #32]
 8003734:	4b29      	ldr	r3, [pc, #164]	; (80037dc <_dtoa_r+0x5a4>)
 8003736:	4421      	add	r1, r4
 8003738:	9112      	str	r1, [sp, #72]	; 0x48
 800373a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800373c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003740:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003744:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003748:	2900      	cmp	r1, #0
 800374a:	d055      	beq.n	80037f8 <_dtoa_r+0x5c0>
 800374c:	2000      	movs	r0, #0
 800374e:	4929      	ldr	r1, [pc, #164]	; (80037f4 <_dtoa_r+0x5bc>)
 8003750:	f7fc ffec 	bl	800072c <__aeabi_ddiv>
 8003754:	463b      	mov	r3, r7
 8003756:	4632      	mov	r2, r6
 8003758:	f7fc fd06 	bl	8000168 <__aeabi_dsub>
 800375c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003760:	9f08      	ldr	r7, [sp, #32]
 8003762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003766:	f7fd f967 	bl	8000a38 <__aeabi_d2iz>
 800376a:	4604      	mov	r4, r0
 800376c:	f7fc fe4a 	bl	8000404 <__aeabi_i2d>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003778:	f7fc fcf6 	bl	8000168 <__aeabi_dsub>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	3430      	adds	r4, #48	; 0x30
 8003782:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003786:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800378a:	f807 4b01 	strb.w	r4, [r7], #1
 800378e:	f7fd f915 	bl	80009bc <__aeabi_dcmplt>
 8003792:	2800      	cmp	r0, #0
 8003794:	d174      	bne.n	8003880 <_dtoa_r+0x648>
 8003796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800379a:	2000      	movs	r0, #0
 800379c:	4911      	ldr	r1, [pc, #68]	; (80037e4 <_dtoa_r+0x5ac>)
 800379e:	f7fc fce3 	bl	8000168 <__aeabi_dsub>
 80037a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80037a6:	f7fd f909 	bl	80009bc <__aeabi_dcmplt>
 80037aa:	2800      	cmp	r0, #0
 80037ac:	f040 80b6 	bne.w	800391c <_dtoa_r+0x6e4>
 80037b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037b2:	429f      	cmp	r7, r3
 80037b4:	f43f af7a 	beq.w	80036ac <_dtoa_r+0x474>
 80037b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80037bc:	2200      	movs	r2, #0
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <_dtoa_r+0x5b0>)
 80037c0:	f7fc fe8a 	bl	80004d8 <__aeabi_dmul>
 80037c4:	2200      	movs	r2, #0
 80037c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80037ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <_dtoa_r+0x5b0>)
 80037d0:	f7fc fe82 	bl	80004d8 <__aeabi_dmul>
 80037d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037d8:	e7c3      	b.n	8003762 <_dtoa_r+0x52a>
 80037da:	bf00      	nop
 80037dc:	08005320 	.word	0x08005320
 80037e0:	080052f8 	.word	0x080052f8
 80037e4:	3ff00000 	.word	0x3ff00000
 80037e8:	40240000 	.word	0x40240000
 80037ec:	401c0000 	.word	0x401c0000
 80037f0:	40140000 	.word	0x40140000
 80037f4:	3fe00000 	.word	0x3fe00000
 80037f8:	4630      	mov	r0, r6
 80037fa:	4639      	mov	r1, r7
 80037fc:	f7fc fe6c 	bl	80004d8 <__aeabi_dmul>
 8003800:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003802:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003806:	9c08      	ldr	r4, [sp, #32]
 8003808:	9314      	str	r3, [sp, #80]	; 0x50
 800380a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800380e:	f7fd f913 	bl	8000a38 <__aeabi_d2iz>
 8003812:	9015      	str	r0, [sp, #84]	; 0x54
 8003814:	f7fc fdf6 	bl	8000404 <__aeabi_i2d>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003820:	f7fc fca2 	bl	8000168 <__aeabi_dsub>
 8003824:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003826:	4606      	mov	r6, r0
 8003828:	3330      	adds	r3, #48	; 0x30
 800382a:	f804 3b01 	strb.w	r3, [r4], #1
 800382e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003830:	460f      	mov	r7, r1
 8003832:	429c      	cmp	r4, r3
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	d124      	bne.n	8003884 <_dtoa_r+0x64c>
 800383a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800383e:	4bb3      	ldr	r3, [pc, #716]	; (8003b0c <_dtoa_r+0x8d4>)
 8003840:	f7fc fc94 	bl	800016c <__adddf3>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4630      	mov	r0, r6
 800384a:	4639      	mov	r1, r7
 800384c:	f7fd f8d4 	bl	80009f8 <__aeabi_dcmpgt>
 8003850:	2800      	cmp	r0, #0
 8003852:	d162      	bne.n	800391a <_dtoa_r+0x6e2>
 8003854:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003858:	2000      	movs	r0, #0
 800385a:	49ac      	ldr	r1, [pc, #688]	; (8003b0c <_dtoa_r+0x8d4>)
 800385c:	f7fc fc84 	bl	8000168 <__aeabi_dsub>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4630      	mov	r0, r6
 8003866:	4639      	mov	r1, r7
 8003868:	f7fd f8a8 	bl	80009bc <__aeabi_dcmplt>
 800386c:	2800      	cmp	r0, #0
 800386e:	f43f af1d 	beq.w	80036ac <_dtoa_r+0x474>
 8003872:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003874:	1e7b      	subs	r3, r7, #1
 8003876:	9314      	str	r3, [sp, #80]	; 0x50
 8003878:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800387c:	2b30      	cmp	r3, #48	; 0x30
 800387e:	d0f8      	beq.n	8003872 <_dtoa_r+0x63a>
 8003880:	46c1      	mov	r9, r8
 8003882:	e03a      	b.n	80038fa <_dtoa_r+0x6c2>
 8003884:	4ba2      	ldr	r3, [pc, #648]	; (8003b10 <_dtoa_r+0x8d8>)
 8003886:	f7fc fe27 	bl	80004d8 <__aeabi_dmul>
 800388a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800388e:	e7bc      	b.n	800380a <_dtoa_r+0x5d2>
 8003890:	9f08      	ldr	r7, [sp, #32]
 8003892:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003896:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800389a:	f7fc ff47 	bl	800072c <__aeabi_ddiv>
 800389e:	f7fd f8cb 	bl	8000a38 <__aeabi_d2iz>
 80038a2:	4604      	mov	r4, r0
 80038a4:	f7fc fdae 	bl	8000404 <__aeabi_i2d>
 80038a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80038ac:	f7fc fe14 	bl	80004d8 <__aeabi_dmul>
 80038b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80038b4:	460b      	mov	r3, r1
 80038b6:	4602      	mov	r2, r0
 80038b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80038bc:	f7fc fc54 	bl	8000168 <__aeabi_dsub>
 80038c0:	f807 6b01 	strb.w	r6, [r7], #1
 80038c4:	9e08      	ldr	r6, [sp, #32]
 80038c6:	9b02      	ldr	r3, [sp, #8]
 80038c8:	1bbe      	subs	r6, r7, r6
 80038ca:	42b3      	cmp	r3, r6
 80038cc:	d13a      	bne.n	8003944 <_dtoa_r+0x70c>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	f7fc fc4b 	bl	800016c <__adddf3>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80038e2:	f7fd f889 	bl	80009f8 <__aeabi_dcmpgt>
 80038e6:	bb58      	cbnz	r0, 8003940 <_dtoa_r+0x708>
 80038e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80038ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038f0:	f7fd f85a 	bl	80009a8 <__aeabi_dcmpeq>
 80038f4:	b108      	cbz	r0, 80038fa <_dtoa_r+0x6c2>
 80038f6:	07e1      	lsls	r1, r4, #31
 80038f8:	d422      	bmi.n	8003940 <_dtoa_r+0x708>
 80038fa:	4628      	mov	r0, r5
 80038fc:	4651      	mov	r1, sl
 80038fe:	f000 fbf3 	bl	80040e8 <_Bfree>
 8003902:	2300      	movs	r3, #0
 8003904:	703b      	strb	r3, [r7, #0]
 8003906:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003908:	f109 0001 	add.w	r0, r9, #1
 800390c:	6018      	str	r0, [r3, #0]
 800390e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003910:	2b00      	cmp	r3, #0
 8003912:	f43f acdf 	beq.w	80032d4 <_dtoa_r+0x9c>
 8003916:	601f      	str	r7, [r3, #0]
 8003918:	e4dc      	b.n	80032d4 <_dtoa_r+0x9c>
 800391a:	4627      	mov	r7, r4
 800391c:	463b      	mov	r3, r7
 800391e:	461f      	mov	r7, r3
 8003920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003924:	2a39      	cmp	r2, #57	; 0x39
 8003926:	d107      	bne.n	8003938 <_dtoa_r+0x700>
 8003928:	9a08      	ldr	r2, [sp, #32]
 800392a:	429a      	cmp	r2, r3
 800392c:	d1f7      	bne.n	800391e <_dtoa_r+0x6e6>
 800392e:	2230      	movs	r2, #48	; 0x30
 8003930:	9908      	ldr	r1, [sp, #32]
 8003932:	f108 0801 	add.w	r8, r8, #1
 8003936:	700a      	strb	r2, [r1, #0]
 8003938:	781a      	ldrb	r2, [r3, #0]
 800393a:	3201      	adds	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	e79f      	b.n	8003880 <_dtoa_r+0x648>
 8003940:	46c8      	mov	r8, r9
 8003942:	e7eb      	b.n	800391c <_dtoa_r+0x6e4>
 8003944:	2200      	movs	r2, #0
 8003946:	4b72      	ldr	r3, [pc, #456]	; (8003b10 <_dtoa_r+0x8d8>)
 8003948:	f7fc fdc6 	bl	80004d8 <__aeabi_dmul>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003954:	2200      	movs	r2, #0
 8003956:	2300      	movs	r3, #0
 8003958:	f7fd f826 	bl	80009a8 <__aeabi_dcmpeq>
 800395c:	2800      	cmp	r0, #0
 800395e:	d098      	beq.n	8003892 <_dtoa_r+0x65a>
 8003960:	e7cb      	b.n	80038fa <_dtoa_r+0x6c2>
 8003962:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003964:	2a00      	cmp	r2, #0
 8003966:	f000 80cd 	beq.w	8003b04 <_dtoa_r+0x8cc>
 800396a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800396c:	2a01      	cmp	r2, #1
 800396e:	f300 80af 	bgt.w	8003ad0 <_dtoa_r+0x898>
 8003972:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003974:	2a00      	cmp	r2, #0
 8003976:	f000 80a7 	beq.w	8003ac8 <_dtoa_r+0x890>
 800397a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800397e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003980:	9f06      	ldr	r7, [sp, #24]
 8003982:	9a06      	ldr	r2, [sp, #24]
 8003984:	2101      	movs	r1, #1
 8003986:	441a      	add	r2, r3
 8003988:	9206      	str	r2, [sp, #24]
 800398a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800398c:	4628      	mov	r0, r5
 800398e:	441a      	add	r2, r3
 8003990:	9209      	str	r2, [sp, #36]	; 0x24
 8003992:	f000 fc63 	bl	800425c <__i2b>
 8003996:	4606      	mov	r6, r0
 8003998:	2f00      	cmp	r7, #0
 800399a:	dd0c      	ble.n	80039b6 <_dtoa_r+0x77e>
 800399c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	dd09      	ble.n	80039b6 <_dtoa_r+0x77e>
 80039a2:	42bb      	cmp	r3, r7
 80039a4:	bfa8      	it	ge
 80039a6:	463b      	movge	r3, r7
 80039a8:	9a06      	ldr	r2, [sp, #24]
 80039aa:	1aff      	subs	r7, r7, r3
 80039ac:	1ad2      	subs	r2, r2, r3
 80039ae:	9206      	str	r2, [sp, #24]
 80039b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	9309      	str	r3, [sp, #36]	; 0x24
 80039b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039b8:	b1f3      	cbz	r3, 80039f8 <_dtoa_r+0x7c0>
 80039ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80a9 	beq.w	8003b14 <_dtoa_r+0x8dc>
 80039c2:	2c00      	cmp	r4, #0
 80039c4:	dd10      	ble.n	80039e8 <_dtoa_r+0x7b0>
 80039c6:	4631      	mov	r1, r6
 80039c8:	4622      	mov	r2, r4
 80039ca:	4628      	mov	r0, r5
 80039cc:	f000 fd00 	bl	80043d0 <__pow5mult>
 80039d0:	4652      	mov	r2, sl
 80039d2:	4601      	mov	r1, r0
 80039d4:	4606      	mov	r6, r0
 80039d6:	4628      	mov	r0, r5
 80039d8:	f000 fc56 	bl	8004288 <__multiply>
 80039dc:	4680      	mov	r8, r0
 80039de:	4651      	mov	r1, sl
 80039e0:	4628      	mov	r0, r5
 80039e2:	f000 fb81 	bl	80040e8 <_Bfree>
 80039e6:	46c2      	mov	sl, r8
 80039e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039ea:	1b1a      	subs	r2, r3, r4
 80039ec:	d004      	beq.n	80039f8 <_dtoa_r+0x7c0>
 80039ee:	4651      	mov	r1, sl
 80039f0:	4628      	mov	r0, r5
 80039f2:	f000 fced 	bl	80043d0 <__pow5mult>
 80039f6:	4682      	mov	sl, r0
 80039f8:	2101      	movs	r1, #1
 80039fa:	4628      	mov	r0, r5
 80039fc:	f000 fc2e 	bl	800425c <__i2b>
 8003a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a02:	4604      	mov	r4, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f340 8087 	ble.w	8003b18 <_dtoa_r+0x8e0>
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4601      	mov	r1, r0
 8003a0e:	4628      	mov	r0, r5
 8003a10:	f000 fcde 	bl	80043d0 <__pow5mult>
 8003a14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a16:	4604      	mov	r4, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	f340 8080 	ble.w	8003b1e <_dtoa_r+0x8e6>
 8003a1e:	f04f 0800 	mov.w	r8, #0
 8003a22:	6923      	ldr	r3, [r4, #16]
 8003a24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003a28:	6918      	ldr	r0, [r3, #16]
 8003a2a:	f000 fbc9 	bl	80041c0 <__hi0bits>
 8003a2e:	f1c0 0020 	rsb	r0, r0, #32
 8003a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a34:	4418      	add	r0, r3
 8003a36:	f010 001f 	ands.w	r0, r0, #31
 8003a3a:	f000 8092 	beq.w	8003b62 <_dtoa_r+0x92a>
 8003a3e:	f1c0 0320 	rsb	r3, r0, #32
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	f340 808a 	ble.w	8003b5c <_dtoa_r+0x924>
 8003a48:	f1c0 001c 	rsb	r0, r0, #28
 8003a4c:	9b06      	ldr	r3, [sp, #24]
 8003a4e:	4407      	add	r7, r0
 8003a50:	4403      	add	r3, r0
 8003a52:	9306      	str	r3, [sp, #24]
 8003a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a56:	4403      	add	r3, r0
 8003a58:	9309      	str	r3, [sp, #36]	; 0x24
 8003a5a:	9b06      	ldr	r3, [sp, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	dd05      	ble.n	8003a6c <_dtoa_r+0x834>
 8003a60:	4651      	mov	r1, sl
 8003a62:	461a      	mov	r2, r3
 8003a64:	4628      	mov	r0, r5
 8003a66:	f000 fd0d 	bl	8004484 <__lshift>
 8003a6a:	4682      	mov	sl, r0
 8003a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	dd05      	ble.n	8003a7e <_dtoa_r+0x846>
 8003a72:	4621      	mov	r1, r4
 8003a74:	461a      	mov	r2, r3
 8003a76:	4628      	mov	r0, r5
 8003a78:	f000 fd04 	bl	8004484 <__lshift>
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d070      	beq.n	8003b66 <_dtoa_r+0x92e>
 8003a84:	4621      	mov	r1, r4
 8003a86:	4650      	mov	r0, sl
 8003a88:	f000 fd68 	bl	800455c <__mcmp>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	da6a      	bge.n	8003b66 <_dtoa_r+0x92e>
 8003a90:	2300      	movs	r3, #0
 8003a92:	4651      	mov	r1, sl
 8003a94:	220a      	movs	r2, #10
 8003a96:	4628      	mov	r0, r5
 8003a98:	f000 fb48 	bl	800412c <__multadd>
 8003a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a9e:	4682      	mov	sl, r0
 8003aa0:	f109 39ff 	add.w	r9, r9, #4294967295
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8193 	beq.w	8003dd0 <_dtoa_r+0xb98>
 8003aaa:	4631      	mov	r1, r6
 8003aac:	2300      	movs	r3, #0
 8003aae:	220a      	movs	r2, #10
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f000 fb3b 	bl	800412c <__multadd>
 8003ab6:	f1bb 0f00 	cmp.w	fp, #0
 8003aba:	4606      	mov	r6, r0
 8003abc:	f300 8093 	bgt.w	8003be6 <_dtoa_r+0x9ae>
 8003ac0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	dc57      	bgt.n	8003b76 <_dtoa_r+0x93e>
 8003ac6:	e08e      	b.n	8003be6 <_dtoa_r+0x9ae>
 8003ac8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003aca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003ace:	e756      	b.n	800397e <_dtoa_r+0x746>
 8003ad0:	9b02      	ldr	r3, [sp, #8]
 8003ad2:	1e5c      	subs	r4, r3, #1
 8003ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ad6:	42a3      	cmp	r3, r4
 8003ad8:	bfb7      	itett	lt
 8003ada:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003adc:	1b1c      	subge	r4, r3, r4
 8003ade:	1ae2      	sublt	r2, r4, r3
 8003ae0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003ae2:	bfbe      	ittt	lt
 8003ae4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003ae6:	189b      	addlt	r3, r3, r2
 8003ae8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003aea:	9b02      	ldr	r3, [sp, #8]
 8003aec:	bfb8      	it	lt
 8003aee:	2400      	movlt	r4, #0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bfbb      	ittet	lt
 8003af4:	9b06      	ldrlt	r3, [sp, #24]
 8003af6:	9a02      	ldrlt	r2, [sp, #8]
 8003af8:	9f06      	ldrge	r7, [sp, #24]
 8003afa:	1a9f      	sublt	r7, r3, r2
 8003afc:	bfac      	ite	ge
 8003afe:	9b02      	ldrge	r3, [sp, #8]
 8003b00:	2300      	movlt	r3, #0
 8003b02:	e73e      	b.n	8003982 <_dtoa_r+0x74a>
 8003b04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003b06:	9f06      	ldr	r7, [sp, #24]
 8003b08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003b0a:	e745      	b.n	8003998 <_dtoa_r+0x760>
 8003b0c:	3fe00000 	.word	0x3fe00000
 8003b10:	40240000 	.word	0x40240000
 8003b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b16:	e76a      	b.n	80039ee <_dtoa_r+0x7b6>
 8003b18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	dc19      	bgt.n	8003b52 <_dtoa_r+0x91a>
 8003b1e:	9b04      	ldr	r3, [sp, #16]
 8003b20:	b9bb      	cbnz	r3, 8003b52 <_dtoa_r+0x91a>
 8003b22:	9b05      	ldr	r3, [sp, #20]
 8003b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b28:	b99b      	cbnz	r3, 8003b52 <_dtoa_r+0x91a>
 8003b2a:	9b05      	ldr	r3, [sp, #20]
 8003b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b30:	0d1b      	lsrs	r3, r3, #20
 8003b32:	051b      	lsls	r3, r3, #20
 8003b34:	b183      	cbz	r3, 8003b58 <_dtoa_r+0x920>
 8003b36:	f04f 0801 	mov.w	r8, #1
 8003b3a:	9b06      	ldr	r3, [sp, #24]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	9306      	str	r3, [sp, #24]
 8003b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b42:	3301      	adds	r3, #1
 8003b44:	9309      	str	r3, [sp, #36]	; 0x24
 8003b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f47f af6a 	bne.w	8003a22 <_dtoa_r+0x7ea>
 8003b4e:	2001      	movs	r0, #1
 8003b50:	e76f      	b.n	8003a32 <_dtoa_r+0x7fa>
 8003b52:	f04f 0800 	mov.w	r8, #0
 8003b56:	e7f6      	b.n	8003b46 <_dtoa_r+0x90e>
 8003b58:	4698      	mov	r8, r3
 8003b5a:	e7f4      	b.n	8003b46 <_dtoa_r+0x90e>
 8003b5c:	f43f af7d 	beq.w	8003a5a <_dtoa_r+0x822>
 8003b60:	4618      	mov	r0, r3
 8003b62:	301c      	adds	r0, #28
 8003b64:	e772      	b.n	8003a4c <_dtoa_r+0x814>
 8003b66:	9b02      	ldr	r3, [sp, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	dc36      	bgt.n	8003bda <_dtoa_r+0x9a2>
 8003b6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	dd33      	ble.n	8003bda <_dtoa_r+0x9a2>
 8003b72:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003b76:	f1bb 0f00 	cmp.w	fp, #0
 8003b7a:	d10d      	bne.n	8003b98 <_dtoa_r+0x960>
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	465b      	mov	r3, fp
 8003b80:	2205      	movs	r2, #5
 8003b82:	4628      	mov	r0, r5
 8003b84:	f000 fad2 	bl	800412c <__multadd>
 8003b88:	4601      	mov	r1, r0
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4650      	mov	r0, sl
 8003b8e:	f000 fce5 	bl	800455c <__mcmp>
 8003b92:	2800      	cmp	r0, #0
 8003b94:	f73f adb6 	bgt.w	8003704 <_dtoa_r+0x4cc>
 8003b98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b9a:	9f08      	ldr	r7, [sp, #32]
 8003b9c:	ea6f 0903 	mvn.w	r9, r3
 8003ba0:	f04f 0800 	mov.w	r8, #0
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f000 fa9e 	bl	80040e8 <_Bfree>
 8003bac:	2e00      	cmp	r6, #0
 8003bae:	f43f aea4 	beq.w	80038fa <_dtoa_r+0x6c2>
 8003bb2:	f1b8 0f00 	cmp.w	r8, #0
 8003bb6:	d005      	beq.n	8003bc4 <_dtoa_r+0x98c>
 8003bb8:	45b0      	cmp	r8, r6
 8003bba:	d003      	beq.n	8003bc4 <_dtoa_r+0x98c>
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f000 fa92 	bl	80040e8 <_Bfree>
 8003bc4:	4631      	mov	r1, r6
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f000 fa8e 	bl	80040e8 <_Bfree>
 8003bcc:	e695      	b.n	80038fa <_dtoa_r+0x6c2>
 8003bce:	2400      	movs	r4, #0
 8003bd0:	4626      	mov	r6, r4
 8003bd2:	e7e1      	b.n	8003b98 <_dtoa_r+0x960>
 8003bd4:	46c1      	mov	r9, r8
 8003bd6:	4626      	mov	r6, r4
 8003bd8:	e594      	b.n	8003704 <_dtoa_r+0x4cc>
 8003bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bdc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80fc 	beq.w	8003dde <_dtoa_r+0xba6>
 8003be6:	2f00      	cmp	r7, #0
 8003be8:	dd05      	ble.n	8003bf6 <_dtoa_r+0x9be>
 8003bea:	4631      	mov	r1, r6
 8003bec:	463a      	mov	r2, r7
 8003bee:	4628      	mov	r0, r5
 8003bf0:	f000 fc48 	bl	8004484 <__lshift>
 8003bf4:	4606      	mov	r6, r0
 8003bf6:	f1b8 0f00 	cmp.w	r8, #0
 8003bfa:	d05c      	beq.n	8003cb6 <_dtoa_r+0xa7e>
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	6871      	ldr	r1, [r6, #4]
 8003c00:	f000 fa32 	bl	8004068 <_Balloc>
 8003c04:	4607      	mov	r7, r0
 8003c06:	b928      	cbnz	r0, 8003c14 <_dtoa_r+0x9dc>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003c0e:	4b7e      	ldr	r3, [pc, #504]	; (8003e08 <_dtoa_r+0xbd0>)
 8003c10:	f7ff bb26 	b.w	8003260 <_dtoa_r+0x28>
 8003c14:	6932      	ldr	r2, [r6, #16]
 8003c16:	f106 010c 	add.w	r1, r6, #12
 8003c1a:	3202      	adds	r2, #2
 8003c1c:	0092      	lsls	r2, r2, #2
 8003c1e:	300c      	adds	r0, #12
 8003c20:	f7fe fd30 	bl	8002684 <memcpy>
 8003c24:	2201      	movs	r2, #1
 8003c26:	4639      	mov	r1, r7
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f000 fc2b 	bl	8004484 <__lshift>
 8003c2e:	46b0      	mov	r8, r6
 8003c30:	4606      	mov	r6, r0
 8003c32:	9b08      	ldr	r3, [sp, #32]
 8003c34:	3301      	adds	r3, #1
 8003c36:	9302      	str	r3, [sp, #8]
 8003c38:	9b08      	ldr	r3, [sp, #32]
 8003c3a:	445b      	add	r3, fp
 8003c3c:	930a      	str	r3, [sp, #40]	; 0x28
 8003c3e:	9b04      	ldr	r3, [sp, #16]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	9309      	str	r3, [sp, #36]	; 0x24
 8003c46:	9b02      	ldr	r3, [sp, #8]
 8003c48:	4621      	mov	r1, r4
 8003c4a:	4650      	mov	r0, sl
 8003c4c:	f103 3bff 	add.w	fp, r3, #4294967295
 8003c50:	f7ff fa62 	bl	8003118 <quorem>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4641      	mov	r1, r8
 8003c58:	3330      	adds	r3, #48	; 0x30
 8003c5a:	9004      	str	r0, [sp, #16]
 8003c5c:	4650      	mov	r0, sl
 8003c5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c60:	f000 fc7c 	bl	800455c <__mcmp>
 8003c64:	4632      	mov	r2, r6
 8003c66:	9006      	str	r0, [sp, #24]
 8003c68:	4621      	mov	r1, r4
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f000 fc92 	bl	8004594 <__mdiff>
 8003c70:	68c2      	ldr	r2, [r0, #12]
 8003c72:	4607      	mov	r7, r0
 8003c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c76:	bb02      	cbnz	r2, 8003cba <_dtoa_r+0xa82>
 8003c78:	4601      	mov	r1, r0
 8003c7a:	4650      	mov	r0, sl
 8003c7c:	f000 fc6e 	bl	800455c <__mcmp>
 8003c80:	4602      	mov	r2, r0
 8003c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c84:	4639      	mov	r1, r7
 8003c86:	4628      	mov	r0, r5
 8003c88:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003c8c:	f000 fa2c 	bl	80040e8 <_Bfree>
 8003c90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c94:	9f02      	ldr	r7, [sp, #8]
 8003c96:	ea43 0102 	orr.w	r1, r3, r2
 8003c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ca0:	d10d      	bne.n	8003cbe <_dtoa_r+0xa86>
 8003ca2:	2b39      	cmp	r3, #57	; 0x39
 8003ca4:	d027      	beq.n	8003cf6 <_dtoa_r+0xabe>
 8003ca6:	9a06      	ldr	r2, [sp, #24]
 8003ca8:	2a00      	cmp	r2, #0
 8003caa:	dd01      	ble.n	8003cb0 <_dtoa_r+0xa78>
 8003cac:	9b04      	ldr	r3, [sp, #16]
 8003cae:	3331      	adds	r3, #49	; 0x31
 8003cb0:	f88b 3000 	strb.w	r3, [fp]
 8003cb4:	e776      	b.n	8003ba4 <_dtoa_r+0x96c>
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	e7b9      	b.n	8003c2e <_dtoa_r+0x9f6>
 8003cba:	2201      	movs	r2, #1
 8003cbc:	e7e2      	b.n	8003c84 <_dtoa_r+0xa4c>
 8003cbe:	9906      	ldr	r1, [sp, #24]
 8003cc0:	2900      	cmp	r1, #0
 8003cc2:	db04      	blt.n	8003cce <_dtoa_r+0xa96>
 8003cc4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8003cc6:	4301      	orrs	r1, r0
 8003cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cca:	4301      	orrs	r1, r0
 8003ccc:	d120      	bne.n	8003d10 <_dtoa_r+0xad8>
 8003cce:	2a00      	cmp	r2, #0
 8003cd0:	ddee      	ble.n	8003cb0 <_dtoa_r+0xa78>
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	9302      	str	r3, [sp, #8]
 8003cda:	f000 fbd3 	bl	8004484 <__lshift>
 8003cde:	4621      	mov	r1, r4
 8003ce0:	4682      	mov	sl, r0
 8003ce2:	f000 fc3b 	bl	800455c <__mcmp>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	9b02      	ldr	r3, [sp, #8]
 8003cea:	dc02      	bgt.n	8003cf2 <_dtoa_r+0xaba>
 8003cec:	d1e0      	bne.n	8003cb0 <_dtoa_r+0xa78>
 8003cee:	07da      	lsls	r2, r3, #31
 8003cf0:	d5de      	bpl.n	8003cb0 <_dtoa_r+0xa78>
 8003cf2:	2b39      	cmp	r3, #57	; 0x39
 8003cf4:	d1da      	bne.n	8003cac <_dtoa_r+0xa74>
 8003cf6:	2339      	movs	r3, #57	; 0x39
 8003cf8:	f88b 3000 	strb.w	r3, [fp]
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	461f      	mov	r7, r3
 8003d00:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	2a39      	cmp	r2, #57	; 0x39
 8003d08:	d050      	beq.n	8003dac <_dtoa_r+0xb74>
 8003d0a:	3201      	adds	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e749      	b.n	8003ba4 <_dtoa_r+0x96c>
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	dd03      	ble.n	8003d1c <_dtoa_r+0xae4>
 8003d14:	2b39      	cmp	r3, #57	; 0x39
 8003d16:	d0ee      	beq.n	8003cf6 <_dtoa_r+0xabe>
 8003d18:	3301      	adds	r3, #1
 8003d1a:	e7c9      	b.n	8003cb0 <_dtoa_r+0xa78>
 8003d1c:	9a02      	ldr	r2, [sp, #8]
 8003d1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d20:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003d24:	428a      	cmp	r2, r1
 8003d26:	d02a      	beq.n	8003d7e <_dtoa_r+0xb46>
 8003d28:	4651      	mov	r1, sl
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	220a      	movs	r2, #10
 8003d2e:	4628      	mov	r0, r5
 8003d30:	f000 f9fc 	bl	800412c <__multadd>
 8003d34:	45b0      	cmp	r8, r6
 8003d36:	4682      	mov	sl, r0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	f04f 020a 	mov.w	r2, #10
 8003d40:	4641      	mov	r1, r8
 8003d42:	4628      	mov	r0, r5
 8003d44:	d107      	bne.n	8003d56 <_dtoa_r+0xb1e>
 8003d46:	f000 f9f1 	bl	800412c <__multadd>
 8003d4a:	4680      	mov	r8, r0
 8003d4c:	4606      	mov	r6, r0
 8003d4e:	9b02      	ldr	r3, [sp, #8]
 8003d50:	3301      	adds	r3, #1
 8003d52:	9302      	str	r3, [sp, #8]
 8003d54:	e777      	b.n	8003c46 <_dtoa_r+0xa0e>
 8003d56:	f000 f9e9 	bl	800412c <__multadd>
 8003d5a:	4631      	mov	r1, r6
 8003d5c:	4680      	mov	r8, r0
 8003d5e:	2300      	movs	r3, #0
 8003d60:	220a      	movs	r2, #10
 8003d62:	4628      	mov	r0, r5
 8003d64:	f000 f9e2 	bl	800412c <__multadd>
 8003d68:	4606      	mov	r6, r0
 8003d6a:	e7f0      	b.n	8003d4e <_dtoa_r+0xb16>
 8003d6c:	f1bb 0f00 	cmp.w	fp, #0
 8003d70:	bfcc      	ite	gt
 8003d72:	465f      	movgt	r7, fp
 8003d74:	2701      	movle	r7, #1
 8003d76:	f04f 0800 	mov.w	r8, #0
 8003d7a:	9a08      	ldr	r2, [sp, #32]
 8003d7c:	4417      	add	r7, r2
 8003d7e:	4651      	mov	r1, sl
 8003d80:	2201      	movs	r2, #1
 8003d82:	4628      	mov	r0, r5
 8003d84:	9302      	str	r3, [sp, #8]
 8003d86:	f000 fb7d 	bl	8004484 <__lshift>
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4682      	mov	sl, r0
 8003d8e:	f000 fbe5 	bl	800455c <__mcmp>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	dcb2      	bgt.n	8003cfc <_dtoa_r+0xac4>
 8003d96:	d102      	bne.n	8003d9e <_dtoa_r+0xb66>
 8003d98:	9b02      	ldr	r3, [sp, #8]
 8003d9a:	07db      	lsls	r3, r3, #31
 8003d9c:	d4ae      	bmi.n	8003cfc <_dtoa_r+0xac4>
 8003d9e:	463b      	mov	r3, r7
 8003da0:	461f      	mov	r7, r3
 8003da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003da6:	2a30      	cmp	r2, #48	; 0x30
 8003da8:	d0fa      	beq.n	8003da0 <_dtoa_r+0xb68>
 8003daa:	e6fb      	b.n	8003ba4 <_dtoa_r+0x96c>
 8003dac:	9a08      	ldr	r2, [sp, #32]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d1a5      	bne.n	8003cfe <_dtoa_r+0xac6>
 8003db2:	2331      	movs	r3, #49	; 0x31
 8003db4:	f109 0901 	add.w	r9, r9, #1
 8003db8:	7013      	strb	r3, [r2, #0]
 8003dba:	e6f3      	b.n	8003ba4 <_dtoa_r+0x96c>
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <_dtoa_r+0xbd4>)
 8003dbe:	f7ff baa7 	b.w	8003310 <_dtoa_r+0xd8>
 8003dc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f47f aa80 	bne.w	80032ca <_dtoa_r+0x92>
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <_dtoa_r+0xbd8>)
 8003dcc:	f7ff baa0 	b.w	8003310 <_dtoa_r+0xd8>
 8003dd0:	f1bb 0f00 	cmp.w	fp, #0
 8003dd4:	dc03      	bgt.n	8003dde <_dtoa_r+0xba6>
 8003dd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	f73f aecc 	bgt.w	8003b76 <_dtoa_r+0x93e>
 8003dde:	9f08      	ldr	r7, [sp, #32]
 8003de0:	4621      	mov	r1, r4
 8003de2:	4650      	mov	r0, sl
 8003de4:	f7ff f998 	bl	8003118 <quorem>
 8003de8:	9a08      	ldr	r2, [sp, #32]
 8003dea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003dee:	f807 3b01 	strb.w	r3, [r7], #1
 8003df2:	1aba      	subs	r2, r7, r2
 8003df4:	4593      	cmp	fp, r2
 8003df6:	ddb9      	ble.n	8003d6c <_dtoa_r+0xb34>
 8003df8:	4651      	mov	r1, sl
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	220a      	movs	r2, #10
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f000 f994 	bl	800412c <__multadd>
 8003e04:	4682      	mov	sl, r0
 8003e06:	e7eb      	b.n	8003de0 <_dtoa_r+0xba8>
 8003e08:	08005227 	.word	0x08005227
 8003e0c:	08005144 	.word	0x08005144
 8003e10:	080051a4 	.word	0x080051a4

08003e14 <std>:
 8003e14:	2300      	movs	r3, #0
 8003e16:	b510      	push	{r4, lr}
 8003e18:	4604      	mov	r4, r0
 8003e1a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e22:	6083      	str	r3, [r0, #8]
 8003e24:	8181      	strh	r1, [r0, #12]
 8003e26:	6643      	str	r3, [r0, #100]	; 0x64
 8003e28:	81c2      	strh	r2, [r0, #14]
 8003e2a:	6183      	str	r3, [r0, #24]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	2208      	movs	r2, #8
 8003e30:	305c      	adds	r0, #92	; 0x5c
 8003e32:	f7fe fc35 	bl	80026a0 <memset>
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <std+0x38>)
 8003e38:	6224      	str	r4, [r4, #32]
 8003e3a:	6263      	str	r3, [r4, #36]	; 0x24
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <std+0x3c>)
 8003e3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e40:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <std+0x40>)
 8003e42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <std+0x44>)
 8003e46:	6323      	str	r3, [r4, #48]	; 0x30
 8003e48:	bd10      	pop	{r4, pc}
 8003e4a:	bf00      	nop
 8003e4c:	08004a39 	.word	0x08004a39
 8003e50:	08004a5b 	.word	0x08004a5b
 8003e54:	08004a93 	.word	0x08004a93
 8003e58:	08004ab7 	.word	0x08004ab7

08003e5c <_cleanup_r>:
 8003e5c:	4901      	ldr	r1, [pc, #4]	; (8003e64 <_cleanup_r+0x8>)
 8003e5e:	f000 b8c1 	b.w	8003fe4 <_fwalk_reent>
 8003e62:	bf00      	nop
 8003e64:	08004da1 	.word	0x08004da1

08003e68 <__sfmoreglue>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	2568      	movs	r5, #104	; 0x68
 8003e6c:	1e4a      	subs	r2, r1, #1
 8003e6e:	4355      	muls	r5, r2
 8003e70:	460e      	mov	r6, r1
 8003e72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e76:	f7fe fc67 	bl	8002748 <_malloc_r>
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	b140      	cbz	r0, 8003e90 <__sfmoreglue+0x28>
 8003e7e:	2100      	movs	r1, #0
 8003e80:	e9c0 1600 	strd	r1, r6, [r0]
 8003e84:	300c      	adds	r0, #12
 8003e86:	60a0      	str	r0, [r4, #8]
 8003e88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e8c:	f7fe fc08 	bl	80026a0 <memset>
 8003e90:	4620      	mov	r0, r4
 8003e92:	bd70      	pop	{r4, r5, r6, pc}

08003e94 <__sfp_lock_acquire>:
 8003e94:	4801      	ldr	r0, [pc, #4]	; (8003e9c <__sfp_lock_acquire+0x8>)
 8003e96:	f000 b8ca 	b.w	800402e <__retarget_lock_acquire_recursive>
 8003e9a:	bf00      	nop
 8003e9c:	200011b0 	.word	0x200011b0

08003ea0 <__sfp_lock_release>:
 8003ea0:	4801      	ldr	r0, [pc, #4]	; (8003ea8 <__sfp_lock_release+0x8>)
 8003ea2:	f000 b8c5 	b.w	8004030 <__retarget_lock_release_recursive>
 8003ea6:	bf00      	nop
 8003ea8:	200011b0 	.word	0x200011b0

08003eac <__sinit_lock_acquire>:
 8003eac:	4801      	ldr	r0, [pc, #4]	; (8003eb4 <__sinit_lock_acquire+0x8>)
 8003eae:	f000 b8be 	b.w	800402e <__retarget_lock_acquire_recursive>
 8003eb2:	bf00      	nop
 8003eb4:	200011ab 	.word	0x200011ab

08003eb8 <__sinit_lock_release>:
 8003eb8:	4801      	ldr	r0, [pc, #4]	; (8003ec0 <__sinit_lock_release+0x8>)
 8003eba:	f000 b8b9 	b.w	8004030 <__retarget_lock_release_recursive>
 8003ebe:	bf00      	nop
 8003ec0:	200011ab 	.word	0x200011ab

08003ec4 <__sinit>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	f7ff fff0 	bl	8003eac <__sinit_lock_acquire>
 8003ecc:	69a3      	ldr	r3, [r4, #24]
 8003ece:	b11b      	cbz	r3, 8003ed8 <__sinit+0x14>
 8003ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed4:	f7ff bff0 	b.w	8003eb8 <__sinit_lock_release>
 8003ed8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003edc:	6523      	str	r3, [r4, #80]	; 0x50
 8003ede:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <__sinit+0x68>)
 8003ee0:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <__sinit+0x6c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003ee6:	42a3      	cmp	r3, r4
 8003ee8:	bf08      	it	eq
 8003eea:	2301      	moveq	r3, #1
 8003eec:	4620      	mov	r0, r4
 8003eee:	bf08      	it	eq
 8003ef0:	61a3      	streq	r3, [r4, #24]
 8003ef2:	f000 f81f 	bl	8003f34 <__sfp>
 8003ef6:	6060      	str	r0, [r4, #4]
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f000 f81b 	bl	8003f34 <__sfp>
 8003efe:	60a0      	str	r0, [r4, #8]
 8003f00:	4620      	mov	r0, r4
 8003f02:	f000 f817 	bl	8003f34 <__sfp>
 8003f06:	2200      	movs	r2, #0
 8003f08:	2104      	movs	r1, #4
 8003f0a:	60e0      	str	r0, [r4, #12]
 8003f0c:	6860      	ldr	r0, [r4, #4]
 8003f0e:	f7ff ff81 	bl	8003e14 <std>
 8003f12:	2201      	movs	r2, #1
 8003f14:	2109      	movs	r1, #9
 8003f16:	68a0      	ldr	r0, [r4, #8]
 8003f18:	f7ff ff7c 	bl	8003e14 <std>
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	2112      	movs	r1, #18
 8003f20:	68e0      	ldr	r0, [r4, #12]
 8003f22:	f7ff ff77 	bl	8003e14 <std>
 8003f26:	2301      	movs	r3, #1
 8003f28:	61a3      	str	r3, [r4, #24]
 8003f2a:	e7d1      	b.n	8003ed0 <__sinit+0xc>
 8003f2c:	08005130 	.word	0x08005130
 8003f30:	08003e5d 	.word	0x08003e5d

08003f34 <__sfp>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	4607      	mov	r7, r0
 8003f38:	f7ff ffac 	bl	8003e94 <__sfp_lock_acquire>
 8003f3c:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <__sfp+0x84>)
 8003f3e:	681e      	ldr	r6, [r3, #0]
 8003f40:	69b3      	ldr	r3, [r6, #24]
 8003f42:	b913      	cbnz	r3, 8003f4a <__sfp+0x16>
 8003f44:	4630      	mov	r0, r6
 8003f46:	f7ff ffbd 	bl	8003ec4 <__sinit>
 8003f4a:	3648      	adds	r6, #72	; 0x48
 8003f4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	d503      	bpl.n	8003f5c <__sfp+0x28>
 8003f54:	6833      	ldr	r3, [r6, #0]
 8003f56:	b30b      	cbz	r3, 8003f9c <__sfp+0x68>
 8003f58:	6836      	ldr	r6, [r6, #0]
 8003f5a:	e7f7      	b.n	8003f4c <__sfp+0x18>
 8003f5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f60:	b9d5      	cbnz	r5, 8003f98 <__sfp+0x64>
 8003f62:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <__sfp+0x88>)
 8003f64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f68:	60e3      	str	r3, [r4, #12]
 8003f6a:	6665      	str	r5, [r4, #100]	; 0x64
 8003f6c:	f000 f85e 	bl	800402c <__retarget_lock_init_recursive>
 8003f70:	f7ff ff96 	bl	8003ea0 <__sfp_lock_release>
 8003f74:	2208      	movs	r2, #8
 8003f76:	4629      	mov	r1, r5
 8003f78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f80:	6025      	str	r5, [r4, #0]
 8003f82:	61a5      	str	r5, [r4, #24]
 8003f84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f88:	f7fe fb8a 	bl	80026a0 <memset>
 8003f8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f94:	4620      	mov	r0, r4
 8003f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f98:	3468      	adds	r4, #104	; 0x68
 8003f9a:	e7d9      	b.n	8003f50 <__sfp+0x1c>
 8003f9c:	2104      	movs	r1, #4
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	f7ff ff62 	bl	8003e68 <__sfmoreglue>
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	6030      	str	r0, [r6, #0]
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d1d5      	bne.n	8003f58 <__sfp+0x24>
 8003fac:	f7ff ff78 	bl	8003ea0 <__sfp_lock_release>
 8003fb0:	230c      	movs	r3, #12
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	e7ee      	b.n	8003f94 <__sfp+0x60>
 8003fb6:	bf00      	nop
 8003fb8:	08005130 	.word	0x08005130
 8003fbc:	ffff0001 	.word	0xffff0001

08003fc0 <fiprintf>:
 8003fc0:	b40e      	push	{r1, r2, r3}
 8003fc2:	b503      	push	{r0, r1, lr}
 8003fc4:	4601      	mov	r1, r0
 8003fc6:	ab03      	add	r3, sp, #12
 8003fc8:	4805      	ldr	r0, [pc, #20]	; (8003fe0 <fiprintf+0x20>)
 8003fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fce:	6800      	ldr	r0, [r0, #0]
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	f000 fc01 	bl	80047d8 <_vfiprintf_r>
 8003fd6:	b002      	add	sp, #8
 8003fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fdc:	b003      	add	sp, #12
 8003fde:	4770      	bx	lr
 8003fe0:	20000004 	.word	0x20000004

08003fe4 <_fwalk_reent>:
 8003fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe8:	4606      	mov	r6, r0
 8003fea:	4688      	mov	r8, r1
 8003fec:	2700      	movs	r7, #0
 8003fee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ff6:	f1b9 0901 	subs.w	r9, r9, #1
 8003ffa:	d505      	bpl.n	8004008 <_fwalk_reent+0x24>
 8003ffc:	6824      	ldr	r4, [r4, #0]
 8003ffe:	2c00      	cmp	r4, #0
 8004000:	d1f7      	bne.n	8003ff2 <_fwalk_reent+0xe>
 8004002:	4638      	mov	r0, r7
 8004004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004008:	89ab      	ldrh	r3, [r5, #12]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d907      	bls.n	800401e <_fwalk_reent+0x3a>
 800400e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004012:	3301      	adds	r3, #1
 8004014:	d003      	beq.n	800401e <_fwalk_reent+0x3a>
 8004016:	4629      	mov	r1, r5
 8004018:	4630      	mov	r0, r6
 800401a:	47c0      	blx	r8
 800401c:	4307      	orrs	r7, r0
 800401e:	3568      	adds	r5, #104	; 0x68
 8004020:	e7e9      	b.n	8003ff6 <_fwalk_reent+0x12>
	...

08004024 <_localeconv_r>:
 8004024:	4800      	ldr	r0, [pc, #0]	; (8004028 <_localeconv_r+0x4>)
 8004026:	4770      	bx	lr
 8004028:	20000158 	.word	0x20000158

0800402c <__retarget_lock_init_recursive>:
 800402c:	4770      	bx	lr

0800402e <__retarget_lock_acquire_recursive>:
 800402e:	4770      	bx	lr

08004030 <__retarget_lock_release_recursive>:
 8004030:	4770      	bx	lr

08004032 <memchr>:
 8004032:	4603      	mov	r3, r0
 8004034:	b510      	push	{r4, lr}
 8004036:	b2c9      	uxtb	r1, r1
 8004038:	4402      	add	r2, r0
 800403a:	4293      	cmp	r3, r2
 800403c:	4618      	mov	r0, r3
 800403e:	d101      	bne.n	8004044 <memchr+0x12>
 8004040:	2000      	movs	r0, #0
 8004042:	e003      	b.n	800404c <memchr+0x1a>
 8004044:	7804      	ldrb	r4, [r0, #0]
 8004046:	3301      	adds	r3, #1
 8004048:	428c      	cmp	r4, r1
 800404a:	d1f6      	bne.n	800403a <memchr+0x8>
 800404c:	bd10      	pop	{r4, pc}
	...

08004050 <__malloc_lock>:
 8004050:	4801      	ldr	r0, [pc, #4]	; (8004058 <__malloc_lock+0x8>)
 8004052:	f7ff bfec 	b.w	800402e <__retarget_lock_acquire_recursive>
 8004056:	bf00      	nop
 8004058:	200011ac 	.word	0x200011ac

0800405c <__malloc_unlock>:
 800405c:	4801      	ldr	r0, [pc, #4]	; (8004064 <__malloc_unlock+0x8>)
 800405e:	f7ff bfe7 	b.w	8004030 <__retarget_lock_release_recursive>
 8004062:	bf00      	nop
 8004064:	200011ac 	.word	0x200011ac

08004068 <_Balloc>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800406c:	4604      	mov	r4, r0
 800406e:	460d      	mov	r5, r1
 8004070:	b976      	cbnz	r6, 8004090 <_Balloc+0x28>
 8004072:	2010      	movs	r0, #16
 8004074:	f7fe fafe 	bl	8002674 <malloc>
 8004078:	4602      	mov	r2, r0
 800407a:	6260      	str	r0, [r4, #36]	; 0x24
 800407c:	b920      	cbnz	r0, 8004088 <_Balloc+0x20>
 800407e:	2166      	movs	r1, #102	; 0x66
 8004080:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <_Balloc+0x78>)
 8004082:	4818      	ldr	r0, [pc, #96]	; (80040e4 <_Balloc+0x7c>)
 8004084:	f7ff f82a 	bl	80030dc <__assert_func>
 8004088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800408c:	6006      	str	r6, [r0, #0]
 800408e:	60c6      	str	r6, [r0, #12]
 8004090:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004092:	68f3      	ldr	r3, [r6, #12]
 8004094:	b183      	cbz	r3, 80040b8 <_Balloc+0x50>
 8004096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800409e:	b9b8      	cbnz	r0, 80040d0 <_Balloc+0x68>
 80040a0:	2101      	movs	r1, #1
 80040a2:	fa01 f605 	lsl.w	r6, r1, r5
 80040a6:	1d72      	adds	r2, r6, #5
 80040a8:	4620      	mov	r0, r4
 80040aa:	0092      	lsls	r2, r2, #2
 80040ac:	f000 fb5e 	bl	800476c <_calloc_r>
 80040b0:	b160      	cbz	r0, 80040cc <_Balloc+0x64>
 80040b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80040b6:	e00e      	b.n	80040d6 <_Balloc+0x6e>
 80040b8:	2221      	movs	r2, #33	; 0x21
 80040ba:	2104      	movs	r1, #4
 80040bc:	4620      	mov	r0, r4
 80040be:	f000 fb55 	bl	800476c <_calloc_r>
 80040c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040c4:	60f0      	str	r0, [r6, #12]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e4      	bne.n	8004096 <_Balloc+0x2e>
 80040cc:	2000      	movs	r0, #0
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	6802      	ldr	r2, [r0, #0]
 80040d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80040d6:	2300      	movs	r3, #0
 80040d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80040dc:	e7f7      	b.n	80040ce <_Balloc+0x66>
 80040de:	bf00      	nop
 80040e0:	080051b1 	.word	0x080051b1
 80040e4:	08005298 	.word	0x08005298

080040e8 <_Bfree>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80040ec:	4605      	mov	r5, r0
 80040ee:	460c      	mov	r4, r1
 80040f0:	b976      	cbnz	r6, 8004110 <_Bfree+0x28>
 80040f2:	2010      	movs	r0, #16
 80040f4:	f7fe fabe 	bl	8002674 <malloc>
 80040f8:	4602      	mov	r2, r0
 80040fa:	6268      	str	r0, [r5, #36]	; 0x24
 80040fc:	b920      	cbnz	r0, 8004108 <_Bfree+0x20>
 80040fe:	218a      	movs	r1, #138	; 0x8a
 8004100:	4b08      	ldr	r3, [pc, #32]	; (8004124 <_Bfree+0x3c>)
 8004102:	4809      	ldr	r0, [pc, #36]	; (8004128 <_Bfree+0x40>)
 8004104:	f7fe ffea 	bl	80030dc <__assert_func>
 8004108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800410c:	6006      	str	r6, [r0, #0]
 800410e:	60c6      	str	r6, [r0, #12]
 8004110:	b13c      	cbz	r4, 8004122 <_Bfree+0x3a>
 8004112:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004114:	6862      	ldr	r2, [r4, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800411c:	6021      	str	r1, [r4, #0]
 800411e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004122:	bd70      	pop	{r4, r5, r6, pc}
 8004124:	080051b1 	.word	0x080051b1
 8004128:	08005298 	.word	0x08005298

0800412c <__multadd>:
 800412c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004130:	4698      	mov	r8, r3
 8004132:	460c      	mov	r4, r1
 8004134:	2300      	movs	r3, #0
 8004136:	690e      	ldr	r6, [r1, #16]
 8004138:	4607      	mov	r7, r0
 800413a:	f101 0014 	add.w	r0, r1, #20
 800413e:	6805      	ldr	r5, [r0, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	b2a9      	uxth	r1, r5
 8004144:	fb02 8101 	mla	r1, r2, r1, r8
 8004148:	0c2d      	lsrs	r5, r5, #16
 800414a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800414e:	fb02 c505 	mla	r5, r2, r5, ip
 8004152:	b289      	uxth	r1, r1
 8004154:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004158:	429e      	cmp	r6, r3
 800415a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800415e:	f840 1b04 	str.w	r1, [r0], #4
 8004162:	dcec      	bgt.n	800413e <__multadd+0x12>
 8004164:	f1b8 0f00 	cmp.w	r8, #0
 8004168:	d022      	beq.n	80041b0 <__multadd+0x84>
 800416a:	68a3      	ldr	r3, [r4, #8]
 800416c:	42b3      	cmp	r3, r6
 800416e:	dc19      	bgt.n	80041a4 <__multadd+0x78>
 8004170:	6861      	ldr	r1, [r4, #4]
 8004172:	4638      	mov	r0, r7
 8004174:	3101      	adds	r1, #1
 8004176:	f7ff ff77 	bl	8004068 <_Balloc>
 800417a:	4605      	mov	r5, r0
 800417c:	b928      	cbnz	r0, 800418a <__multadd+0x5e>
 800417e:	4602      	mov	r2, r0
 8004180:	21b5      	movs	r1, #181	; 0xb5
 8004182:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <__multadd+0x8c>)
 8004184:	480d      	ldr	r0, [pc, #52]	; (80041bc <__multadd+0x90>)
 8004186:	f7fe ffa9 	bl	80030dc <__assert_func>
 800418a:	6922      	ldr	r2, [r4, #16]
 800418c:	f104 010c 	add.w	r1, r4, #12
 8004190:	3202      	adds	r2, #2
 8004192:	0092      	lsls	r2, r2, #2
 8004194:	300c      	adds	r0, #12
 8004196:	f7fe fa75 	bl	8002684 <memcpy>
 800419a:	4621      	mov	r1, r4
 800419c:	4638      	mov	r0, r7
 800419e:	f7ff ffa3 	bl	80040e8 <_Bfree>
 80041a2:	462c      	mov	r4, r5
 80041a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80041a8:	3601      	adds	r6, #1
 80041aa:	f8c3 8014 	str.w	r8, [r3, #20]
 80041ae:	6126      	str	r6, [r4, #16]
 80041b0:	4620      	mov	r0, r4
 80041b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b6:	bf00      	nop
 80041b8:	08005227 	.word	0x08005227
 80041bc:	08005298 	.word	0x08005298

080041c0 <__hi0bits>:
 80041c0:	0c02      	lsrs	r2, r0, #16
 80041c2:	0412      	lsls	r2, r2, #16
 80041c4:	4603      	mov	r3, r0
 80041c6:	b9ca      	cbnz	r2, 80041fc <__hi0bits+0x3c>
 80041c8:	0403      	lsls	r3, r0, #16
 80041ca:	2010      	movs	r0, #16
 80041cc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80041d0:	bf04      	itt	eq
 80041d2:	021b      	lsleq	r3, r3, #8
 80041d4:	3008      	addeq	r0, #8
 80041d6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80041da:	bf04      	itt	eq
 80041dc:	011b      	lsleq	r3, r3, #4
 80041de:	3004      	addeq	r0, #4
 80041e0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80041e4:	bf04      	itt	eq
 80041e6:	009b      	lsleq	r3, r3, #2
 80041e8:	3002      	addeq	r0, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	db05      	blt.n	80041fa <__hi0bits+0x3a>
 80041ee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80041f2:	f100 0001 	add.w	r0, r0, #1
 80041f6:	bf08      	it	eq
 80041f8:	2020      	moveq	r0, #32
 80041fa:	4770      	bx	lr
 80041fc:	2000      	movs	r0, #0
 80041fe:	e7e5      	b.n	80041cc <__hi0bits+0xc>

08004200 <__lo0bits>:
 8004200:	6803      	ldr	r3, [r0, #0]
 8004202:	4602      	mov	r2, r0
 8004204:	f013 0007 	ands.w	r0, r3, #7
 8004208:	d00b      	beq.n	8004222 <__lo0bits+0x22>
 800420a:	07d9      	lsls	r1, r3, #31
 800420c:	d422      	bmi.n	8004254 <__lo0bits+0x54>
 800420e:	0798      	lsls	r0, r3, #30
 8004210:	bf49      	itett	mi
 8004212:	085b      	lsrmi	r3, r3, #1
 8004214:	089b      	lsrpl	r3, r3, #2
 8004216:	2001      	movmi	r0, #1
 8004218:	6013      	strmi	r3, [r2, #0]
 800421a:	bf5c      	itt	pl
 800421c:	2002      	movpl	r0, #2
 800421e:	6013      	strpl	r3, [r2, #0]
 8004220:	4770      	bx	lr
 8004222:	b299      	uxth	r1, r3
 8004224:	b909      	cbnz	r1, 800422a <__lo0bits+0x2a>
 8004226:	2010      	movs	r0, #16
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800422e:	bf04      	itt	eq
 8004230:	0a1b      	lsreq	r3, r3, #8
 8004232:	3008      	addeq	r0, #8
 8004234:	0719      	lsls	r1, r3, #28
 8004236:	bf04      	itt	eq
 8004238:	091b      	lsreq	r3, r3, #4
 800423a:	3004      	addeq	r0, #4
 800423c:	0799      	lsls	r1, r3, #30
 800423e:	bf04      	itt	eq
 8004240:	089b      	lsreq	r3, r3, #2
 8004242:	3002      	addeq	r0, #2
 8004244:	07d9      	lsls	r1, r3, #31
 8004246:	d403      	bmi.n	8004250 <__lo0bits+0x50>
 8004248:	085b      	lsrs	r3, r3, #1
 800424a:	f100 0001 	add.w	r0, r0, #1
 800424e:	d003      	beq.n	8004258 <__lo0bits+0x58>
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	4770      	bx	lr
 8004254:	2000      	movs	r0, #0
 8004256:	4770      	bx	lr
 8004258:	2020      	movs	r0, #32
 800425a:	4770      	bx	lr

0800425c <__i2b>:
 800425c:	b510      	push	{r4, lr}
 800425e:	460c      	mov	r4, r1
 8004260:	2101      	movs	r1, #1
 8004262:	f7ff ff01 	bl	8004068 <_Balloc>
 8004266:	4602      	mov	r2, r0
 8004268:	b928      	cbnz	r0, 8004276 <__i2b+0x1a>
 800426a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800426e:	4b04      	ldr	r3, [pc, #16]	; (8004280 <__i2b+0x24>)
 8004270:	4804      	ldr	r0, [pc, #16]	; (8004284 <__i2b+0x28>)
 8004272:	f7fe ff33 	bl	80030dc <__assert_func>
 8004276:	2301      	movs	r3, #1
 8004278:	6144      	str	r4, [r0, #20]
 800427a:	6103      	str	r3, [r0, #16]
 800427c:	bd10      	pop	{r4, pc}
 800427e:	bf00      	nop
 8004280:	08005227 	.word	0x08005227
 8004284:	08005298 	.word	0x08005298

08004288 <__multiply>:
 8004288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428c:	4614      	mov	r4, r2
 800428e:	690a      	ldr	r2, [r1, #16]
 8004290:	6923      	ldr	r3, [r4, #16]
 8004292:	460d      	mov	r5, r1
 8004294:	429a      	cmp	r2, r3
 8004296:	bfbe      	ittt	lt
 8004298:	460b      	movlt	r3, r1
 800429a:	4625      	movlt	r5, r4
 800429c:	461c      	movlt	r4, r3
 800429e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80042a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80042a6:	68ab      	ldr	r3, [r5, #8]
 80042a8:	6869      	ldr	r1, [r5, #4]
 80042aa:	eb0a 0709 	add.w	r7, sl, r9
 80042ae:	42bb      	cmp	r3, r7
 80042b0:	b085      	sub	sp, #20
 80042b2:	bfb8      	it	lt
 80042b4:	3101      	addlt	r1, #1
 80042b6:	f7ff fed7 	bl	8004068 <_Balloc>
 80042ba:	b930      	cbnz	r0, 80042ca <__multiply+0x42>
 80042bc:	4602      	mov	r2, r0
 80042be:	f240 115d 	movw	r1, #349	; 0x15d
 80042c2:	4b41      	ldr	r3, [pc, #260]	; (80043c8 <__multiply+0x140>)
 80042c4:	4841      	ldr	r0, [pc, #260]	; (80043cc <__multiply+0x144>)
 80042c6:	f7fe ff09 	bl	80030dc <__assert_func>
 80042ca:	f100 0614 	add.w	r6, r0, #20
 80042ce:	4633      	mov	r3, r6
 80042d0:	2200      	movs	r2, #0
 80042d2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80042d6:	4543      	cmp	r3, r8
 80042d8:	d31e      	bcc.n	8004318 <__multiply+0x90>
 80042da:	f105 0c14 	add.w	ip, r5, #20
 80042de:	f104 0314 	add.w	r3, r4, #20
 80042e2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80042e6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80042ea:	9202      	str	r2, [sp, #8]
 80042ec:	ebac 0205 	sub.w	r2, ip, r5
 80042f0:	3a15      	subs	r2, #21
 80042f2:	f022 0203 	bic.w	r2, r2, #3
 80042f6:	3204      	adds	r2, #4
 80042f8:	f105 0115 	add.w	r1, r5, #21
 80042fc:	458c      	cmp	ip, r1
 80042fe:	bf38      	it	cc
 8004300:	2204      	movcc	r2, #4
 8004302:	9201      	str	r2, [sp, #4]
 8004304:	9a02      	ldr	r2, [sp, #8]
 8004306:	9303      	str	r3, [sp, #12]
 8004308:	429a      	cmp	r2, r3
 800430a:	d808      	bhi.n	800431e <__multiply+0x96>
 800430c:	2f00      	cmp	r7, #0
 800430e:	dc55      	bgt.n	80043bc <__multiply+0x134>
 8004310:	6107      	str	r7, [r0, #16]
 8004312:	b005      	add	sp, #20
 8004314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004318:	f843 2b04 	str.w	r2, [r3], #4
 800431c:	e7db      	b.n	80042d6 <__multiply+0x4e>
 800431e:	f8b3 a000 	ldrh.w	sl, [r3]
 8004322:	f1ba 0f00 	cmp.w	sl, #0
 8004326:	d020      	beq.n	800436a <__multiply+0xe2>
 8004328:	46b1      	mov	r9, r6
 800432a:	2200      	movs	r2, #0
 800432c:	f105 0e14 	add.w	lr, r5, #20
 8004330:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004334:	f8d9 b000 	ldr.w	fp, [r9]
 8004338:	b2a1      	uxth	r1, r4
 800433a:	fa1f fb8b 	uxth.w	fp, fp
 800433e:	fb0a b101 	mla	r1, sl, r1, fp
 8004342:	4411      	add	r1, r2
 8004344:	f8d9 2000 	ldr.w	r2, [r9]
 8004348:	0c24      	lsrs	r4, r4, #16
 800434a:	0c12      	lsrs	r2, r2, #16
 800434c:	fb0a 2404 	mla	r4, sl, r4, r2
 8004350:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004354:	b289      	uxth	r1, r1
 8004356:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800435a:	45f4      	cmp	ip, lr
 800435c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004360:	f849 1b04 	str.w	r1, [r9], #4
 8004364:	d8e4      	bhi.n	8004330 <__multiply+0xa8>
 8004366:	9901      	ldr	r1, [sp, #4]
 8004368:	5072      	str	r2, [r6, r1]
 800436a:	9a03      	ldr	r2, [sp, #12]
 800436c:	3304      	adds	r3, #4
 800436e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004372:	f1b9 0f00 	cmp.w	r9, #0
 8004376:	d01f      	beq.n	80043b8 <__multiply+0x130>
 8004378:	46b6      	mov	lr, r6
 800437a:	f04f 0a00 	mov.w	sl, #0
 800437e:	6834      	ldr	r4, [r6, #0]
 8004380:	f105 0114 	add.w	r1, r5, #20
 8004384:	880a      	ldrh	r2, [r1, #0]
 8004386:	f8be b002 	ldrh.w	fp, [lr, #2]
 800438a:	b2a4      	uxth	r4, r4
 800438c:	fb09 b202 	mla	r2, r9, r2, fp
 8004390:	4492      	add	sl, r2
 8004392:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004396:	f84e 4b04 	str.w	r4, [lr], #4
 800439a:	f851 4b04 	ldr.w	r4, [r1], #4
 800439e:	f8be 2000 	ldrh.w	r2, [lr]
 80043a2:	0c24      	lsrs	r4, r4, #16
 80043a4:	fb09 2404 	mla	r4, r9, r4, r2
 80043a8:	458c      	cmp	ip, r1
 80043aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80043ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80043b2:	d8e7      	bhi.n	8004384 <__multiply+0xfc>
 80043b4:	9a01      	ldr	r2, [sp, #4]
 80043b6:	50b4      	str	r4, [r6, r2]
 80043b8:	3604      	adds	r6, #4
 80043ba:	e7a3      	b.n	8004304 <__multiply+0x7c>
 80043bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1a5      	bne.n	8004310 <__multiply+0x88>
 80043c4:	3f01      	subs	r7, #1
 80043c6:	e7a1      	b.n	800430c <__multiply+0x84>
 80043c8:	08005227 	.word	0x08005227
 80043cc:	08005298 	.word	0x08005298

080043d0 <__pow5mult>:
 80043d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043d4:	4615      	mov	r5, r2
 80043d6:	f012 0203 	ands.w	r2, r2, #3
 80043da:	4606      	mov	r6, r0
 80043dc:	460f      	mov	r7, r1
 80043de:	d007      	beq.n	80043f0 <__pow5mult+0x20>
 80043e0:	4c25      	ldr	r4, [pc, #148]	; (8004478 <__pow5mult+0xa8>)
 80043e2:	3a01      	subs	r2, #1
 80043e4:	2300      	movs	r3, #0
 80043e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80043ea:	f7ff fe9f 	bl	800412c <__multadd>
 80043ee:	4607      	mov	r7, r0
 80043f0:	10ad      	asrs	r5, r5, #2
 80043f2:	d03d      	beq.n	8004470 <__pow5mult+0xa0>
 80043f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80043f6:	b97c      	cbnz	r4, 8004418 <__pow5mult+0x48>
 80043f8:	2010      	movs	r0, #16
 80043fa:	f7fe f93b 	bl	8002674 <malloc>
 80043fe:	4602      	mov	r2, r0
 8004400:	6270      	str	r0, [r6, #36]	; 0x24
 8004402:	b928      	cbnz	r0, 8004410 <__pow5mult+0x40>
 8004404:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004408:	4b1c      	ldr	r3, [pc, #112]	; (800447c <__pow5mult+0xac>)
 800440a:	481d      	ldr	r0, [pc, #116]	; (8004480 <__pow5mult+0xb0>)
 800440c:	f7fe fe66 	bl	80030dc <__assert_func>
 8004410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004414:	6004      	str	r4, [r0, #0]
 8004416:	60c4      	str	r4, [r0, #12]
 8004418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800441c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004420:	b94c      	cbnz	r4, 8004436 <__pow5mult+0x66>
 8004422:	f240 2171 	movw	r1, #625	; 0x271
 8004426:	4630      	mov	r0, r6
 8004428:	f7ff ff18 	bl	800425c <__i2b>
 800442c:	2300      	movs	r3, #0
 800442e:	4604      	mov	r4, r0
 8004430:	f8c8 0008 	str.w	r0, [r8, #8]
 8004434:	6003      	str	r3, [r0, #0]
 8004436:	f04f 0900 	mov.w	r9, #0
 800443a:	07eb      	lsls	r3, r5, #31
 800443c:	d50a      	bpl.n	8004454 <__pow5mult+0x84>
 800443e:	4639      	mov	r1, r7
 8004440:	4622      	mov	r2, r4
 8004442:	4630      	mov	r0, r6
 8004444:	f7ff ff20 	bl	8004288 <__multiply>
 8004448:	4680      	mov	r8, r0
 800444a:	4639      	mov	r1, r7
 800444c:	4630      	mov	r0, r6
 800444e:	f7ff fe4b 	bl	80040e8 <_Bfree>
 8004452:	4647      	mov	r7, r8
 8004454:	106d      	asrs	r5, r5, #1
 8004456:	d00b      	beq.n	8004470 <__pow5mult+0xa0>
 8004458:	6820      	ldr	r0, [r4, #0]
 800445a:	b938      	cbnz	r0, 800446c <__pow5mult+0x9c>
 800445c:	4622      	mov	r2, r4
 800445e:	4621      	mov	r1, r4
 8004460:	4630      	mov	r0, r6
 8004462:	f7ff ff11 	bl	8004288 <__multiply>
 8004466:	6020      	str	r0, [r4, #0]
 8004468:	f8c0 9000 	str.w	r9, [r0]
 800446c:	4604      	mov	r4, r0
 800446e:	e7e4      	b.n	800443a <__pow5mult+0x6a>
 8004470:	4638      	mov	r0, r7
 8004472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004476:	bf00      	nop
 8004478:	080053e8 	.word	0x080053e8
 800447c:	080051b1 	.word	0x080051b1
 8004480:	08005298 	.word	0x08005298

08004484 <__lshift>:
 8004484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004488:	460c      	mov	r4, r1
 800448a:	4607      	mov	r7, r0
 800448c:	4691      	mov	r9, r2
 800448e:	6923      	ldr	r3, [r4, #16]
 8004490:	6849      	ldr	r1, [r1, #4]
 8004492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004496:	68a3      	ldr	r3, [r4, #8]
 8004498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800449c:	f108 0601 	add.w	r6, r8, #1
 80044a0:	42b3      	cmp	r3, r6
 80044a2:	db0b      	blt.n	80044bc <__lshift+0x38>
 80044a4:	4638      	mov	r0, r7
 80044a6:	f7ff fddf 	bl	8004068 <_Balloc>
 80044aa:	4605      	mov	r5, r0
 80044ac:	b948      	cbnz	r0, 80044c2 <__lshift+0x3e>
 80044ae:	4602      	mov	r2, r0
 80044b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80044b4:	4b27      	ldr	r3, [pc, #156]	; (8004554 <__lshift+0xd0>)
 80044b6:	4828      	ldr	r0, [pc, #160]	; (8004558 <__lshift+0xd4>)
 80044b8:	f7fe fe10 	bl	80030dc <__assert_func>
 80044bc:	3101      	adds	r1, #1
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	e7ee      	b.n	80044a0 <__lshift+0x1c>
 80044c2:	2300      	movs	r3, #0
 80044c4:	f100 0114 	add.w	r1, r0, #20
 80044c8:	f100 0210 	add.w	r2, r0, #16
 80044cc:	4618      	mov	r0, r3
 80044ce:	4553      	cmp	r3, sl
 80044d0:	db33      	blt.n	800453a <__lshift+0xb6>
 80044d2:	6920      	ldr	r0, [r4, #16]
 80044d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80044d8:	f104 0314 	add.w	r3, r4, #20
 80044dc:	f019 091f 	ands.w	r9, r9, #31
 80044e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80044e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80044e8:	d02b      	beq.n	8004542 <__lshift+0xbe>
 80044ea:	468a      	mov	sl, r1
 80044ec:	2200      	movs	r2, #0
 80044ee:	f1c9 0e20 	rsb	lr, r9, #32
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	fa00 f009 	lsl.w	r0, r0, r9
 80044f8:	4302      	orrs	r2, r0
 80044fa:	f84a 2b04 	str.w	r2, [sl], #4
 80044fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004502:	459c      	cmp	ip, r3
 8004504:	fa22 f20e 	lsr.w	r2, r2, lr
 8004508:	d8f3      	bhi.n	80044f2 <__lshift+0x6e>
 800450a:	ebac 0304 	sub.w	r3, ip, r4
 800450e:	3b15      	subs	r3, #21
 8004510:	f023 0303 	bic.w	r3, r3, #3
 8004514:	3304      	adds	r3, #4
 8004516:	f104 0015 	add.w	r0, r4, #21
 800451a:	4584      	cmp	ip, r0
 800451c:	bf38      	it	cc
 800451e:	2304      	movcc	r3, #4
 8004520:	50ca      	str	r2, [r1, r3]
 8004522:	b10a      	cbz	r2, 8004528 <__lshift+0xa4>
 8004524:	f108 0602 	add.w	r6, r8, #2
 8004528:	3e01      	subs	r6, #1
 800452a:	4638      	mov	r0, r7
 800452c:	4621      	mov	r1, r4
 800452e:	612e      	str	r6, [r5, #16]
 8004530:	f7ff fdda 	bl	80040e8 <_Bfree>
 8004534:	4628      	mov	r0, r5
 8004536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453a:	f842 0f04 	str.w	r0, [r2, #4]!
 800453e:	3301      	adds	r3, #1
 8004540:	e7c5      	b.n	80044ce <__lshift+0x4a>
 8004542:	3904      	subs	r1, #4
 8004544:	f853 2b04 	ldr.w	r2, [r3], #4
 8004548:	459c      	cmp	ip, r3
 800454a:	f841 2f04 	str.w	r2, [r1, #4]!
 800454e:	d8f9      	bhi.n	8004544 <__lshift+0xc0>
 8004550:	e7ea      	b.n	8004528 <__lshift+0xa4>
 8004552:	bf00      	nop
 8004554:	08005227 	.word	0x08005227
 8004558:	08005298 	.word	0x08005298

0800455c <__mcmp>:
 800455c:	4603      	mov	r3, r0
 800455e:	690a      	ldr	r2, [r1, #16]
 8004560:	6900      	ldr	r0, [r0, #16]
 8004562:	b530      	push	{r4, r5, lr}
 8004564:	1a80      	subs	r0, r0, r2
 8004566:	d10d      	bne.n	8004584 <__mcmp+0x28>
 8004568:	3314      	adds	r3, #20
 800456a:	3114      	adds	r1, #20
 800456c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004570:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004574:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004578:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800457c:	4295      	cmp	r5, r2
 800457e:	d002      	beq.n	8004586 <__mcmp+0x2a>
 8004580:	d304      	bcc.n	800458c <__mcmp+0x30>
 8004582:	2001      	movs	r0, #1
 8004584:	bd30      	pop	{r4, r5, pc}
 8004586:	42a3      	cmp	r3, r4
 8004588:	d3f4      	bcc.n	8004574 <__mcmp+0x18>
 800458a:	e7fb      	b.n	8004584 <__mcmp+0x28>
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	e7f8      	b.n	8004584 <__mcmp+0x28>
	...

08004594 <__mdiff>:
 8004594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004598:	460c      	mov	r4, r1
 800459a:	4606      	mov	r6, r0
 800459c:	4611      	mov	r1, r2
 800459e:	4620      	mov	r0, r4
 80045a0:	4692      	mov	sl, r2
 80045a2:	f7ff ffdb 	bl	800455c <__mcmp>
 80045a6:	1e05      	subs	r5, r0, #0
 80045a8:	d111      	bne.n	80045ce <__mdiff+0x3a>
 80045aa:	4629      	mov	r1, r5
 80045ac:	4630      	mov	r0, r6
 80045ae:	f7ff fd5b 	bl	8004068 <_Balloc>
 80045b2:	4602      	mov	r2, r0
 80045b4:	b928      	cbnz	r0, 80045c2 <__mdiff+0x2e>
 80045b6:	f240 2132 	movw	r1, #562	; 0x232
 80045ba:	4b3c      	ldr	r3, [pc, #240]	; (80046ac <__mdiff+0x118>)
 80045bc:	483c      	ldr	r0, [pc, #240]	; (80046b0 <__mdiff+0x11c>)
 80045be:	f7fe fd8d 	bl	80030dc <__assert_func>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80045c8:	4610      	mov	r0, r2
 80045ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ce:	bfa4      	itt	ge
 80045d0:	4653      	movge	r3, sl
 80045d2:	46a2      	movge	sl, r4
 80045d4:	4630      	mov	r0, r6
 80045d6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80045da:	bfa6      	itte	ge
 80045dc:	461c      	movge	r4, r3
 80045de:	2500      	movge	r5, #0
 80045e0:	2501      	movlt	r5, #1
 80045e2:	f7ff fd41 	bl	8004068 <_Balloc>
 80045e6:	4602      	mov	r2, r0
 80045e8:	b918      	cbnz	r0, 80045f2 <__mdiff+0x5e>
 80045ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80045ee:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <__mdiff+0x118>)
 80045f0:	e7e4      	b.n	80045bc <__mdiff+0x28>
 80045f2:	f100 0814 	add.w	r8, r0, #20
 80045f6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80045fa:	60c5      	str	r5, [r0, #12]
 80045fc:	f04f 0c00 	mov.w	ip, #0
 8004600:	f10a 0514 	add.w	r5, sl, #20
 8004604:	f10a 0010 	add.w	r0, sl, #16
 8004608:	46c2      	mov	sl, r8
 800460a:	6926      	ldr	r6, [r4, #16]
 800460c:	f104 0914 	add.w	r9, r4, #20
 8004610:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004614:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004618:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800461c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004620:	fa1f f18b 	uxth.w	r1, fp
 8004624:	4461      	add	r1, ip
 8004626:	fa1f fc83 	uxth.w	ip, r3
 800462a:	0c1b      	lsrs	r3, r3, #16
 800462c:	eba1 010c 	sub.w	r1, r1, ip
 8004630:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004634:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004638:	b289      	uxth	r1, r1
 800463a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800463e:	454e      	cmp	r6, r9
 8004640:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004644:	f84a 3b04 	str.w	r3, [sl], #4
 8004648:	d8e6      	bhi.n	8004618 <__mdiff+0x84>
 800464a:	1b33      	subs	r3, r6, r4
 800464c:	3b15      	subs	r3, #21
 800464e:	f023 0303 	bic.w	r3, r3, #3
 8004652:	3415      	adds	r4, #21
 8004654:	3304      	adds	r3, #4
 8004656:	42a6      	cmp	r6, r4
 8004658:	bf38      	it	cc
 800465a:	2304      	movcc	r3, #4
 800465c:	441d      	add	r5, r3
 800465e:	4443      	add	r3, r8
 8004660:	461e      	mov	r6, r3
 8004662:	462c      	mov	r4, r5
 8004664:	4574      	cmp	r4, lr
 8004666:	d30e      	bcc.n	8004686 <__mdiff+0xf2>
 8004668:	f10e 0103 	add.w	r1, lr, #3
 800466c:	1b49      	subs	r1, r1, r5
 800466e:	f021 0103 	bic.w	r1, r1, #3
 8004672:	3d03      	subs	r5, #3
 8004674:	45ae      	cmp	lr, r5
 8004676:	bf38      	it	cc
 8004678:	2100      	movcc	r1, #0
 800467a:	4419      	add	r1, r3
 800467c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004680:	b18b      	cbz	r3, 80046a6 <__mdiff+0x112>
 8004682:	6117      	str	r7, [r2, #16]
 8004684:	e7a0      	b.n	80045c8 <__mdiff+0x34>
 8004686:	f854 8b04 	ldr.w	r8, [r4], #4
 800468a:	fa1f f188 	uxth.w	r1, r8
 800468e:	4461      	add	r1, ip
 8004690:	1408      	asrs	r0, r1, #16
 8004692:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004696:	b289      	uxth	r1, r1
 8004698:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800469c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80046a0:	f846 1b04 	str.w	r1, [r6], #4
 80046a4:	e7de      	b.n	8004664 <__mdiff+0xd0>
 80046a6:	3f01      	subs	r7, #1
 80046a8:	e7e8      	b.n	800467c <__mdiff+0xe8>
 80046aa:	bf00      	nop
 80046ac:	08005227 	.word	0x08005227
 80046b0:	08005298 	.word	0x08005298

080046b4 <__d2b>:
 80046b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80046b8:	2101      	movs	r1, #1
 80046ba:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80046be:	4690      	mov	r8, r2
 80046c0:	461d      	mov	r5, r3
 80046c2:	f7ff fcd1 	bl	8004068 <_Balloc>
 80046c6:	4604      	mov	r4, r0
 80046c8:	b930      	cbnz	r0, 80046d8 <__d2b+0x24>
 80046ca:	4602      	mov	r2, r0
 80046cc:	f240 310a 	movw	r1, #778	; 0x30a
 80046d0:	4b24      	ldr	r3, [pc, #144]	; (8004764 <__d2b+0xb0>)
 80046d2:	4825      	ldr	r0, [pc, #148]	; (8004768 <__d2b+0xb4>)
 80046d4:	f7fe fd02 	bl	80030dc <__assert_func>
 80046d8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80046dc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80046e0:	bb2d      	cbnz	r5, 800472e <__d2b+0x7a>
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	f1b8 0300 	subs.w	r3, r8, #0
 80046e8:	d026      	beq.n	8004738 <__d2b+0x84>
 80046ea:	4668      	mov	r0, sp
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	f7ff fd87 	bl	8004200 <__lo0bits>
 80046f2:	9900      	ldr	r1, [sp, #0]
 80046f4:	b1f0      	cbz	r0, 8004734 <__d2b+0x80>
 80046f6:	9a01      	ldr	r2, [sp, #4]
 80046f8:	f1c0 0320 	rsb	r3, r0, #32
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	430b      	orrs	r3, r1
 8004702:	40c2      	lsrs	r2, r0
 8004704:	6163      	str	r3, [r4, #20]
 8004706:	9201      	str	r2, [sp, #4]
 8004708:	9b01      	ldr	r3, [sp, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	bf14      	ite	ne
 800470e:	2102      	movne	r1, #2
 8004710:	2101      	moveq	r1, #1
 8004712:	61a3      	str	r3, [r4, #24]
 8004714:	6121      	str	r1, [r4, #16]
 8004716:	b1c5      	cbz	r5, 800474a <__d2b+0x96>
 8004718:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800471c:	4405      	add	r5, r0
 800471e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004722:	603d      	str	r5, [r7, #0]
 8004724:	6030      	str	r0, [r6, #0]
 8004726:	4620      	mov	r0, r4
 8004728:	b002      	add	sp, #8
 800472a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800472e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004732:	e7d6      	b.n	80046e2 <__d2b+0x2e>
 8004734:	6161      	str	r1, [r4, #20]
 8004736:	e7e7      	b.n	8004708 <__d2b+0x54>
 8004738:	a801      	add	r0, sp, #4
 800473a:	f7ff fd61 	bl	8004200 <__lo0bits>
 800473e:	2101      	movs	r1, #1
 8004740:	9b01      	ldr	r3, [sp, #4]
 8004742:	6121      	str	r1, [r4, #16]
 8004744:	6163      	str	r3, [r4, #20]
 8004746:	3020      	adds	r0, #32
 8004748:	e7e5      	b.n	8004716 <__d2b+0x62>
 800474a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800474e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004752:	6038      	str	r0, [r7, #0]
 8004754:	6918      	ldr	r0, [r3, #16]
 8004756:	f7ff fd33 	bl	80041c0 <__hi0bits>
 800475a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800475e:	6031      	str	r1, [r6, #0]
 8004760:	e7e1      	b.n	8004726 <__d2b+0x72>
 8004762:	bf00      	nop
 8004764:	08005227 	.word	0x08005227
 8004768:	08005298 	.word	0x08005298

0800476c <_calloc_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	fb02 f501 	mul.w	r5, r2, r1
 8004772:	4629      	mov	r1, r5
 8004774:	f7fd ffe8 	bl	8002748 <_malloc_r>
 8004778:	4604      	mov	r4, r0
 800477a:	b118      	cbz	r0, 8004784 <_calloc_r+0x18>
 800477c:	462a      	mov	r2, r5
 800477e:	2100      	movs	r1, #0
 8004780:	f7fd ff8e 	bl	80026a0 <memset>
 8004784:	4620      	mov	r0, r4
 8004786:	bd38      	pop	{r3, r4, r5, pc}

08004788 <__sfputc_r>:
 8004788:	6893      	ldr	r3, [r2, #8]
 800478a:	b410      	push	{r4}
 800478c:	3b01      	subs	r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	6093      	str	r3, [r2, #8]
 8004792:	da07      	bge.n	80047a4 <__sfputc_r+0x1c>
 8004794:	6994      	ldr	r4, [r2, #24]
 8004796:	42a3      	cmp	r3, r4
 8004798:	db01      	blt.n	800479e <__sfputc_r+0x16>
 800479a:	290a      	cmp	r1, #10
 800479c:	d102      	bne.n	80047a4 <__sfputc_r+0x1c>
 800479e:	bc10      	pop	{r4}
 80047a0:	f000 b98e 	b.w	8004ac0 <__swbuf_r>
 80047a4:	6813      	ldr	r3, [r2, #0]
 80047a6:	1c58      	adds	r0, r3, #1
 80047a8:	6010      	str	r0, [r2, #0]
 80047aa:	7019      	strb	r1, [r3, #0]
 80047ac:	4608      	mov	r0, r1
 80047ae:	bc10      	pop	{r4}
 80047b0:	4770      	bx	lr

080047b2 <__sfputs_r>:
 80047b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	4614      	mov	r4, r2
 80047ba:	18d5      	adds	r5, r2, r3
 80047bc:	42ac      	cmp	r4, r5
 80047be:	d101      	bne.n	80047c4 <__sfputs_r+0x12>
 80047c0:	2000      	movs	r0, #0
 80047c2:	e007      	b.n	80047d4 <__sfputs_r+0x22>
 80047c4:	463a      	mov	r2, r7
 80047c6:	4630      	mov	r0, r6
 80047c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047cc:	f7ff ffdc 	bl	8004788 <__sfputc_r>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d1f3      	bne.n	80047bc <__sfputs_r+0xa>
 80047d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047d8 <_vfiprintf_r>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	460d      	mov	r5, r1
 80047de:	4614      	mov	r4, r2
 80047e0:	4698      	mov	r8, r3
 80047e2:	4606      	mov	r6, r0
 80047e4:	b09d      	sub	sp, #116	; 0x74
 80047e6:	b118      	cbz	r0, 80047f0 <_vfiprintf_r+0x18>
 80047e8:	6983      	ldr	r3, [r0, #24]
 80047ea:	b90b      	cbnz	r3, 80047f0 <_vfiprintf_r+0x18>
 80047ec:	f7ff fb6a 	bl	8003ec4 <__sinit>
 80047f0:	4b89      	ldr	r3, [pc, #548]	; (8004a18 <_vfiprintf_r+0x240>)
 80047f2:	429d      	cmp	r5, r3
 80047f4:	d11b      	bne.n	800482e <_vfiprintf_r+0x56>
 80047f6:	6875      	ldr	r5, [r6, #4]
 80047f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047fa:	07d9      	lsls	r1, r3, #31
 80047fc:	d405      	bmi.n	800480a <_vfiprintf_r+0x32>
 80047fe:	89ab      	ldrh	r3, [r5, #12]
 8004800:	059a      	lsls	r2, r3, #22
 8004802:	d402      	bmi.n	800480a <_vfiprintf_r+0x32>
 8004804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004806:	f7ff fc12 	bl	800402e <__retarget_lock_acquire_recursive>
 800480a:	89ab      	ldrh	r3, [r5, #12]
 800480c:	071b      	lsls	r3, r3, #28
 800480e:	d501      	bpl.n	8004814 <_vfiprintf_r+0x3c>
 8004810:	692b      	ldr	r3, [r5, #16]
 8004812:	b9eb      	cbnz	r3, 8004850 <_vfiprintf_r+0x78>
 8004814:	4629      	mov	r1, r5
 8004816:	4630      	mov	r0, r6
 8004818:	f000 f9b6 	bl	8004b88 <__swsetup_r>
 800481c:	b1c0      	cbz	r0, 8004850 <_vfiprintf_r+0x78>
 800481e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004820:	07dc      	lsls	r4, r3, #31
 8004822:	d50e      	bpl.n	8004842 <_vfiprintf_r+0x6a>
 8004824:	f04f 30ff 	mov.w	r0, #4294967295
 8004828:	b01d      	add	sp, #116	; 0x74
 800482a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482e:	4b7b      	ldr	r3, [pc, #492]	; (8004a1c <_vfiprintf_r+0x244>)
 8004830:	429d      	cmp	r5, r3
 8004832:	d101      	bne.n	8004838 <_vfiprintf_r+0x60>
 8004834:	68b5      	ldr	r5, [r6, #8]
 8004836:	e7df      	b.n	80047f8 <_vfiprintf_r+0x20>
 8004838:	4b79      	ldr	r3, [pc, #484]	; (8004a20 <_vfiprintf_r+0x248>)
 800483a:	429d      	cmp	r5, r3
 800483c:	bf08      	it	eq
 800483e:	68f5      	ldreq	r5, [r6, #12]
 8004840:	e7da      	b.n	80047f8 <_vfiprintf_r+0x20>
 8004842:	89ab      	ldrh	r3, [r5, #12]
 8004844:	0598      	lsls	r0, r3, #22
 8004846:	d4ed      	bmi.n	8004824 <_vfiprintf_r+0x4c>
 8004848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800484a:	f7ff fbf1 	bl	8004030 <__retarget_lock_release_recursive>
 800484e:	e7e9      	b.n	8004824 <_vfiprintf_r+0x4c>
 8004850:	2300      	movs	r3, #0
 8004852:	9309      	str	r3, [sp, #36]	; 0x24
 8004854:	2320      	movs	r3, #32
 8004856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800485a:	2330      	movs	r3, #48	; 0x30
 800485c:	f04f 0901 	mov.w	r9, #1
 8004860:	f8cd 800c 	str.w	r8, [sp, #12]
 8004864:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004a24 <_vfiprintf_r+0x24c>
 8004868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800486c:	4623      	mov	r3, r4
 800486e:	469a      	mov	sl, r3
 8004870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004874:	b10a      	cbz	r2, 800487a <_vfiprintf_r+0xa2>
 8004876:	2a25      	cmp	r2, #37	; 0x25
 8004878:	d1f9      	bne.n	800486e <_vfiprintf_r+0x96>
 800487a:	ebba 0b04 	subs.w	fp, sl, r4
 800487e:	d00b      	beq.n	8004898 <_vfiprintf_r+0xc0>
 8004880:	465b      	mov	r3, fp
 8004882:	4622      	mov	r2, r4
 8004884:	4629      	mov	r1, r5
 8004886:	4630      	mov	r0, r6
 8004888:	f7ff ff93 	bl	80047b2 <__sfputs_r>
 800488c:	3001      	adds	r0, #1
 800488e:	f000 80aa 	beq.w	80049e6 <_vfiprintf_r+0x20e>
 8004892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004894:	445a      	add	r2, fp
 8004896:	9209      	str	r2, [sp, #36]	; 0x24
 8004898:	f89a 3000 	ldrb.w	r3, [sl]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80a2 	beq.w	80049e6 <_vfiprintf_r+0x20e>
 80048a2:	2300      	movs	r3, #0
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295
 80048a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ac:	f10a 0a01 	add.w	sl, sl, #1
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	9307      	str	r3, [sp, #28]
 80048b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048b8:	931a      	str	r3, [sp, #104]	; 0x68
 80048ba:	4654      	mov	r4, sl
 80048bc:	2205      	movs	r2, #5
 80048be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c2:	4858      	ldr	r0, [pc, #352]	; (8004a24 <_vfiprintf_r+0x24c>)
 80048c4:	f7ff fbb5 	bl	8004032 <memchr>
 80048c8:	9a04      	ldr	r2, [sp, #16]
 80048ca:	b9d8      	cbnz	r0, 8004904 <_vfiprintf_r+0x12c>
 80048cc:	06d1      	lsls	r1, r2, #27
 80048ce:	bf44      	itt	mi
 80048d0:	2320      	movmi	r3, #32
 80048d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048d6:	0713      	lsls	r3, r2, #28
 80048d8:	bf44      	itt	mi
 80048da:	232b      	movmi	r3, #43	; 0x2b
 80048dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048e0:	f89a 3000 	ldrb.w	r3, [sl]
 80048e4:	2b2a      	cmp	r3, #42	; 0x2a
 80048e6:	d015      	beq.n	8004914 <_vfiprintf_r+0x13c>
 80048e8:	4654      	mov	r4, sl
 80048ea:	2000      	movs	r0, #0
 80048ec:	f04f 0c0a 	mov.w	ip, #10
 80048f0:	9a07      	ldr	r2, [sp, #28]
 80048f2:	4621      	mov	r1, r4
 80048f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048f8:	3b30      	subs	r3, #48	; 0x30
 80048fa:	2b09      	cmp	r3, #9
 80048fc:	d94e      	bls.n	800499c <_vfiprintf_r+0x1c4>
 80048fe:	b1b0      	cbz	r0, 800492e <_vfiprintf_r+0x156>
 8004900:	9207      	str	r2, [sp, #28]
 8004902:	e014      	b.n	800492e <_vfiprintf_r+0x156>
 8004904:	eba0 0308 	sub.w	r3, r0, r8
 8004908:	fa09 f303 	lsl.w	r3, r9, r3
 800490c:	4313      	orrs	r3, r2
 800490e:	46a2      	mov	sl, r4
 8004910:	9304      	str	r3, [sp, #16]
 8004912:	e7d2      	b.n	80048ba <_vfiprintf_r+0xe2>
 8004914:	9b03      	ldr	r3, [sp, #12]
 8004916:	1d19      	adds	r1, r3, #4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	9103      	str	r1, [sp, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	bfbb      	ittet	lt
 8004920:	425b      	neglt	r3, r3
 8004922:	f042 0202 	orrlt.w	r2, r2, #2
 8004926:	9307      	strge	r3, [sp, #28]
 8004928:	9307      	strlt	r3, [sp, #28]
 800492a:	bfb8      	it	lt
 800492c:	9204      	strlt	r2, [sp, #16]
 800492e:	7823      	ldrb	r3, [r4, #0]
 8004930:	2b2e      	cmp	r3, #46	; 0x2e
 8004932:	d10c      	bne.n	800494e <_vfiprintf_r+0x176>
 8004934:	7863      	ldrb	r3, [r4, #1]
 8004936:	2b2a      	cmp	r3, #42	; 0x2a
 8004938:	d135      	bne.n	80049a6 <_vfiprintf_r+0x1ce>
 800493a:	9b03      	ldr	r3, [sp, #12]
 800493c:	3402      	adds	r4, #2
 800493e:	1d1a      	adds	r2, r3, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	9203      	str	r2, [sp, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	bfb8      	it	lt
 8004948:	f04f 33ff 	movlt.w	r3, #4294967295
 800494c:	9305      	str	r3, [sp, #20]
 800494e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a34 <_vfiprintf_r+0x25c>
 8004952:	2203      	movs	r2, #3
 8004954:	4650      	mov	r0, sl
 8004956:	7821      	ldrb	r1, [r4, #0]
 8004958:	f7ff fb6b 	bl	8004032 <memchr>
 800495c:	b140      	cbz	r0, 8004970 <_vfiprintf_r+0x198>
 800495e:	2340      	movs	r3, #64	; 0x40
 8004960:	eba0 000a 	sub.w	r0, r0, sl
 8004964:	fa03 f000 	lsl.w	r0, r3, r0
 8004968:	9b04      	ldr	r3, [sp, #16]
 800496a:	3401      	adds	r4, #1
 800496c:	4303      	orrs	r3, r0
 800496e:	9304      	str	r3, [sp, #16]
 8004970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004974:	2206      	movs	r2, #6
 8004976:	482c      	ldr	r0, [pc, #176]	; (8004a28 <_vfiprintf_r+0x250>)
 8004978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800497c:	f7ff fb59 	bl	8004032 <memchr>
 8004980:	2800      	cmp	r0, #0
 8004982:	d03f      	beq.n	8004a04 <_vfiprintf_r+0x22c>
 8004984:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <_vfiprintf_r+0x254>)
 8004986:	bb1b      	cbnz	r3, 80049d0 <_vfiprintf_r+0x1f8>
 8004988:	9b03      	ldr	r3, [sp, #12]
 800498a:	3307      	adds	r3, #7
 800498c:	f023 0307 	bic.w	r3, r3, #7
 8004990:	3308      	adds	r3, #8
 8004992:	9303      	str	r3, [sp, #12]
 8004994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004996:	443b      	add	r3, r7
 8004998:	9309      	str	r3, [sp, #36]	; 0x24
 800499a:	e767      	b.n	800486c <_vfiprintf_r+0x94>
 800499c:	460c      	mov	r4, r1
 800499e:	2001      	movs	r0, #1
 80049a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80049a4:	e7a5      	b.n	80048f2 <_vfiprintf_r+0x11a>
 80049a6:	2300      	movs	r3, #0
 80049a8:	f04f 0c0a 	mov.w	ip, #10
 80049ac:	4619      	mov	r1, r3
 80049ae:	3401      	adds	r4, #1
 80049b0:	9305      	str	r3, [sp, #20]
 80049b2:	4620      	mov	r0, r4
 80049b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049b8:	3a30      	subs	r2, #48	; 0x30
 80049ba:	2a09      	cmp	r2, #9
 80049bc:	d903      	bls.n	80049c6 <_vfiprintf_r+0x1ee>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0c5      	beq.n	800494e <_vfiprintf_r+0x176>
 80049c2:	9105      	str	r1, [sp, #20]
 80049c4:	e7c3      	b.n	800494e <_vfiprintf_r+0x176>
 80049c6:	4604      	mov	r4, r0
 80049c8:	2301      	movs	r3, #1
 80049ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ce:	e7f0      	b.n	80049b2 <_vfiprintf_r+0x1da>
 80049d0:	ab03      	add	r3, sp, #12
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	462a      	mov	r2, r5
 80049d6:	4630      	mov	r0, r6
 80049d8:	4b15      	ldr	r3, [pc, #84]	; (8004a30 <_vfiprintf_r+0x258>)
 80049da:	a904      	add	r1, sp, #16
 80049dc:	f7fd ffac 	bl	8002938 <_printf_float>
 80049e0:	4607      	mov	r7, r0
 80049e2:	1c78      	adds	r0, r7, #1
 80049e4:	d1d6      	bne.n	8004994 <_vfiprintf_r+0x1bc>
 80049e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049e8:	07d9      	lsls	r1, r3, #31
 80049ea:	d405      	bmi.n	80049f8 <_vfiprintf_r+0x220>
 80049ec:	89ab      	ldrh	r3, [r5, #12]
 80049ee:	059a      	lsls	r2, r3, #22
 80049f0:	d402      	bmi.n	80049f8 <_vfiprintf_r+0x220>
 80049f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049f4:	f7ff fb1c 	bl	8004030 <__retarget_lock_release_recursive>
 80049f8:	89ab      	ldrh	r3, [r5, #12]
 80049fa:	065b      	lsls	r3, r3, #25
 80049fc:	f53f af12 	bmi.w	8004824 <_vfiprintf_r+0x4c>
 8004a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a02:	e711      	b.n	8004828 <_vfiprintf_r+0x50>
 8004a04:	ab03      	add	r3, sp, #12
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	462a      	mov	r2, r5
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <_vfiprintf_r+0x258>)
 8004a0e:	a904      	add	r1, sp, #16
 8004a10:	f7fe fa2e 	bl	8002e70 <_printf_i>
 8004a14:	e7e4      	b.n	80049e0 <_vfiprintf_r+0x208>
 8004a16:	bf00      	nop
 8004a18:	08005258 	.word	0x08005258
 8004a1c:	08005278 	.word	0x08005278
 8004a20:	08005238 	.word	0x08005238
 8004a24:	080053f4 	.word	0x080053f4
 8004a28:	080053fe 	.word	0x080053fe
 8004a2c:	08002939 	.word	0x08002939
 8004a30:	080047b3 	.word	0x080047b3
 8004a34:	080053fa 	.word	0x080053fa

08004a38 <__sread>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a40:	f000 fa72 	bl	8004f28 <_read_r>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	bfab      	itete	ge
 8004a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a4c:	181b      	addge	r3, r3, r0
 8004a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a52:	bfac      	ite	ge
 8004a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a56:	81a3      	strhlt	r3, [r4, #12]
 8004a58:	bd10      	pop	{r4, pc}

08004a5a <__swrite>:
 8004a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5e:	461f      	mov	r7, r3
 8004a60:	898b      	ldrh	r3, [r1, #12]
 8004a62:	4605      	mov	r5, r0
 8004a64:	05db      	lsls	r3, r3, #23
 8004a66:	460c      	mov	r4, r1
 8004a68:	4616      	mov	r6, r2
 8004a6a:	d505      	bpl.n	8004a78 <__swrite+0x1e>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a74:	f000 f9d0 	bl	8004e18 <_lseek_r>
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	4632      	mov	r2, r6
 8004a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	4628      	mov	r0, r5
 8004a84:	463b      	mov	r3, r7
 8004a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8e:	f000 b869 	b.w	8004b64 <_write_r>

08004a92 <__sseek>:
 8004a92:	b510      	push	{r4, lr}
 8004a94:	460c      	mov	r4, r1
 8004a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9a:	f000 f9bd 	bl	8004e18 <_lseek_r>
 8004a9e:	1c43      	adds	r3, r0, #1
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	bf15      	itete	ne
 8004aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aae:	81a3      	strheq	r3, [r4, #12]
 8004ab0:	bf18      	it	ne
 8004ab2:	81a3      	strhne	r3, [r4, #12]
 8004ab4:	bd10      	pop	{r4, pc}

08004ab6 <__sclose>:
 8004ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aba:	f000 b8db 	b.w	8004c74 <_close_r>
	...

08004ac0 <__swbuf_r>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	460e      	mov	r6, r1
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	b118      	cbz	r0, 8004ad2 <__swbuf_r+0x12>
 8004aca:	6983      	ldr	r3, [r0, #24]
 8004acc:	b90b      	cbnz	r3, 8004ad2 <__swbuf_r+0x12>
 8004ace:	f7ff f9f9 	bl	8003ec4 <__sinit>
 8004ad2:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <__swbuf_r+0x98>)
 8004ad4:	429c      	cmp	r4, r3
 8004ad6:	d12b      	bne.n	8004b30 <__swbuf_r+0x70>
 8004ad8:	686c      	ldr	r4, [r5, #4]
 8004ada:	69a3      	ldr	r3, [r4, #24]
 8004adc:	60a3      	str	r3, [r4, #8]
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	071a      	lsls	r2, r3, #28
 8004ae2:	d52f      	bpl.n	8004b44 <__swbuf_r+0x84>
 8004ae4:	6923      	ldr	r3, [r4, #16]
 8004ae6:	b36b      	cbz	r3, 8004b44 <__swbuf_r+0x84>
 8004ae8:	6923      	ldr	r3, [r4, #16]
 8004aea:	6820      	ldr	r0, [r4, #0]
 8004aec:	b2f6      	uxtb	r6, r6
 8004aee:	1ac0      	subs	r0, r0, r3
 8004af0:	6963      	ldr	r3, [r4, #20]
 8004af2:	4637      	mov	r7, r6
 8004af4:	4283      	cmp	r3, r0
 8004af6:	dc04      	bgt.n	8004b02 <__swbuf_r+0x42>
 8004af8:	4621      	mov	r1, r4
 8004afa:	4628      	mov	r0, r5
 8004afc:	f000 f950 	bl	8004da0 <_fflush_r>
 8004b00:	bb30      	cbnz	r0, 8004b50 <__swbuf_r+0x90>
 8004b02:	68a3      	ldr	r3, [r4, #8]
 8004b04:	3001      	adds	r0, #1
 8004b06:	3b01      	subs	r3, #1
 8004b08:	60a3      	str	r3, [r4, #8]
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	6022      	str	r2, [r4, #0]
 8004b10:	701e      	strb	r6, [r3, #0]
 8004b12:	6963      	ldr	r3, [r4, #20]
 8004b14:	4283      	cmp	r3, r0
 8004b16:	d004      	beq.n	8004b22 <__swbuf_r+0x62>
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	07db      	lsls	r3, r3, #31
 8004b1c:	d506      	bpl.n	8004b2c <__swbuf_r+0x6c>
 8004b1e:	2e0a      	cmp	r6, #10
 8004b20:	d104      	bne.n	8004b2c <__swbuf_r+0x6c>
 8004b22:	4621      	mov	r1, r4
 8004b24:	4628      	mov	r0, r5
 8004b26:	f000 f93b 	bl	8004da0 <_fflush_r>
 8004b2a:	b988      	cbnz	r0, 8004b50 <__swbuf_r+0x90>
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b30:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <__swbuf_r+0x9c>)
 8004b32:	429c      	cmp	r4, r3
 8004b34:	d101      	bne.n	8004b3a <__swbuf_r+0x7a>
 8004b36:	68ac      	ldr	r4, [r5, #8]
 8004b38:	e7cf      	b.n	8004ada <__swbuf_r+0x1a>
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <__swbuf_r+0xa0>)
 8004b3c:	429c      	cmp	r4, r3
 8004b3e:	bf08      	it	eq
 8004b40:	68ec      	ldreq	r4, [r5, #12]
 8004b42:	e7ca      	b.n	8004ada <__swbuf_r+0x1a>
 8004b44:	4621      	mov	r1, r4
 8004b46:	4628      	mov	r0, r5
 8004b48:	f000 f81e 	bl	8004b88 <__swsetup_r>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d0cb      	beq.n	8004ae8 <__swbuf_r+0x28>
 8004b50:	f04f 37ff 	mov.w	r7, #4294967295
 8004b54:	e7ea      	b.n	8004b2c <__swbuf_r+0x6c>
 8004b56:	bf00      	nop
 8004b58:	08005258 	.word	0x08005258
 8004b5c:	08005278 	.word	0x08005278
 8004b60:	08005238 	.word	0x08005238

08004b64 <_write_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4604      	mov	r4, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4d05      	ldr	r5, [pc, #20]	; (8004b84 <_write_r+0x20>)
 8004b70:	602a      	str	r2, [r5, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f7fc f81d 	bl	8000bb2 <_write>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_write_r+0x1e>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_write_r+0x1e>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	200011b4 	.word	0x200011b4

08004b88 <__swsetup_r>:
 8004b88:	4b32      	ldr	r3, [pc, #200]	; (8004c54 <__swsetup_r+0xcc>)
 8004b8a:	b570      	push	{r4, r5, r6, lr}
 8004b8c:	681d      	ldr	r5, [r3, #0]
 8004b8e:	4606      	mov	r6, r0
 8004b90:	460c      	mov	r4, r1
 8004b92:	b125      	cbz	r5, 8004b9e <__swsetup_r+0x16>
 8004b94:	69ab      	ldr	r3, [r5, #24]
 8004b96:	b913      	cbnz	r3, 8004b9e <__swsetup_r+0x16>
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f7ff f993 	bl	8003ec4 <__sinit>
 8004b9e:	4b2e      	ldr	r3, [pc, #184]	; (8004c58 <__swsetup_r+0xd0>)
 8004ba0:	429c      	cmp	r4, r3
 8004ba2:	d10f      	bne.n	8004bc4 <__swsetup_r+0x3c>
 8004ba4:	686c      	ldr	r4, [r5, #4]
 8004ba6:	89a3      	ldrh	r3, [r4, #12]
 8004ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bac:	0719      	lsls	r1, r3, #28
 8004bae:	d42c      	bmi.n	8004c0a <__swsetup_r+0x82>
 8004bb0:	06dd      	lsls	r5, r3, #27
 8004bb2:	d411      	bmi.n	8004bd8 <__swsetup_r+0x50>
 8004bb4:	2309      	movs	r3, #9
 8004bb6:	6033      	str	r3, [r6, #0]
 8004bb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc0:	81a3      	strh	r3, [r4, #12]
 8004bc2:	e03e      	b.n	8004c42 <__swsetup_r+0xba>
 8004bc4:	4b25      	ldr	r3, [pc, #148]	; (8004c5c <__swsetup_r+0xd4>)
 8004bc6:	429c      	cmp	r4, r3
 8004bc8:	d101      	bne.n	8004bce <__swsetup_r+0x46>
 8004bca:	68ac      	ldr	r4, [r5, #8]
 8004bcc:	e7eb      	b.n	8004ba6 <__swsetup_r+0x1e>
 8004bce:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <__swsetup_r+0xd8>)
 8004bd0:	429c      	cmp	r4, r3
 8004bd2:	bf08      	it	eq
 8004bd4:	68ec      	ldreq	r4, [r5, #12]
 8004bd6:	e7e6      	b.n	8004ba6 <__swsetup_r+0x1e>
 8004bd8:	0758      	lsls	r0, r3, #29
 8004bda:	d512      	bpl.n	8004c02 <__swsetup_r+0x7a>
 8004bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bde:	b141      	cbz	r1, 8004bf2 <__swsetup_r+0x6a>
 8004be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004be4:	4299      	cmp	r1, r3
 8004be6:	d002      	beq.n	8004bee <__swsetup_r+0x66>
 8004be8:	4630      	mov	r0, r6
 8004bea:	f7fd fd61 	bl	80026b0 <_free_r>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8004bf2:	89a3      	ldrh	r3, [r4, #12]
 8004bf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	6063      	str	r3, [r4, #4]
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	f043 0308 	orr.w	r3, r3, #8
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	6923      	ldr	r3, [r4, #16]
 8004c0c:	b94b      	cbnz	r3, 8004c22 <__swsetup_r+0x9a>
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c18:	d003      	beq.n	8004c22 <__swsetup_r+0x9a>
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f000 f931 	bl	8004e84 <__smakebuf_r>
 8004c22:	89a0      	ldrh	r0, [r4, #12]
 8004c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c28:	f010 0301 	ands.w	r3, r0, #1
 8004c2c:	d00a      	beq.n	8004c44 <__swsetup_r+0xbc>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60a3      	str	r3, [r4, #8]
 8004c32:	6963      	ldr	r3, [r4, #20]
 8004c34:	425b      	negs	r3, r3
 8004c36:	61a3      	str	r3, [r4, #24]
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	b943      	cbnz	r3, 8004c4e <__swsetup_r+0xc6>
 8004c3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c40:	d1ba      	bne.n	8004bb8 <__swsetup_r+0x30>
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
 8004c44:	0781      	lsls	r1, r0, #30
 8004c46:	bf58      	it	pl
 8004c48:	6963      	ldrpl	r3, [r4, #20]
 8004c4a:	60a3      	str	r3, [r4, #8]
 8004c4c:	e7f4      	b.n	8004c38 <__swsetup_r+0xb0>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e7f7      	b.n	8004c42 <__swsetup_r+0xba>
 8004c52:	bf00      	nop
 8004c54:	20000004 	.word	0x20000004
 8004c58:	08005258 	.word	0x08005258
 8004c5c:	08005278 	.word	0x08005278
 8004c60:	08005238 	.word	0x08005238

08004c64 <abort>:
 8004c64:	2006      	movs	r0, #6
 8004c66:	b508      	push	{r3, lr}
 8004c68:	f000 f998 	bl	8004f9c <raise>
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	f000 fa27 	bl	80050c0 <_exit>
	...

08004c74 <_close_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	2300      	movs	r3, #0
 8004c78:	4d05      	ldr	r5, [pc, #20]	; (8004c90 <_close_r+0x1c>)
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	602b      	str	r3, [r5, #0]
 8004c80:	f000 f9d8 	bl	8005034 <_close>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_close_r+0x1a>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_close_r+0x1a>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	200011b4 	.word	0x200011b4

08004c94 <__sflush_r>:
 8004c94:	898a      	ldrh	r2, [r1, #12]
 8004c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	0710      	lsls	r0, r2, #28
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	d458      	bmi.n	8004d54 <__sflush_r+0xc0>
 8004ca2:	684b      	ldr	r3, [r1, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	dc05      	bgt.n	8004cb4 <__sflush_r+0x20>
 8004ca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	dc02      	bgt.n	8004cb4 <__sflush_r+0x20>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cb6:	2e00      	cmp	r6, #0
 8004cb8:	d0f9      	beq.n	8004cae <__sflush_r+0x1a>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cc0:	682f      	ldr	r7, [r5, #0]
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	d032      	beq.n	8004d2c <__sflush_r+0x98>
 8004cc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	075a      	lsls	r2, r3, #29
 8004ccc:	d505      	bpl.n	8004cda <__sflush_r+0x46>
 8004cce:	6863      	ldr	r3, [r4, #4]
 8004cd0:	1ac0      	subs	r0, r0, r3
 8004cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cd4:	b10b      	cbz	r3, 8004cda <__sflush_r+0x46>
 8004cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cd8:	1ac0      	subs	r0, r0, r3
 8004cda:	2300      	movs	r3, #0
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	6a21      	ldr	r1, [r4, #32]
 8004ce4:	47b0      	blx	r6
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	d106      	bne.n	8004cfa <__sflush_r+0x66>
 8004cec:	6829      	ldr	r1, [r5, #0]
 8004cee:	291d      	cmp	r1, #29
 8004cf0:	d82c      	bhi.n	8004d4c <__sflush_r+0xb8>
 8004cf2:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <__sflush_r+0x108>)
 8004cf4:	40ca      	lsrs	r2, r1
 8004cf6:	07d6      	lsls	r6, r2, #31
 8004cf8:	d528      	bpl.n	8004d4c <__sflush_r+0xb8>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	6062      	str	r2, [r4, #4]
 8004cfe:	6922      	ldr	r2, [r4, #16]
 8004d00:	04d9      	lsls	r1, r3, #19
 8004d02:	6022      	str	r2, [r4, #0]
 8004d04:	d504      	bpl.n	8004d10 <__sflush_r+0x7c>
 8004d06:	1c42      	adds	r2, r0, #1
 8004d08:	d101      	bne.n	8004d0e <__sflush_r+0x7a>
 8004d0a:	682b      	ldr	r3, [r5, #0]
 8004d0c:	b903      	cbnz	r3, 8004d10 <__sflush_r+0x7c>
 8004d0e:	6560      	str	r0, [r4, #84]	; 0x54
 8004d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d12:	602f      	str	r7, [r5, #0]
 8004d14:	2900      	cmp	r1, #0
 8004d16:	d0ca      	beq.n	8004cae <__sflush_r+0x1a>
 8004d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d1c:	4299      	cmp	r1, r3
 8004d1e:	d002      	beq.n	8004d26 <__sflush_r+0x92>
 8004d20:	4628      	mov	r0, r5
 8004d22:	f7fd fcc5 	bl	80026b0 <_free_r>
 8004d26:	2000      	movs	r0, #0
 8004d28:	6360      	str	r0, [r4, #52]	; 0x34
 8004d2a:	e7c1      	b.n	8004cb0 <__sflush_r+0x1c>
 8004d2c:	6a21      	ldr	r1, [r4, #32]
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b0      	blx	r6
 8004d34:	1c41      	adds	r1, r0, #1
 8004d36:	d1c7      	bne.n	8004cc8 <__sflush_r+0x34>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0c4      	beq.n	8004cc8 <__sflush_r+0x34>
 8004d3e:	2b1d      	cmp	r3, #29
 8004d40:	d001      	beq.n	8004d46 <__sflush_r+0xb2>
 8004d42:	2b16      	cmp	r3, #22
 8004d44:	d101      	bne.n	8004d4a <__sflush_r+0xb6>
 8004d46:	602f      	str	r7, [r5, #0]
 8004d48:	e7b1      	b.n	8004cae <__sflush_r+0x1a>
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d50:	81a3      	strh	r3, [r4, #12]
 8004d52:	e7ad      	b.n	8004cb0 <__sflush_r+0x1c>
 8004d54:	690f      	ldr	r7, [r1, #16]
 8004d56:	2f00      	cmp	r7, #0
 8004d58:	d0a9      	beq.n	8004cae <__sflush_r+0x1a>
 8004d5a:	0793      	lsls	r3, r2, #30
 8004d5c:	bf18      	it	ne
 8004d5e:	2300      	movne	r3, #0
 8004d60:	680e      	ldr	r6, [r1, #0]
 8004d62:	bf08      	it	eq
 8004d64:	694b      	ldreq	r3, [r1, #20]
 8004d66:	eba6 0807 	sub.w	r8, r6, r7
 8004d6a:	600f      	str	r7, [r1, #0]
 8004d6c:	608b      	str	r3, [r1, #8]
 8004d6e:	f1b8 0f00 	cmp.w	r8, #0
 8004d72:	dd9c      	ble.n	8004cae <__sflush_r+0x1a>
 8004d74:	4643      	mov	r3, r8
 8004d76:	463a      	mov	r2, r7
 8004d78:	4628      	mov	r0, r5
 8004d7a:	6a21      	ldr	r1, [r4, #32]
 8004d7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d7e:	47b0      	blx	r6
 8004d80:	2800      	cmp	r0, #0
 8004d82:	dc06      	bgt.n	8004d92 <__sflush_r+0xfe>
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d8e:	81a3      	strh	r3, [r4, #12]
 8004d90:	e78e      	b.n	8004cb0 <__sflush_r+0x1c>
 8004d92:	4407      	add	r7, r0
 8004d94:	eba8 0800 	sub.w	r8, r8, r0
 8004d98:	e7e9      	b.n	8004d6e <__sflush_r+0xda>
 8004d9a:	bf00      	nop
 8004d9c:	20400001 	.word	0x20400001

08004da0 <_fflush_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	690b      	ldr	r3, [r1, #16]
 8004da4:	4605      	mov	r5, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	b913      	cbnz	r3, 8004db0 <_fflush_r+0x10>
 8004daa:	2500      	movs	r5, #0
 8004dac:	4628      	mov	r0, r5
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	b118      	cbz	r0, 8004dba <_fflush_r+0x1a>
 8004db2:	6983      	ldr	r3, [r0, #24]
 8004db4:	b90b      	cbnz	r3, 8004dba <_fflush_r+0x1a>
 8004db6:	f7ff f885 	bl	8003ec4 <__sinit>
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <_fflush_r+0x6c>)
 8004dbc:	429c      	cmp	r4, r3
 8004dbe:	d11b      	bne.n	8004df8 <_fflush_r+0x58>
 8004dc0:	686c      	ldr	r4, [r5, #4]
 8004dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ef      	beq.n	8004daa <_fflush_r+0xa>
 8004dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dcc:	07d0      	lsls	r0, r2, #31
 8004dce:	d404      	bmi.n	8004dda <_fflush_r+0x3a>
 8004dd0:	0599      	lsls	r1, r3, #22
 8004dd2:	d402      	bmi.n	8004dda <_fflush_r+0x3a>
 8004dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dd6:	f7ff f92a 	bl	800402e <__retarget_lock_acquire_recursive>
 8004dda:	4628      	mov	r0, r5
 8004ddc:	4621      	mov	r1, r4
 8004dde:	f7ff ff59 	bl	8004c94 <__sflush_r>
 8004de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004de4:	4605      	mov	r5, r0
 8004de6:	07da      	lsls	r2, r3, #31
 8004de8:	d4e0      	bmi.n	8004dac <_fflush_r+0xc>
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	059b      	lsls	r3, r3, #22
 8004dee:	d4dd      	bmi.n	8004dac <_fflush_r+0xc>
 8004df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004df2:	f7ff f91d 	bl	8004030 <__retarget_lock_release_recursive>
 8004df6:	e7d9      	b.n	8004dac <_fflush_r+0xc>
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <_fflush_r+0x70>)
 8004dfa:	429c      	cmp	r4, r3
 8004dfc:	d101      	bne.n	8004e02 <_fflush_r+0x62>
 8004dfe:	68ac      	ldr	r4, [r5, #8]
 8004e00:	e7df      	b.n	8004dc2 <_fflush_r+0x22>
 8004e02:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <_fflush_r+0x74>)
 8004e04:	429c      	cmp	r4, r3
 8004e06:	bf08      	it	eq
 8004e08:	68ec      	ldreq	r4, [r5, #12]
 8004e0a:	e7da      	b.n	8004dc2 <_fflush_r+0x22>
 8004e0c:	08005258 	.word	0x08005258
 8004e10:	08005278 	.word	0x08005278
 8004e14:	08005238 	.word	0x08005238

08004e18 <_lseek_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	4608      	mov	r0, r1
 8004e1e:	4611      	mov	r1, r2
 8004e20:	2200      	movs	r2, #0
 8004e22:	4d05      	ldr	r5, [pc, #20]	; (8004e38 <_lseek_r+0x20>)
 8004e24:	602a      	str	r2, [r5, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	f000 f92c 	bl	8005084 <_lseek>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d102      	bne.n	8004e36 <_lseek_r+0x1e>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	b103      	cbz	r3, 8004e36 <_lseek_r+0x1e>
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	200011b4 	.word	0x200011b4

08004e3c <__swhatbuf_r>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	460e      	mov	r6, r1
 8004e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e44:	4614      	mov	r4, r2
 8004e46:	2900      	cmp	r1, #0
 8004e48:	461d      	mov	r5, r3
 8004e4a:	b096      	sub	sp, #88	; 0x58
 8004e4c:	da07      	bge.n	8004e5e <__swhatbuf_r+0x22>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	602b      	str	r3, [r5, #0]
 8004e52:	89b3      	ldrh	r3, [r6, #12]
 8004e54:	061a      	lsls	r2, r3, #24
 8004e56:	d410      	bmi.n	8004e7a <__swhatbuf_r+0x3e>
 8004e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e5c:	e00e      	b.n	8004e7c <__swhatbuf_r+0x40>
 8004e5e:	466a      	mov	r2, sp
 8004e60:	f000 f8c6 	bl	8004ff0 <_fstat_r>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	dbf2      	blt.n	8004e4e <__swhatbuf_r+0x12>
 8004e68:	9a01      	ldr	r2, [sp, #4]
 8004e6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e72:	425a      	negs	r2, r3
 8004e74:	415a      	adcs	r2, r3
 8004e76:	602a      	str	r2, [r5, #0]
 8004e78:	e7ee      	b.n	8004e58 <__swhatbuf_r+0x1c>
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	6023      	str	r3, [r4, #0]
 8004e80:	b016      	add	sp, #88	; 0x58
 8004e82:	bd70      	pop	{r4, r5, r6, pc}

08004e84 <__smakebuf_r>:
 8004e84:	898b      	ldrh	r3, [r1, #12]
 8004e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e88:	079d      	lsls	r5, r3, #30
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	d507      	bpl.n	8004ea0 <__smakebuf_r+0x1c>
 8004e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	6123      	str	r3, [r4, #16]
 8004e98:	2301      	movs	r3, #1
 8004e9a:	6163      	str	r3, [r4, #20]
 8004e9c:	b002      	add	sp, #8
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ea0:	466a      	mov	r2, sp
 8004ea2:	ab01      	add	r3, sp, #4
 8004ea4:	f7ff ffca 	bl	8004e3c <__swhatbuf_r>
 8004ea8:	9900      	ldr	r1, [sp, #0]
 8004eaa:	4605      	mov	r5, r0
 8004eac:	4630      	mov	r0, r6
 8004eae:	f7fd fc4b 	bl	8002748 <_malloc_r>
 8004eb2:	b948      	cbnz	r0, 8004ec8 <__smakebuf_r+0x44>
 8004eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb8:	059a      	lsls	r2, r3, #22
 8004eba:	d4ef      	bmi.n	8004e9c <__smakebuf_r+0x18>
 8004ebc:	f023 0303 	bic.w	r3, r3, #3
 8004ec0:	f043 0302 	orr.w	r3, r3, #2
 8004ec4:	81a3      	strh	r3, [r4, #12]
 8004ec6:	e7e3      	b.n	8004e90 <__smakebuf_r+0xc>
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <__smakebuf_r+0x7c>)
 8004eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	6020      	str	r0, [r4, #0]
 8004ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed4:	81a3      	strh	r3, [r4, #12]
 8004ed6:	9b00      	ldr	r3, [sp, #0]
 8004ed8:	6120      	str	r0, [r4, #16]
 8004eda:	6163      	str	r3, [r4, #20]
 8004edc:	9b01      	ldr	r3, [sp, #4]
 8004ede:	b15b      	cbz	r3, 8004ef8 <__smakebuf_r+0x74>
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ee6:	f000 f895 	bl	8005014 <_isatty_r>
 8004eea:	b128      	cbz	r0, 8004ef8 <__smakebuf_r+0x74>
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	f023 0303 	bic.w	r3, r3, #3
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	81a3      	strh	r3, [r4, #12]
 8004ef8:	89a0      	ldrh	r0, [r4, #12]
 8004efa:	4305      	orrs	r5, r0
 8004efc:	81a5      	strh	r5, [r4, #12]
 8004efe:	e7cd      	b.n	8004e9c <__smakebuf_r+0x18>
 8004f00:	08003e5d 	.word	0x08003e5d

08004f04 <__ascii_mbtowc>:
 8004f04:	b082      	sub	sp, #8
 8004f06:	b901      	cbnz	r1, 8004f0a <__ascii_mbtowc+0x6>
 8004f08:	a901      	add	r1, sp, #4
 8004f0a:	b142      	cbz	r2, 8004f1e <__ascii_mbtowc+0x1a>
 8004f0c:	b14b      	cbz	r3, 8004f22 <__ascii_mbtowc+0x1e>
 8004f0e:	7813      	ldrb	r3, [r2, #0]
 8004f10:	600b      	str	r3, [r1, #0]
 8004f12:	7812      	ldrb	r2, [r2, #0]
 8004f14:	1e10      	subs	r0, r2, #0
 8004f16:	bf18      	it	ne
 8004f18:	2001      	movne	r0, #1
 8004f1a:	b002      	add	sp, #8
 8004f1c:	4770      	bx	lr
 8004f1e:	4610      	mov	r0, r2
 8004f20:	e7fb      	b.n	8004f1a <__ascii_mbtowc+0x16>
 8004f22:	f06f 0001 	mvn.w	r0, #1
 8004f26:	e7f8      	b.n	8004f1a <__ascii_mbtowc+0x16>

08004f28 <_read_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	2200      	movs	r2, #0
 8004f32:	4d05      	ldr	r5, [pc, #20]	; (8004f48 <_read_r+0x20>)
 8004f34:	602a      	str	r2, [r5, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f000 f8ac 	bl	8005094 <_read>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d102      	bne.n	8004f46 <_read_r+0x1e>
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	b103      	cbz	r3, 8004f46 <_read_r+0x1e>
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	200011b4 	.word	0x200011b4

08004f4c <_raise_r>:
 8004f4c:	291f      	cmp	r1, #31
 8004f4e:	b538      	push	{r3, r4, r5, lr}
 8004f50:	4604      	mov	r4, r0
 8004f52:	460d      	mov	r5, r1
 8004f54:	d904      	bls.n	8004f60 <_raise_r+0x14>
 8004f56:	2316      	movs	r3, #22
 8004f58:	6003      	str	r3, [r0, #0]
 8004f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f62:	b112      	cbz	r2, 8004f6a <_raise_r+0x1e>
 8004f64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f68:	b94b      	cbnz	r3, 8004f7e <_raise_r+0x32>
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f000 f830 	bl	8004fd0 <_getpid_r>
 8004f70:	462a      	mov	r2, r5
 8004f72:	4601      	mov	r1, r0
 8004f74:	4620      	mov	r0, r4
 8004f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f7a:	f000 b817 	b.w	8004fac <_kill_r>
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d00a      	beq.n	8004f98 <_raise_r+0x4c>
 8004f82:	1c59      	adds	r1, r3, #1
 8004f84:	d103      	bne.n	8004f8e <_raise_r+0x42>
 8004f86:	2316      	movs	r3, #22
 8004f88:	6003      	str	r3, [r0, #0]
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	e7e7      	b.n	8004f5e <_raise_r+0x12>
 8004f8e:	2400      	movs	r4, #0
 8004f90:	4628      	mov	r0, r5
 8004f92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f96:	4798      	blx	r3
 8004f98:	2000      	movs	r0, #0
 8004f9a:	e7e0      	b.n	8004f5e <_raise_r+0x12>

08004f9c <raise>:
 8004f9c:	4b02      	ldr	r3, [pc, #8]	; (8004fa8 <raise+0xc>)
 8004f9e:	4601      	mov	r1, r0
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	f7ff bfd3 	b.w	8004f4c <_raise_r>
 8004fa6:	bf00      	nop
 8004fa8:	20000004 	.word	0x20000004

08004fac <_kill_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	2300      	movs	r3, #0
 8004fb0:	4d06      	ldr	r5, [pc, #24]	; (8004fcc <_kill_r+0x20>)
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	4608      	mov	r0, r1
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	602b      	str	r3, [r5, #0]
 8004fba:	f000 f85b 	bl	8005074 <_kill>
 8004fbe:	1c43      	adds	r3, r0, #1
 8004fc0:	d102      	bne.n	8004fc8 <_kill_r+0x1c>
 8004fc2:	682b      	ldr	r3, [r5, #0]
 8004fc4:	b103      	cbz	r3, 8004fc8 <_kill_r+0x1c>
 8004fc6:	6023      	str	r3, [r4, #0]
 8004fc8:	bd38      	pop	{r3, r4, r5, pc}
 8004fca:	bf00      	nop
 8004fcc:	200011b4 	.word	0x200011b4

08004fd0 <_getpid_r>:
 8004fd0:	f000 b840 	b.w	8005054 <_getpid>

08004fd4 <__ascii_wctomb>:
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	4608      	mov	r0, r1
 8004fd8:	b141      	cbz	r1, 8004fec <__ascii_wctomb+0x18>
 8004fda:	2aff      	cmp	r2, #255	; 0xff
 8004fdc:	d904      	bls.n	8004fe8 <__ascii_wctomb+0x14>
 8004fde:	228a      	movs	r2, #138	; 0x8a
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	4770      	bx	lr
 8004fe8:	2001      	movs	r0, #1
 8004fea:	700a      	strb	r2, [r1, #0]
 8004fec:	4770      	bx	lr
	...

08004ff0 <_fstat_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	4d06      	ldr	r5, [pc, #24]	; (8005010 <_fstat_r+0x20>)
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	f000 f821 	bl	8005044 <_fstat>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d102      	bne.n	800500c <_fstat_r+0x1c>
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	b103      	cbz	r3, 800500c <_fstat_r+0x1c>
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	bd38      	pop	{r3, r4, r5, pc}
 800500e:	bf00      	nop
 8005010:	200011b4 	.word	0x200011b4

08005014 <_isatty_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	2300      	movs	r3, #0
 8005018:	4d05      	ldr	r5, [pc, #20]	; (8005030 <_isatty_r+0x1c>)
 800501a:	4604      	mov	r4, r0
 800501c:	4608      	mov	r0, r1
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	f000 f820 	bl	8005064 <_isatty>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_isatty_r+0x1a>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_isatty_r+0x1a>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	200011b4 	.word	0x200011b4

08005034 <_close>:
 8005034:	2258      	movs	r2, #88	; 0x58
 8005036:	4b02      	ldr	r3, [pc, #8]	; (8005040 <_close+0xc>)
 8005038:	f04f 30ff 	mov.w	r0, #4294967295
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	4770      	bx	lr
 8005040:	200011b4 	.word	0x200011b4

08005044 <_fstat>:
 8005044:	2258      	movs	r2, #88	; 0x58
 8005046:	4b02      	ldr	r3, [pc, #8]	; (8005050 <_fstat+0xc>)
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	4770      	bx	lr
 8005050:	200011b4 	.word	0x200011b4

08005054 <_getpid>:
 8005054:	2258      	movs	r2, #88	; 0x58
 8005056:	4b02      	ldr	r3, [pc, #8]	; (8005060 <_getpid+0xc>)
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	4770      	bx	lr
 8005060:	200011b4 	.word	0x200011b4

08005064 <_isatty>:
 8005064:	2258      	movs	r2, #88	; 0x58
 8005066:	4b02      	ldr	r3, [pc, #8]	; (8005070 <_isatty+0xc>)
 8005068:	2000      	movs	r0, #0
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	200011b4 	.word	0x200011b4

08005074 <_kill>:
 8005074:	2258      	movs	r2, #88	; 0x58
 8005076:	4b02      	ldr	r3, [pc, #8]	; (8005080 <_kill+0xc>)
 8005078:	f04f 30ff 	mov.w	r0, #4294967295
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	4770      	bx	lr
 8005080:	200011b4 	.word	0x200011b4

08005084 <_lseek>:
 8005084:	2258      	movs	r2, #88	; 0x58
 8005086:	4b02      	ldr	r3, [pc, #8]	; (8005090 <_lseek+0xc>)
 8005088:	f04f 30ff 	mov.w	r0, #4294967295
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	4770      	bx	lr
 8005090:	200011b4 	.word	0x200011b4

08005094 <_read>:
 8005094:	2258      	movs	r2, #88	; 0x58
 8005096:	4b02      	ldr	r3, [pc, #8]	; (80050a0 <_read+0xc>)
 8005098:	f04f 30ff 	mov.w	r0, #4294967295
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	4770      	bx	lr
 80050a0:	200011b4 	.word	0x200011b4

080050a4 <_sbrk>:
 80050a4:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <_sbrk+0x14>)
 80050a6:	4602      	mov	r2, r0
 80050a8:	6819      	ldr	r1, [r3, #0]
 80050aa:	b909      	cbnz	r1, 80050b0 <_sbrk+0xc>
 80050ac:	4903      	ldr	r1, [pc, #12]	; (80050bc <_sbrk+0x18>)
 80050ae:	6019      	str	r1, [r3, #0]
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	4402      	add	r2, r0
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	4770      	bx	lr
 80050b8:	2000119c 	.word	0x2000119c
 80050bc:	200011b8 	.word	0x200011b8

080050c0 <_exit>:
 80050c0:	e7fe      	b.n	80050c0 <_exit>
	...

080050c4 <_init>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	bf00      	nop
 80050c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ca:	bc08      	pop	{r3}
 80050cc:	469e      	mov	lr, r3
 80050ce:	4770      	bx	lr

080050d0 <_fini>:
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d2:	bf00      	nop
 80050d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d6:	bc08      	pop	{r3}
 80050d8:	469e      	mov	lr, r3
 80050da:	4770      	bx	lr
